{"version":3,"sources":["../../../src/frameworks/react/provider.tsx"],"sourcesContent":["import React, { createContext, useContext } from 'react'\n\nimport { ElectricClient } from '../../client/model/client'\nimport { DbSchema } from '../../client/model'\n\ninterface Props<S extends ElectricClient<DbSchema<any>>> {\n  children?: React.ReactNode\n  db?: S\n}\n\ninterface ElectricContext<S extends ElectricClient<DbSchema<any>>> {\n  ElectricContext: React.Context<S | undefined>\n  useElectric: () => S | undefined\n  ElectricProvider: ({ children, db }: Props<S>) => JSX.Element\n}\n\n/**\n * This \"static\" context is used internally by our React hooks to access the {@link ElectricClient}.\n * It loses information about the actual types of the DB tables,\n * but we don't need that information in the React hooks.\n * However, users preferably don't lose this type information,\n * therefore, they can use {@link makeElectricContext}.\n */\nlet ElectricContext: React.Context<ElectricClient<DbSchema<any>> | undefined> =\n  createContext<ElectricClient<DbSchema<any>> | undefined>(undefined)\n\nexport { ElectricContext }\n\n/**\n * Call this function to create an Electric context, provider, and subscriber for your React application.\n * We can't provide a predefined context, provider, and subscriber because that would lose type information\n * as the types depend on the type of the database `S` that's provides as a type argument.\n *\n * @example\n * This example loses information about the concrete DB tables:\n * ```\n * const ctx = createContext<ElectricClient>()\n * ```\n */\nexport function makeElectricContext<\n  S extends ElectricClient<DbSchema<any>>\n>(): ElectricContext<S> {\n  const ctx = createContext<S | undefined>(undefined)\n\n  ElectricContext = ctx as any\n  const useElectric = () => useContext(ctx)\n\n  const provider = ({ children, db }: Props<S>) => {\n    return <ctx.Provider value={db}>{children}</ctx.Provider>\n  }\n\n  return {\n    ElectricContext: ctx,\n    useElectric: useElectric,\n    ElectricProvider: provider,\n  }\n}\n"],"mappings":"AAAA,OAAO,SAAS,eAAe,kBAAkB;AAuBjD,IAAI,kBACF,cAAyD,MAAS;AAe7D,SAAS,sBAEQ;AACtB,QAAM,MAAM,cAA6B,MAAS;AAElD,oBAAkB;AAClB,QAAM,cAAc,MAAM,WAAW,GAAG;AAExC,QAAM,WAAW,CAAC,EAAE,UAAU,GAAG,MAAgB;AAC/C,WAAO,oCAAC,IAAI,UAAJ,EAAa,OAAO,MAAK,QAAS;AAAA,EAC5C;AAEA,SAAO;AAAA,IACL,iBAAiB;AAAA,IACjB;AAAA,IACA,kBAAkB;AAAA,EACpB;AACF;","names":[]}