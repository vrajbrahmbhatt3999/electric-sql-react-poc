{"version":3,"sources":["../../../../src/frameworks/react/hooks/useLiveQuery.ts"],"sourcesContent":["import { useEffect, useState, useMemo, DependencyList } from 'react'\nimport { hash } from 'ohash'\n\nimport {\n  LiveResultContext,\n  LiveResultUpdate,\n} from '../../../client/model/model'\n\n/**\n * Main reactive query hook for React applications. It needs to be\n * used in tandem with the {@link ElectricProvider} which sets an\n * {@link ElectricClient) as the `electric` value. This provides\n * a notifier which this hook uses to subscribe to data change\n * notifications to matching tables. The {@link ElectricProvider}\n * can be obtained through {@link makeElectricContext}.\n *\n * Live query provided can be dynamic, but it will be a hash of the provided query will be computed on every render.\n * If you need a more optimal approach, use a two-argument version of this with explicit dependency listing\n *\n * @param runQuery - a live query.\n *\n * @example Using a simple live query. The table will depend on your application\n * ```ts\n * const { results } = useLiveQuery(db.items.liveMany({}))\n * ```\n */\nfunction useLiveQuery<Res>(\n  runQuery: LiveResultContext<Res>\n): LiveResultUpdate<Res>\n\n/**\n * Main reactive query hook for React applications. It needs to be\n * used in tandem with the {@link ElectricProvider} which sets an\n * {@link ElectricClient) as the `electric` value. This provides\n * a notifier which this hook uses to subscribe to data change\n * notifications to matching tables. The {@link ElectricProvider}\n * can be obtained through {@link makeElectricContext}.\n *\n * You can think of arguments to this functions as arguments to `useMemo`.\n * The function should return a live query, and the dependency list is passed\n * to `useMemo` to rerun the function.\n *\n * @param runQueryFn - a function that returns a live query\n * @param dependencies - a list of React dependencies that causes the function returning the live query to rerun\n *\n * @example Using a simple live query with a dependency. The table will depend on your application\n * ```ts\n * const [limit, _setLimit] = useState(10)\n * const { results } = useLiveQuery(() => db.items.liveMany({ take: limit }), [limit])\n * ```\n */\nfunction useLiveQuery<Res>(\n  runQueryFn: () => LiveResultContext<Res>,\n  dependencies: DependencyList\n): LiveResultUpdate<Res>\nfunction useLiveQuery<Res>(\n  runQueryOrFn: LiveResultContext<Res> | (() => LiveResultContext<Res>),\n  deps?: DependencyList\n): LiveResultUpdate<Res> {\n  if (deps) {\n    return useLiveQueryWithDependencies(\n      runQueryOrFn as () => LiveResultContext<Res>,\n      deps\n    )\n  } else {\n    return useLiveQueryWithQueryHash(runQueryOrFn as LiveResultContext<Res>)\n  }\n}\n\nfunction useLiveQueryWithDependencies<Res>(\n  runQueryFn: () => LiveResultContext<Res>,\n  dependencies: DependencyList\n): LiveResultUpdate<Res> {\n  const runQuery = useMemo(runQueryFn, dependencies)\n\n  return useLiveQueryWithQueryUpdates(runQuery, [runQuery])\n}\n\nfunction useLiveQueryWithQueryHash<Res>(\n  runQuery: LiveResultContext<Res>\n): LiveResultUpdate<Res> {\n  const queryHash = useMemo(\n    () => hash(runQuery.sourceQuery),\n    [runQuery.sourceQuery]\n  )\n\n  return useLiveQueryWithQueryUpdates(runQuery, [queryHash])\n}\n\nfunction useLiveQueryWithQueryUpdates<Res>(\n  runQuery: LiveResultContext<Res>,\n  runQueryDependencies: DependencyList\n): LiveResultUpdate<Res> {\n  const [resultData, setResultData] = useState<LiveResultUpdate<Res>>({})\n\n  // Once we have electric, we subscribe to the query results and\n  // update that subscription on any dependency change\n  useEffect(() => {\n    const unsubscribe = runQuery.subscribe(setResultData)\n    return unsubscribe\n  }, runQueryDependencies)\n\n  return resultData\n}\n\nexport default useLiveQuery\n"],"mappings":"AAAA,SAAS,WAAW,UAAU,eAA+B;AAC7D,SAAS,YAAY;AAsDrB,SAAS,aACP,cACA,MACuB;AACvB,MAAI,MAAM;AACR,WAAO;AAAA,MACL;AAAA,MACA;AAAA,IACF;AAAA,EACF,OAAO;AACL,WAAO,0BAA0B,YAAsC;AAAA,EACzE;AACF;AAEA,SAAS,6BACP,YACA,cACuB;AACvB,QAAM,WAAW,QAAQ,YAAY,YAAY;AAEjD,SAAO,6BAA6B,UAAU,CAAC,QAAQ,CAAC;AAC1D;AAEA,SAAS,0BACP,UACuB;AACvB,QAAM,YAAY;AAAA,IAChB,MAAM,KAAK,SAAS,WAAW;AAAA,IAC/B,CAAC,SAAS,WAAW;AAAA,EACvB;AAEA,SAAO,6BAA6B,UAAU,CAAC,SAAS,CAAC;AAC3D;AAEA,SAAS,6BACP,UACA,sBACuB;AACvB,QAAM,CAAC,YAAY,aAAa,IAAI,SAAgC,CAAC,CAAC;AAItE,YAAU,MAAM;AACd,UAAM,cAAc,SAAS,UAAU,aAAa;AACpD,WAAO;AAAA,EACT,GAAG,oBAAoB;AAEvB,SAAO;AACT;AAEA,IAAO,uBAAQ;","names":[]}