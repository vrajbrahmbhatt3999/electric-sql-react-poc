import { useEffect, useState, useMemo } from "react";
import { hash } from "ohash";
function useLiveQuery(runQueryOrFn, deps) {
  if (deps) {
    return useLiveQueryWithDependencies(
      runQueryOrFn,
      deps
    );
  } else {
    return useLiveQueryWithQueryHash(runQueryOrFn);
  }
}
function useLiveQueryWithDependencies(runQueryFn, dependencies) {
  const runQuery = useMemo(runQueryFn, dependencies);
  return useLiveQueryWithQueryUpdates(runQuery, [runQuery]);
}
function useLiveQueryWithQueryHash(runQuery) {
  const queryHash = useMemo(
    () => hash(runQuery.sourceQuery),
    [runQuery.sourceQuery]
  );
  return useLiveQueryWithQueryUpdates(runQuery, [queryHash]);
}
function useLiveQueryWithQueryUpdates(runQuery, runQueryDependencies) {
  const [resultData, setResultData] = useState({});
  useEffect(() => {
    const unsubscribe = runQuery.subscribe(setResultData);
    return unsubscribe;
  }, runQueryDependencies);
  return resultData;
}
var useLiveQuery_default = useLiveQuery;
export {
  useLiveQuery_default as default
};
//# sourceMappingURL=useLiveQuery.js.map