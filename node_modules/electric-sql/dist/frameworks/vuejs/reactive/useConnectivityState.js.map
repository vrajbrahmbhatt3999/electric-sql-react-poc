{"version":3,"sources":["../../../../src/frameworks/vuejs/reactive/useConnectivityState.ts"],"sourcesContent":["import { UnsubscribeFunction } from '../../../notifiers'\nimport { createConnectivityStateSubscribeFunction } from '../../../util'\nimport { ConnectivityState } from '../../../util/types'\nimport {\n  getElectricConnectivityState,\n  getValidConnectivityState,\n} from '../../shared'\nimport { injectElectricUntyped } from '../dependency-injection'\nimport { onUnmounted, ref, shallowRef, Ref, onBeforeMount } from 'vue'\n\n/**\n * Observes Electric's connectivity state\n */\nconst useConnectivityState = (): Ref<ConnectivityState> => {\n  const electric = injectElectricUntyped()\n  const state = ref<ConnectivityState>(getElectricConnectivityState(electric))\n\n  // keep track of subscriptions and unsubscribe from unused ones\n  const unsubscribe = shallowRef<UnsubscribeFunction>()\n\n  onBeforeMount(() => {\n    if (electric === undefined) return\n    state.value = getElectricConnectivityState(electric)\n    unsubscribe.value = createConnectivityStateSubscribeFunction(\n      electric.notifier\n    )((newState) => (state.value = getValidConnectivityState(newState)))\n  })\n\n  onUnmounted(() => unsubscribe.value?.())\n\n  return state\n}\n\nexport default useConnectivityState\n"],"mappings":"AACA,SAAS,gDAAgD;AAEzD;AAAA,EACE;AAAA,EACA;AAAA,OACK;AACP,SAAS,6BAA6B;AACtC,SAAS,aAAa,KAAK,YAAiB,qBAAqB;AAKjE,MAAM,uBAAuB,MAA8B;AACzD,QAAM,WAAW,sBAAsB;AACvC,QAAM,QAAQ,IAAuB,6BAA6B,QAAQ,CAAC;AAG3E,QAAM,cAAc,WAAgC;AAEpD,gBAAc,MAAM;AAClB,QAAI,aAAa;AAAW;AAC5B,UAAM,QAAQ,6BAA6B,QAAQ;AACnD,gBAAY,QAAQ;AAAA,MAClB,SAAS;AAAA,IACX,EAAE,CAAC,aAAc,MAAM,QAAQ,0BAA0B,QAAQ,CAAE;AAAA,EACrE,CAAC;AAED,cAAY,MAAM,YAAY,QAAQ,CAAC;AAEvC,SAAO;AACT;AAEA,IAAO,+BAAQ;","names":[]}