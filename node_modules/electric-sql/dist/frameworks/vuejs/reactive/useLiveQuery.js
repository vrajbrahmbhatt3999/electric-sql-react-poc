import {
  watch,
  computed,
  readonly,
  shallowReactive,
  onUnmounted,
  toRefs,
  isRef,
  shallowRef,
  unref
} from "vue";
import { hash } from "ohash";
function useLiveQuery(runQuery, runQueryDependencies) {
  if ("sourceQuery" in runQuery) {
    return useLiveQueryWithRef(shallowRef(runQuery), runQueryDependencies);
  }
  if (isRef(runQuery)) {
    return useLiveQueryWithRef(runQuery, runQueryDependencies);
  }
  return useLiveQueryWithRef(
    computed(runQuery),
    runQueryDependencies
  );
}
function useLiveQueryWithRef(runQueryRef, runQueryDependencies) {
  if (runQueryDependencies) {
    return useLiveQueryWithQueryUpdates(runQueryRef, runQueryDependencies);
  }
  const queryHash = computed(() => hash(unref(runQueryRef).sourceQuery));
  return useLiveQueryWithQueryUpdates(runQueryRef, [runQueryRef, queryHash]);
}
function useLiveQueryWithQueryUpdates(runQuery, runQueryDependencies) {
  const liveUpdate = shallowReactive({
    results: void 0,
    error: void 0,
    updatedAt: void 0
  });
  const unsubscribeRef = shallowRef();
  watch(
    runQueryDependencies,
    () => {
      unsubscribeRef.value?.();
      unsubscribeRef.value = unref(runQuery).subscribe((newResults) => {
        liveUpdate.results = newResults.results;
        liveUpdate.error = newResults.error;
        liveUpdate.updatedAt = newResults.updatedAt;
      });
    },
    { immediate: true }
  );
  onUnmounted(() => unsubscribeRef.value?.());
  return toRefs(readonly(liveUpdate));
}
var useLiveQuery_default = useLiveQuery;
export {
  useLiveQuery_default as default
};
//# sourceMappingURL=useLiveQuery.js.map