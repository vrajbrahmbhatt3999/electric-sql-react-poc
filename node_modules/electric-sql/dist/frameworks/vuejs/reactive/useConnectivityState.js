import { createConnectivityStateSubscribeFunction } from '../../../util/index.js';
import {
  getElectricConnectivityState,
  getValidConnectivityState
} from '../../shared/index.js';
import { injectElectricUntyped } from '../dependency-injection.js';
import { onUnmounted, ref, shallowRef, onBeforeMount } from "vue";
const useConnectivityState = () => {
  const electric = injectElectricUntyped();
  const state = ref(getElectricConnectivityState(electric));
  const unsubscribe = shallowRef();
  onBeforeMount(() => {
    if (electric === void 0)
      return;
    state.value = getElectricConnectivityState(electric);
    unsubscribe.value = createConnectivityStateSubscribeFunction(
      electric.notifier
    )((newState) => state.value = getValidConnectivityState(newState));
  });
  onUnmounted(() => unsubscribe.value?.());
  return state;
};
var useConnectivityState_default = useConnectivityState;
export {
  useConnectivityState_default as default
};
//# sourceMappingURL=useConnectivityState.js.map