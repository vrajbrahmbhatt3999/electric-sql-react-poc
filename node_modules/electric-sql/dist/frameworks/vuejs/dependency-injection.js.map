{"version":3,"sources":["../../../src/frameworks/vuejs/dependency-injection.ts"],"sourcesContent":["import { provide, inject, unref, ShallowRef } from 'vue'\n\nimport { ElectricClient } from '../../client/model/client'\nimport { DbSchema } from '../../client/model'\ninterface ElectricDependencyInjection<S extends ElectricClient<DbSchema<any>>> {\n  provideElectric: (\n    electric: ShallowRef<S | undefined> | (S | undefined)\n  ) => void\n  injectElectric: () => S | undefined\n}\n\nconst ElectricKey = Symbol('ElectricProvider')\n\n/**\n * Call this function to get an Electric provider and injector for your Vue application.\n * We can't provide a predefined provider and injector because that would lose type information\n * as the types depend on the type of the database `S` that's provided as a type argument.\n *\n * @example\n * This example loses information about the concrete DB tables:\n * ```\n * provide<ElectricClient>(ElectricKey, electric)\n *\n * // generic DB type, no type-safe client\n * const { db } = inject(ElectricKey)\n * ```\n *\n * @returns An object with two functions: `provideElectric` and `injectElectric`.\n *\n */\nexport function makeElectricDependencyInjector<\n  S extends ElectricClient<DbSchema<any>>\n>(): ElectricDependencyInjection<S> {\n  const provideElectric = (\n    electric: ShallowRef<S | undefined> | (S | undefined)\n  ): void => provide(ElectricKey, electric)\n\n  const injectElectric = (): S | undefined => {\n    const electric = inject<ShallowRef<S> | S>(ElectricKey)\n    return unref(electric)\n  }\n\n  return {\n    provideElectric,\n    injectElectric,\n  }\n}\n\n/**\n * This \"static\" injector is used internally by our reactive methods\n * to get access to the {@link ElectricClient}.\n * It loses information about the actual types of the DB tables,\n * but we don't need that information in our methods.\n * However, users preferably don't lose this type information,\n * therefore, they can use {@link makeElectricDependencyInjector}.\n */\nconst { injectElectric: injectElectricUntyped } =\n  makeElectricDependencyInjector()\n\nexport { injectElectricUntyped }\n"],"mappings":"AAAA,SAAS,SAAS,QAAQ,aAAyB;AAWnD,MAAM,cAAc,OAAO,kBAAkB;AAmBtC,SAAS,iCAEoB;AAClC,QAAM,kBAAkB,CACtB,aACS,QAAQ,aAAa,QAAQ;AAExC,QAAM,iBAAiB,MAAqB;AAC1C,UAAM,WAAW,OAA0B,WAAW;AACtD,WAAO,MAAM,QAAQ;AAAA,EACvB;AAEA,SAAO;AAAA,IACL;AAAA,IACA;AAAA,EACF;AACF;AAUA,MAAM,EAAE,gBAAgB,sBAAsB,IAC5C,+BAA+B;","names":[]}