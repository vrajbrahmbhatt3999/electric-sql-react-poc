{"version":3,"sources":["../../src/notifiers/event.ts"],"sourcesContent":["import { EventEmitter } from 'events'\n\nimport { AuthState } from '../auth/index'\nimport { QualifiedTablename } from '../util/tablename'\nimport { ConnectivityState, DbName } from '../util/types'\nimport Log from 'loglevel'\n\nimport {\n  AuthStateCallback,\n  AuthStateNotification,\n  Change,\n  ChangeCallback,\n  ChangeNotification,\n  ChangeOrigin,\n  ConnectivityStateChangeCallback,\n  ConnectivityStateChangeNotification,\n  Notification,\n  NotificationCallback,\n  Notifier,\n  PotentialChangeCallback,\n  PotentialChangeNotification,\n  ShapeSubscriptionSyncStatusChangeCallback,\n  ShapeSubscriptionSyncStatusChangeNotification,\n  UnsubscribeFunction,\n} from './index'\nimport { SyncStatus } from '../client/model/shapes'\n\nexport const EVENT_NAMES = {\n  authChange: 'auth:changed',\n  actualDataChange: 'data:actually:changed',\n  potentialDataChange: 'data:potentially:changed',\n  connectivityStateChange: 'network:connectivity:changed',\n  shapeSubscriptionStatusChange: 'shape:status:changed',\n}\n\n// Initialise global emitter to be shared between all\n// electric instances (unless emitter is passed in)\n// Remove warning as we don't want to limit the number\n// of subscribers\nconst globalEmitter = new EventEmitter().setMaxListeners(Infinity)\n\nexport class EventNotifier implements Notifier {\n  dbName: DbName\n\n  attachedDbIndex: {\n    byAlias: {\n      [key: string]: DbName\n    }\n    byName: {\n      [key: DbName]: string\n    }\n  }\n\n  events: EventEmitter\n\n  constructor(dbName: DbName, eventEmitter?: EventEmitter) {\n    this.dbName = dbName\n    this.attachedDbIndex = {\n      byAlias: {},\n      byName: {},\n    }\n\n    this.events = eventEmitter !== undefined ? eventEmitter : globalEmitter\n  }\n\n  attach(dbName: DbName, dbAlias: string): void {\n    const idx = this.attachedDbIndex\n\n    idx.byAlias[dbAlias] = dbName\n    idx.byName[dbName] = dbAlias\n  }\n\n  detach(dbAlias: string): void {\n    const idx = this.attachedDbIndex\n\n    if (dbAlias in idx.byAlias) {\n      const dbName = idx.byAlias[dbAlias]\n\n      delete idx.byAlias[dbAlias]\n      delete idx.byName[dbName]\n    }\n  }\n\n  alias({ dbName, changes }: ChangeNotification): QualifiedTablename[] {\n    const idx = this.attachedDbIndex\n    const primaryDbName = this.dbName\n\n    return changes\n      .map(({ qualifiedTablename }): QualifiedTablename | void => {\n        if (dbName === primaryDbName) {\n          return qualifiedTablename\n        }\n\n        const dbAlias = idx.byName[dbName]\n        if (dbAlias !== undefined) {\n          qualifiedTablename.namespace = dbAlias\n\n          return qualifiedTablename\n        }\n      })\n      .filter((value) => value !== undefined) as QualifiedTablename[]\n  }\n\n  authStateChanged(authState: AuthState): void {\n    this._emitAuthStateChange(authState)\n  }\n  subscribeToAuthStateChanges(\n    callback: AuthStateCallback\n  ): UnsubscribeFunction {\n    this._subscribe(EVENT_NAMES.authChange, callback)\n    return () => {\n      this._unsubscribe(EVENT_NAMES.authChange, callback)\n    }\n  }\n\n  potentiallyChanged(): void {\n    const dbNames = this._getDbNames()\n    const emitPotentialChange = this._emitPotentialChange.bind(this)\n\n    dbNames.forEach(emitPotentialChange)\n  }\n  actuallyChanged(\n    dbName: DbName,\n    changes: Change[],\n    origin: ChangeOrigin\n  ): void {\n    if (!this._hasDbName(dbName) || !changes.length) {\n      return\n    }\n\n    const tables = [\n      ...new Set(\n        changes.map((e) => {\n          return e.qualifiedTablename.tablename\n        })\n      ),\n    ]\n\n    Log.info(\n      `notifying client of database changes. Changed tables: [${tables}]. Origin: ${origin}`\n    )\n\n    this._emitActualChange(dbName, changes, origin)\n  }\n\n  subscribeToPotentialDataChanges(\n    callback: PotentialChangeCallback\n  ): UnsubscribeFunction {\n    const thisHasDbName = this._hasDbName.bind(this)\n\n    const wrappedCallback = (notification: PotentialChangeNotification) => {\n      if (thisHasDbName(notification.dbName)) {\n        callback(notification)\n      }\n    }\n\n    this._subscribe(EVENT_NAMES.potentialDataChange, wrappedCallback)\n\n    return () => {\n      this._unsubscribe(EVENT_NAMES.potentialDataChange, wrappedCallback)\n    }\n  }\n\n  subscribeToDataChanges(callback: ChangeCallback): UnsubscribeFunction {\n    const thisHasDbName = this._hasDbName.bind(this)\n\n    const wrappedCallback = (notification: ChangeNotification) => {\n      if (thisHasDbName(notification.dbName)) {\n        callback(notification)\n      }\n    }\n\n    this._subscribe(EVENT_NAMES.actualDataChange, wrappedCallback)\n\n    return () => {\n      this._unsubscribe(EVENT_NAMES.actualDataChange, wrappedCallback)\n    }\n  }\n\n  connectivityStateChanged(dbName: string, status: ConnectivityState) {\n    if (!this._hasDbName(dbName)) {\n      return\n    }\n\n    this._emitConnectivityStatus(dbName, status)\n  }\n\n  subscribeToConnectivityStateChanges(\n    callback: ConnectivityStateChangeCallback\n  ): UnsubscribeFunction {\n    const thisHasDbName = this._hasDbName.bind(this)\n\n    const wrappedCallback = (\n      notification: ConnectivityStateChangeNotification\n    ) => {\n      if (thisHasDbName(notification.dbName)) {\n        callback(notification)\n      }\n    }\n\n    this._subscribe(EVENT_NAMES.connectivityStateChange, wrappedCallback)\n\n    return () => {\n      this._unsubscribe(EVENT_NAMES.connectivityStateChange, wrappedCallback)\n    }\n  }\n\n  shapeSubscriptionSyncStatusChanged(\n    dbName: string,\n    key: string,\n    status: SyncStatus\n  ): void {\n    if (!this._hasDbName(dbName)) {\n      return\n    }\n\n    this._emitShapeSubscriptionSyncStatusChange(dbName, key, status)\n  }\n\n  subscribeToShapeSubscriptionSyncStatusChanges(\n    callback: ShapeSubscriptionSyncStatusChangeCallback\n  ): UnsubscribeFunction {\n    const thisHasDbName = this._hasDbName.bind(this)\n\n    const wrappedCallback = (\n      notification: ShapeSubscriptionSyncStatusChangeNotification\n    ) => {\n      if (thisHasDbName(notification.dbName)) {\n        callback(notification)\n      }\n    }\n\n    this._subscribe(EVENT_NAMES.shapeSubscriptionStatusChange, wrappedCallback)\n\n    return () => {\n      this._unsubscribe(\n        EVENT_NAMES.shapeSubscriptionStatusChange,\n        wrappedCallback\n      )\n    }\n  }\n\n  _getDbNames(): DbName[] {\n    const idx = this.attachedDbIndex\n\n    return [this.dbName, ...Object.keys(idx.byName)]\n  }\n  _hasDbName(dbName: DbName): boolean {\n    const idx = this.attachedDbIndex\n\n    return dbName === this.dbName || dbName in idx.byName\n  }\n\n  // Extracting out these methods allows them to be overridden\n  // without duplicating any dbName filter / check logic, etc.\n  _emitAuthStateChange(authState: AuthState): AuthStateNotification {\n    const notification = {\n      authState: authState,\n    }\n\n    this._emit(EVENT_NAMES.authChange, notification)\n\n    return notification\n  }\n  _emitPotentialChange(dbName: DbName): PotentialChangeNotification {\n    const notification = {\n      dbName: dbName,\n    }\n\n    this._emit(EVENT_NAMES.potentialDataChange, notification)\n\n    return notification\n  }\n  _emitActualChange(\n    dbName: DbName,\n    changes: Change[],\n    origin: ChangeOrigin\n  ): ChangeNotification {\n    const notification = {\n      dbName: dbName,\n      changes: changes,\n      origin: origin,\n    }\n\n    this._emit(EVENT_NAMES.actualDataChange, notification)\n\n    return notification\n  }\n  _emitConnectivityStatus(\n    dbName: DbName,\n    connectivityState: ConnectivityState\n  ): ConnectivityStateChangeNotification {\n    const notification = {\n      dbName: dbName,\n      connectivityState,\n    }\n\n    this._emit(EVENT_NAMES.connectivityStateChange, notification)\n\n    return notification\n  }\n\n  _emitShapeSubscriptionSyncStatusChange(\n    dbName: DbName,\n    key: string,\n    status: SyncStatus\n  ): ShapeSubscriptionSyncStatusChangeNotification {\n    const notification = { dbName, key, status }\n\n    this._emit(EVENT_NAMES.shapeSubscriptionStatusChange, notification)\n\n    return notification\n  }\n\n  _emit(eventName: string, notification: Notification) {\n    this.events.emit(eventName, notification)\n  }\n  _subscribe(eventName: string, callback: NotificationCallback): void {\n    this.events.addListener(eventName, callback)\n  }\n  _unsubscribe(eventName: string, callback: NotificationCallback): void {\n    this.events.removeListener(eventName, callback)\n  }\n}\n"],"mappings":"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","names":[]}