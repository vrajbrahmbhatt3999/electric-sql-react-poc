import { Transformation, transformFields } from '../conversions/input.js';
import {
  validate,
  validateRecordTransformation
} from '../validation/validation.js';
class ReplicationTransformManager {
  constructor(satellite, converter) {
    this.satellite = satellite;
    this.converter = converter;
  }
  setTableTransform(tableName, transform) {
    this.satellite.setReplicationTransform(tableName, transform);
  }
  clearTableTransform(tableName) {
    this.satellite.clearReplicationTransform(tableName);
  }
  transformTableRecord(record, transformRow, fields, schema, immutableFields) {
    return transformTableRecord(
      record,
      transformRow,
      fields,
      schema,
      this.converter,
      immutableFields
    );
  }
}
function transformTableRecord(record, transformRow, fields, schema, converter, immutableFields) {
  const parsedRow = transformFields(
    record,
    fields,
    converter,
    Transformation.Decode
  );
  const transformedParsedRow = transformRow(parsedRow);
  const validatedTransformedParsedRow = validate(transformedParsedRow, schema);
  const transformedRecord = transformFields(
    validatedTransformedParsedRow,
    fields,
    converter,
    Transformation.Encode
  );
  const validatedTransformedRecord = validateRecordTransformation(
    record,
    transformedRecord,
    immutableFields
  );
  return validatedTransformedRecord;
}
export {
  ReplicationTransformManager,
  transformTableRecord
};
//# sourceMappingURL=transforms.js.map