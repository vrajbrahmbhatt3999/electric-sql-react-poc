{"version":3,"sources":["../../../src/client/model/transforms.ts"],"sourcesContent":["import { Satellite } from '../../satellite'\nimport {\n  QualifiedTablename,\n  ReplicatedRowTransformer,\n  DbRecord as DataRecord,\n} from '../../util'\nimport { Converter } from '../conversions/converter'\nimport { Transformation, transformFields } from '../conversions/input'\nimport {\n  validate,\n  validateRecordTransformation,\n} from '../validation/validation'\nimport { Fields } from './schema'\nimport * as z from 'zod'\n\nexport interface IReplicationTransformManager {\n  setTableTransform(\n    tableName: QualifiedTablename,\n    transform: ReplicatedRowTransformer<DataRecord>\n  ): void\n  clearTableTransform(tableName: QualifiedTablename): void\n\n  transformTableRecord<T extends Record<string, unknown>>(\n    record: DataRecord,\n    transformRow: (row: T) => T,\n    fields: Fields,\n    schema: z.ZodTypeAny,\n    immutableFields: string[]\n  ): DataRecord\n}\n\nexport class ReplicationTransformManager\n  implements IReplicationTransformManager\n{\n  constructor(private satellite: Satellite, private converter: Converter) {}\n\n  setTableTransform(\n    tableName: QualifiedTablename,\n    transform: ReplicatedRowTransformer<DataRecord>\n  ): void {\n    this.satellite.setReplicationTransform(tableName, transform)\n  }\n\n  clearTableTransform(tableName: QualifiedTablename): void {\n    this.satellite.clearReplicationTransform(tableName)\n  }\n\n  transformTableRecord<T extends Record<string, unknown>>(\n    record: DataRecord,\n    transformRow: (row: T) => T,\n    fields: Fields,\n    schema: z.ZodTypeAny,\n    immutableFields: string[]\n  ): DataRecord {\n    return transformTableRecord(\n      record,\n      transformRow,\n      fields,\n      schema,\n      this.converter,\n      immutableFields\n    )\n  }\n}\n\n/**\n * Transform a raw record with the given typed row transformation {@link transformRow}\n * by applying appropriate parsing and validation, including forbidding\n * changes to specified {@link immutableFields}\n *\n * @param transformRow transformation of record of type {@link T}\n * @param fields fields to specify the transformation from raw record to record of type {@link T}\n * @param schema schema to parse/validate raw record to record of type {@link T}\n * @param immutableFields - fields that cannot be modified by {@link transformRow}\n * @return the transformed raw record\n */\nexport function transformTableRecord<T extends Record<string, unknown>>(\n  record: DataRecord,\n  transformRow: (row: T) => T,\n  fields: Fields,\n  schema: z.ZodTypeAny,\n  converter: Converter,\n  immutableFields: string[]\n): DataRecord {\n  // parse raw record according to specified fields\n  const parsedRow = transformFields(\n    record,\n    fields,\n    converter,\n    Transformation.Decode\n  ) as T\n\n  // apply specified transformation\n  const transformedParsedRow = transformRow(parsedRow as Readonly<T>)\n\n  // validate transformed row and convert back to raw record\n  const validatedTransformedParsedRow = validate(transformedParsedRow, schema)\n  const transformedRecord = transformFields(\n    validatedTransformedParsedRow,\n    fields,\n    converter,\n    Transformation.Encode\n  ) as DataRecord\n\n  // check if any of the immutable fields were modified\n  const validatedTransformedRecord = validateRecordTransformation(\n    record,\n    transformedRecord,\n    immutableFields\n  )\n\n  return validatedTransformedRecord\n}\n"],"mappings":"AAOA,SAAS,gBAAgB,uBAAuB;AAChD;AAAA,EACE;AAAA,EACA;AAAA,OACK;AAoBA,MAAM,4BAEb;AAAA,EACE,YAAoB,WAA8B,WAAsB;AAApD;AAA8B;AAAA,EAAuB;AAAA,EAEzE,kBACE,WACA,WACM;AACN,SAAK,UAAU,wBAAwB,WAAW,SAAS;AAAA,EAC7D;AAAA,EAEA,oBAAoB,WAAqC;AACvD,SAAK,UAAU,0BAA0B,SAAS;AAAA,EACpD;AAAA,EAEA,qBACE,QACA,cACA,QACA,QACA,iBACY;AACZ,WAAO;AAAA,MACL;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA,KAAK;AAAA,MACL;AAAA,IACF;AAAA,EACF;AACF;AAaO,SAAS,qBACd,QACA,cACA,QACA,QACA,WACA,iBACY;AAEZ,QAAM,YAAY;AAAA,IAChB;AAAA,IACA;AAAA,IACA;AAAA,IACA,eAAe;AAAA,EACjB;AAGA,QAAM,uBAAuB,aAAa,SAAwB;AAGlE,QAAM,gCAAgC,SAAS,sBAAsB,MAAM;AAC3E,QAAM,oBAAoB;AAAA,IACxB;AAAA,IACA;AAAA,IACA;AAAA,IACA,eAAe;AAAA,EACjB;AAGA,QAAM,6BAA6B;AAAA,IACjC;AAAA,IACA;AAAA,IACA;AAAA,EACF;AAEA,SAAO;AACT;","names":[]}