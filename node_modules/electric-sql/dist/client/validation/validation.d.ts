import * as z from 'zod';
import { DbRecord as DataRecord } from '../../util/index.js';
export declare function validate<I>(i: I, schema: z.ZodTypeAny): I;
export declare function parseNestedCreate(relationField: any): {
    create?: any;
};
export declare function parseNestedUpdate(relationField: any): {
    update?: any;
    updateMany?: any;
};
/**
 * Takes a schema for an object containing an optional `select` property
 * which has an optional `_count` property and removes the `_count` property.
 * @param s Schema for an object containing an optional `select` property.
 */
export declare function omitCountFromSelectAndIncludeSchema<T extends z.ZodTypeAny>(s: T): T;
/**
 * Validates that the given record transformation did not change any of the specified {@link immutableFields}.
 * @param originalRecord the source record
 * @param trnasformedRecord the transformed record
 * @param immutableFields the fields that should not have been modified
 * @returns the transformed record, validated such that no immutable fields are changed
 *
 * @throws {@link InvalidRecordTransformationError}
 * Thrown if record transformation changed any of the specified {@link immutableFields}
 */
export declare function validateRecordTransformation<T extends DataRecord>(originalRecord: Readonly<T>, transformedRecord: Readonly<T>, immutableFields: string[]): T;
