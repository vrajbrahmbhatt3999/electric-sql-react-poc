import { TransactionalDB } from './transactionalDB.js';
import { NonTransactionalDB } from './nonTransactionalDB.js';
class Executor {
  constructor(_adapter, _notifier, _fields, _converter) {
    this._adapter = _adapter;
    this._notifier = _notifier;
    this._fields = _fields;
    this._converter = _converter;
  }
  async runInTransaction(qs, notify = true) {
    const stmts = qs.map((q) => {
      return { sql: q.toString() };
    });
    const prom = this._adapter.runInTransaction(...stmts);
    prom.then((_res) => {
      if (notify) {
        this._notifier.potentiallyChanged();
      }
    });
    return prom;
  }
  // Executes the given function within a transaction
  // and calls `potentiallyChanged` on the notifier if the `notify` argument is true.
  async transaction(f, notify = true) {
    return await this._adapter.transaction(
      (tx, setResult) => f(
        new TransactionalDB(tx, this._fields, this._converter),
        (res) => {
          if (notify) {
            this._notifier.potentiallyChanged();
          }
          setResult(res);
        },
        () => {
        }
      )
    );
  }
  // Executes the given function without starting a new transaction
  // and calls `potentiallyChanged` on the notifier if the `notify` argument is true.
  async execute(f, notify = true) {
    return new Promise((resolve, reject) => {
      f(
        new NonTransactionalDB(this._adapter, this._fields, this._converter),
        (res) => {
          if (notify) {
            this._notifier.potentiallyChanged();
          }
          resolve(res);
        },
        reject
      );
    });
  }
}
export {
  Executor
};
//# sourceMappingURL=executor.js.map