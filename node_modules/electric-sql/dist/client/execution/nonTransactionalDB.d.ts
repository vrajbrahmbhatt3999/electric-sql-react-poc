import { DatabaseAdapter, RunResult } from '../../electric/adapter.js';
import { QueryBuilder } from 'squel';
import { DB } from './db.js';
import * as z from 'zod';
import { Row, Statement } from '../../util/index.js';
import { Fields } from '../model/schema.js';
import { Converter } from '../conversions/converter.js';
export declare class NonTransactionalDB implements DB {
    private _adapter;
    private _fields;
    private _converter;
    constructor(_adapter: DatabaseAdapter, _fields: Fields, _converter: Converter);
    withTableSchema(fields: Fields): NonTransactionalDB;
    run(statement: QueryBuilder, successCallback?: (db: DB, res: RunResult) => void, errorCallback?: (error: any) => void): void;
    query<Z>(statement: QueryBuilder, schema: z.ZodType<Z>, successCallback: (db: DB, res: Z[]) => void, errorCallback?: (error: any) => void): void;
    raw(sql: Statement, successCallback?: (tx: DB, res: Row[]) => void, errorCallback?: (error: any) => void): void;
}
