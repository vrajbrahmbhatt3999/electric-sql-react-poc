import { DatabaseAdapter, RunResult } from '../../electric/adapter.js';
import { QueryBuilder } from 'squel';
import { DB } from './db.js';
import { Notifier } from '../../notifiers/index.js';
import { Fields } from '../model/schema.js';
import { Converter } from '../conversions/converter.js';
export declare class Executor {
    private _adapter;
    private _notifier;
    private _fields;
    private _converter;
    constructor(_adapter: DatabaseAdapter, _notifier: Notifier, _fields: Fields, _converter: Converter);
    runInTransaction(qs: QueryBuilder[], notify?: boolean): Promise<RunResult>;
    transaction<A>(f: (db: DB, setResult: (res: A) => void, onError: (err: any) => void) => void, notify?: boolean): Promise<A>;
    execute<A>(f: (db: DB, setResult: (res: A) => void, onError: (err: any) => void) => void, notify?: boolean): Promise<A>;
}
