{"version":3,"sources":["../../../src/client/execution/nonTransactionalDB.ts"],"sourcesContent":["import { DatabaseAdapter, RunResult } from '../../electric/adapter'\nimport { QueryBuilder } from 'squel'\nimport { DB } from './db'\nimport * as z from 'zod'\nimport { Row, Statement } from '../../util'\nimport { Transformation, transformFields } from '../conversions/input'\nimport { Fields } from '../model/schema'\nimport { Converter } from '../conversions/converter'\n\nexport class NonTransactionalDB implements DB {\n  constructor(\n    private _adapter: DatabaseAdapter,\n    private _fields: Fields,\n    private _converter: Converter\n  ) {}\n\n  withTableSchema(fields: Fields) {\n    return new NonTransactionalDB(this._adapter, fields, this._converter)\n  }\n\n  run(\n    statement: QueryBuilder,\n    successCallback?: (db: DB, res: RunResult) => void,\n    errorCallback?: (error: any) => void\n  ) {\n    const { text, values } = statement.toParam()\n    this._adapter\n      .run({ sql: text, args: values })\n      .then((res) => {\n        if (typeof successCallback !== 'undefined') {\n          try {\n            successCallback(this, res)\n          } catch (err) {\n            if (typeof errorCallback !== 'undefined') {\n              errorCallback(err)\n            }\n          }\n        }\n      })\n      .catch((err) => {\n        if (typeof errorCallback !== 'undefined') {\n          errorCallback(err)\n        }\n      })\n  }\n\n  query<Z>(\n    statement: QueryBuilder,\n    schema: z.ZodType<Z>,\n    successCallback: (db: DB, res: Z[]) => void,\n    errorCallback?: (error: any) => void\n  ) {\n    const { text, values } = statement.toParam() //{ numberedParameters: false })\n    this._adapter\n      .query({ sql: text, args: values })\n      .then((rows) => {\n        try {\n          const objects = rows.map((row) => {\n            // convert SQLite/PG values back to JS values\n            // and then parse the transformed object\n            // with the Zod schema to validate it\n            const transformedRow = transformFields(\n              row,\n              this._fields,\n              this._converter,\n              Transformation.Decode\n            )\n            return schema.parse(transformedRow)\n          })\n          successCallback(this, objects)\n        } catch (err) {\n          if (typeof errorCallback !== 'undefined') {\n            errorCallback(err)\n          }\n        }\n      })\n      .catch((err) => {\n        if (typeof errorCallback !== 'undefined') {\n          errorCallback(err)\n        }\n      })\n  }\n\n  raw(\n    sql: Statement,\n    successCallback?: (tx: DB, res: Row[]) => void,\n    errorCallback?: (error: any) => void\n  ) {\n    this._adapter\n      .query(sql)\n      .then((rows) => {\n        if (typeof successCallback !== 'undefined') {\n          successCallback(this, rows)\n        }\n      })\n      .catch((err) => {\n        if (typeof errorCallback !== 'undefined') {\n          errorCallback(err)\n        }\n      })\n  }\n}\n"],"mappings":"AAKA,SAAS,gBAAgB,uBAAuB;AAIzC,MAAM,mBAAiC;AAAA,EAC5C,YACU,UACA,SACA,YACR;AAHQ;AACA;AACA;AAAA,EACP;AAAA,EAEH,gBAAgB,QAAgB;AAC9B,WAAO,IAAI,mBAAmB,KAAK,UAAU,QAAQ,KAAK,UAAU;AAAA,EACtE;AAAA,EAEA,IACE,WACA,iBACA,eACA;AACA,UAAM,EAAE,MAAM,OAAO,IAAI,UAAU,QAAQ;AAC3C,SAAK,SACF,IAAI,EAAE,KAAK,MAAM,MAAM,OAAO,CAAC,EAC/B,KAAK,CAAC,QAAQ;AACb,UAAI,OAAO,oBAAoB,aAAa;AAC1C,YAAI;AACF,0BAAgB,MAAM,GAAG;AAAA,QAC3B,SAAS,KAAK;AACZ,cAAI,OAAO,kBAAkB,aAAa;AACxC,0BAAc,GAAG;AAAA,UACnB;AAAA,QACF;AAAA,MACF;AAAA,IACF,CAAC,EACA,MAAM,CAAC,QAAQ;AACd,UAAI,OAAO,kBAAkB,aAAa;AACxC,sBAAc,GAAG;AAAA,MACnB;AAAA,IACF,CAAC;AAAA,EACL;AAAA,EAEA,MACE,WACA,QACA,iBACA,eACA;AACA,UAAM,EAAE,MAAM,OAAO,IAAI,UAAU,QAAQ;AAC3C,SAAK,SACF,MAAM,EAAE,KAAK,MAAM,MAAM,OAAO,CAAC,EACjC,KAAK,CAAC,SAAS;AACd,UAAI;AACF,cAAM,UAAU,KAAK,IAAI,CAAC,QAAQ;AAIhC,gBAAM,iBAAiB;AAAA,YACrB;AAAA,YACA,KAAK;AAAA,YACL,KAAK;AAAA,YACL,eAAe;AAAA,UACjB;AACA,iBAAO,OAAO,MAAM,cAAc;AAAA,QACpC,CAAC;AACD,wBAAgB,MAAM,OAAO;AAAA,MAC/B,SAAS,KAAK;AACZ,YAAI,OAAO,kBAAkB,aAAa;AACxC,wBAAc,GAAG;AAAA,QACnB;AAAA,MACF;AAAA,IACF,CAAC,EACA,MAAM,CAAC,QAAQ;AACd,UAAI,OAAO,kBAAkB,aAAa;AACxC,sBAAc,GAAG;AAAA,MACnB;AAAA,IACF,CAAC;AAAA,EACL;AAAA,EAEA,IACE,KACA,iBACA,eACA;AACA,SAAK,SACF,MAAM,GAAG,EACT,KAAK,CAAC,SAAS;AACd,UAAI,OAAO,oBAAoB,aAAa;AAC1C,wBAAgB,MAAM,IAAI;AAAA,MAC5B;AAAA,IACF,CAAC,EACA,MAAM,CAAC,QAAQ;AACd,UAAI,OAAO,kBAAkB,aAAa;AACxC,sBAAc,GAAG;AAAA,MACnB;AAAA,IACF,CAAC;AAAA,EACL;AACF;","names":[]}