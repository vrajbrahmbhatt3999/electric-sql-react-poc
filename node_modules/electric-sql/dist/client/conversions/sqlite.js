import { InvalidArgumentError } from '../validation/errors/invalidArgumentError.js';
import { deserialiseBoolean, serialiseBoolean } from './datatypes/boolean.js';
import { deserialiseBlob, serialiseBlob } from './datatypes/blob.js';
import { deserialiseDate, serialiseDate } from './datatypes/date.js';
import { deserialiseJSON, serialiseJSON } from './datatypes/json.js';
import { PgBasicType, isPgDateType } from './types.js';
function toSqlite(v, pgType) {
  if (v === null) {
    return v;
  } else if (isPgDateType(pgType)) {
    if (!(v instanceof Date))
      throw new InvalidArgumentError(
        `Unexpected value ${v}. Expected a Date object.`
      );
    return serialiseDate(v, pgType);
  } else if (pgType === PgBasicType.PG_BOOL) {
    return serialiseBoolean(v);
  } else if (Number.isNaN(v)) {
    return "NaN";
  } else if (pgType === PgBasicType.PG_FLOAT4 || pgType === PgBasicType.PG_REAL) {
    return Math.fround(v);
  } else if (pgType === PgBasicType.PG_JSON || pgType === PgBasicType.PG_JSONB) {
    return serialiseJSON(v);
  } else if (pgType === PgBasicType.PG_BYTEA) {
    return serialiseBlob(v);
  } else {
    return v;
  }
}
function fromSqlite(v, pgType) {
  if (v === null) {
    return v;
  } else if (isPgDateType(pgType)) {
    return deserialiseDate(v, pgType);
  } else if (pgType === PgBasicType.PG_BOOL) {
    return deserialiseBoolean(v);
  } else if (v === "NaN" && (pgType === PgBasicType.PG_FLOAT8 || pgType === PgBasicType.PG_FLOAT4 || pgType === PgBasicType.PG_REAL)) {
    return NaN;
  } else if (pgType === PgBasicType.PG_FLOAT4 || pgType === PgBasicType.PG_REAL) {
    return Math.fround(v);
  } else if (pgType === PgBasicType.PG_INT8) {
    return BigInt(v);
  } else if (pgType === PgBasicType.PG_JSON || pgType === PgBasicType.PG_JSONB) {
    return deserialiseJSON(v);
  } else if (pgType === PgBasicType.PG_BYTEA) {
    return deserialiseBlob(v);
  } else {
    return v;
  }
}
const sqliteConverter = {
  encode: toSqlite,
  decode: fromSqlite
};
export {
  sqliteConverter
};
//# sourceMappingURL=sqlite.js.map