import { InvalidArgumentError } from '../validation/errors/invalidArgumentError.js';
import { deserialiseDate, serialiseDate } from './datatypes/date.js';
import { isJsonNull } from './datatypes/json.js';
import { PgBasicType, PgDateType } from './types.js';
function toPostgres(v, pgType) {
  if (v === null) {
    return v;
  }
  switch (pgType) {
    case PgDateType.PG_TIMESTAMP:
    case PgDateType.PG_TIMESTAMPTZ:
    case PgDateType.PG_DATE:
    case PgDateType.PG_TIME:
    case PgDateType.PG_TIMETZ:
      if (!(v instanceof Date))
        throw new InvalidArgumentError(
          `Unexpected value ${v}. Expected a Date object.`
        );
      return serialiseDate(v, pgType);
    case PgBasicType.PG_JSON:
    case PgBasicType.PG_JSONB:
      if (isJsonNull(v)) {
        return null;
      }
      return JSON.stringify(v);
    case PgBasicType.PG_FLOAT4:
    case PgBasicType.PG_REAL:
      return Math.fround(v);
    default:
      return v;
  }
}
function fromPostgres(v, pgType) {
  if (v === null) {
    return v;
  }
  switch (pgType) {
    case PgBasicType.PG_INT8:
      return BigInt(v);
    case PgBasicType.PG_FLOAT4:
    case PgBasicType.PG_REAL:
      return Math.fround(v);
    case PgDateType.PG_TIME:
    case PgDateType.PG_TIMETZ:
      return deserialiseDate(v, pgType);
    default:
      return v;
  }
}
const postgresConverter = {
  encode: toPostgres,
  decode: fromPostgres
};
export {
  postgresConverter
};
//# sourceMappingURL=postgres.js.map