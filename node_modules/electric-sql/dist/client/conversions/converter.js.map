{"version":3,"sources":["../../../src/client/conversions/converter.ts"],"sourcesContent":["import { PgType } from './types'\n\nexport interface Converter {\n  /**\n   * Encodes the provided value for storing in the database.\n   * @param v The value to encode.\n   * @param pgType The Postgres type of the column in which to store the value.\n   */\n  encode(v: any, pgType: PgType): any\n  /**\n   * Decodes the provided value from the database.\n   * @param v The value to decode.\n   * @param pgType The Postgres type of the column from which to decode the value.\n   */\n  decode(v: any, pgType: PgType): any\n}\n\n/**\n * Checks whether the provided value is a data object (e.g. a timestamp) and not a filter.\n * This is important because `input.ts` needs to distinguish between data objects and filter objects.\n * Data objects need to be converted to a SQLite storeable value, whereas filter objects need to be treated specially\n * as we have to transform the values of the filter's fields (cf. `transformFieldsAllowingFilters` in `input.ts`).\n * @param v The value to check\n * @returns True if it is a data object, false otherwise.\n */\nexport function isDataObject(v: unknown): boolean {\n  return v instanceof Date || typeof v === 'bigint' || ArrayBuffer.isView(v)\n}\n"],"mappings":"AAyBO,SAAS,aAAa,GAAqB;AAChD,SAAO,aAAa,QAAQ,OAAO,MAAM,YAAY,YAAY,OAAO,CAAC;AAC3E;","names":[]}