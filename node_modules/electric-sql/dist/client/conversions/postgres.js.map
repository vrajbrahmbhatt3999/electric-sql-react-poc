{"version":3,"sources":["../../../src/client/conversions/postgres.ts"],"sourcesContent":["import { InvalidArgumentError } from '../validation/errors/invalidArgumentError'\nimport { Converter } from './converter'\nimport { deserialiseDate, serialiseDate } from './datatypes/date'\nimport { isJsonNull } from './datatypes/json'\nimport { PgBasicType, PgDateType, PgType } from './types'\n\n/**\n * This module takes care of converting TypeScript values to a Postgres storeable value and back.\n * These conversions are needed when the developer uses the DAL such that we can convert those JS values to Postgres values\n * and such that values that are read from the Postgres DB can be converted into JS values.\n * Currently, no conversions are needed for the data types we support.\n */\n\nfunction toPostgres(v: any, pgType: PgType): any {\n  if (v === null) {\n    // don't transform null values\n    return v\n  }\n\n  switch (pgType) {\n    case PgDateType.PG_TIMESTAMP:\n    case PgDateType.PG_TIMESTAMPTZ:\n    case PgDateType.PG_DATE:\n    case PgDateType.PG_TIME:\n    case PgDateType.PG_TIMETZ:\n      if (!(v instanceof Date))\n        throw new InvalidArgumentError(\n          `Unexpected value ${v}. Expected a Date object.`\n        )\n      return serialiseDate(v, pgType)\n\n    case PgBasicType.PG_JSON:\n    case PgBasicType.PG_JSONB:\n      // FIXME: the specialised conversion for null below is needed\n      //        because of the pg package we use to connect to the PG database\n      //        if we support other PG drivers then this may not be needed\n      //        Ideally, we would do this conversion in the driver itself\n      if (isJsonNull(v)) {\n        // Also turn into a DB null\n        // because we currently don't support top-level JSON null value\n        // when using Postgres\n        return null // 'null'\n      }\n      return JSON.stringify(v)\n\n    case PgBasicType.PG_FLOAT4:\n    case PgBasicType.PG_REAL:\n      return Math.fround(v)\n\n    default:\n      return v\n  }\n}\n\nfunction fromPostgres(v: any, pgType: PgType): any {\n  if (v === null) {\n    // don't transform null values\n    return v\n  }\n\n  switch (pgType) {\n    case PgBasicType.PG_INT8:\n      return BigInt(v) // needed because the node-pg driver returns bigints as strings\n\n    case PgBasicType.PG_FLOAT4:\n    case PgBasicType.PG_REAL:\n      // fround the number to represent it as a 32-bit float\n      return Math.fround(v)\n\n    case PgDateType.PG_TIME:\n    case PgDateType.PG_TIMETZ:\n      // dates and timestamps are parsed into JS Date objects\n      // by the underlying PG driver we use\n      // But time and timetz values are returned as strings\n      // so we parse them into a JS Date object ourselves\n      return deserialiseDate(v, pgType)\n\n    // Note: i left the specialised conversions below in comment\n    //       as they will be needed when we add support for top-level JSON null values\n    /*\n    case PgBasicType.PG_JSON:\n    case PgBasicType.PG_JSONB:\n      if (v === 'null') {\n        // JSON null value\n        return { __is_electric_json_null__: true }\n      }\n      if (typeof v === 'object') {\n        return v\n      }\n      return JSON.parse(v)\n    */\n\n    default:\n      return v\n  }\n}\n\nexport const postgresConverter: Converter = {\n  encode: toPostgres,\n  decode: fromPostgres,\n}\n"],"mappings":"AAAA,SAAS,4BAA4B;AAErC,SAAS,iBAAiB,qBAAqB;AAC/C,SAAS,kBAAkB;AAC3B,SAAS,aAAa,kBAA0B;AAShD,SAAS,WAAW,GAAQ,QAAqB;AAC/C,MAAI,MAAM,MAAM;AAEd,WAAO;AAAA,EACT;AAEA,UAAQ,QAAQ;AAAA,IACd,KAAK,WAAW;AAAA,IAChB,KAAK,WAAW;AAAA,IAChB,KAAK,WAAW;AAAA,IAChB,KAAK,WAAW;AAAA,IAChB,KAAK,WAAW;AACd,UAAI,EAAE,aAAa;AACjB,cAAM,IAAI;AAAA,UACR,oBAAoB,CAAC;AAAA,QACvB;AACF,aAAO,cAAc,GAAG,MAAM;AAAA,IAEhC,KAAK,YAAY;AAAA,IACjB,KAAK,YAAY;AAKf,UAAI,WAAW,CAAC,GAAG;AAIjB,eAAO;AAAA,MACT;AACA,aAAO,KAAK,UAAU,CAAC;AAAA,IAEzB,KAAK,YAAY;AAAA,IACjB,KAAK,YAAY;AACf,aAAO,KAAK,OAAO,CAAC;AAAA,IAEtB;AACE,aAAO;AAAA,EACX;AACF;AAEA,SAAS,aAAa,GAAQ,QAAqB;AACjD,MAAI,MAAM,MAAM;AAEd,WAAO;AAAA,EACT;AAEA,UAAQ,QAAQ;AAAA,IACd,KAAK,YAAY;AACf,aAAO,OAAO,CAAC;AAAA,IAEjB,KAAK,YAAY;AAAA,IACjB,KAAK,YAAY;AAEf,aAAO,KAAK,OAAO,CAAC;AAAA,IAEtB,KAAK,WAAW;AAAA,IAChB,KAAK,WAAW;AAKd,aAAO,gBAAgB,GAAG,MAAM;AAAA,IAiBlC;AACE,aAAO;AAAA,EACX;AACF;AAEO,MAAM,oBAA+B;AAAA,EAC1C,QAAQ;AAAA,EACR,QAAQ;AACV;","names":[]}