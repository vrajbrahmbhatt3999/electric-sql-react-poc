export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
} & (T extends SelectAndInclude ? 'Please either choose `select` or `include`.' : object);
type SelectAndInclude = {
    select: any;
    include: any;
};
/**
 * Removes fields that are in `Drop` from `T` and from
 * all objects that are recursively reachable from `T`.
 */
export type Removed<T, Drop> = T extends object ? {
    [K in keyof T]: K extends Drop ? never : Removed<T[K], Drop>;
} : T;
/**
 * Removes fields from `T` that are in `DropKey` and whose type is in `DropType`.
 * It does this for all objects that are recursively reachable from `T`.
 */
export type RemovedType<T, DropKey, DropType> = T extends object ? {
    [K in keyof T]: K extends DropKey ? T[K] extends DropType ? never : RemovedType<T[K], DropKey, DropType> : RemovedType<T[K], DropKey, DropType>;
} : T;
export {};
