import Long from "long";
import _m0 from "protobufjs/minimal.js";
import { messageTypeRegistry } from "../typeRegistry.js";
const protobufPackage = "Electric.Satellite";
var SatAuthHeader = /* @__PURE__ */ ((SatAuthHeader2) => {
  SatAuthHeader2[SatAuthHeader2["UNSPECIFIED"] = 0] = "UNSPECIFIED";
  SatAuthHeader2[SatAuthHeader2["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
  return SatAuthHeader2;
})(SatAuthHeader || {});
var SatErrorResp_ErrorCode = /* @__PURE__ */ ((SatErrorResp_ErrorCode2) => {
  SatErrorResp_ErrorCode2[SatErrorResp_ErrorCode2["INTERNAL"] = 0] = "INTERNAL";
  SatErrorResp_ErrorCode2[SatErrorResp_ErrorCode2["AUTH_REQUIRED"] = 1] = "AUTH_REQUIRED";
  SatErrorResp_ErrorCode2[SatErrorResp_ErrorCode2["AUTH_FAILED"] = 2] = "AUTH_FAILED";
  SatErrorResp_ErrorCode2[SatErrorResp_ErrorCode2["REPLICATION_FAILED"] = 3] = "REPLICATION_FAILED";
  SatErrorResp_ErrorCode2[SatErrorResp_ErrorCode2["INVALID_REQUEST"] = 4] = "INVALID_REQUEST";
  SatErrorResp_ErrorCode2[SatErrorResp_ErrorCode2["PROTO_VSN_MISMATCH"] = 5] = "PROTO_VSN_MISMATCH";
  SatErrorResp_ErrorCode2[SatErrorResp_ErrorCode2["SCHEMA_VSN_MISMATCH"] = 6] = "SCHEMA_VSN_MISMATCH";
  SatErrorResp_ErrorCode2[SatErrorResp_ErrorCode2["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
  return SatErrorResp_ErrorCode2;
})(SatErrorResp_ErrorCode || {});
var SatInStartReplicationReq_Option = /* @__PURE__ */ ((SatInStartReplicationReq_Option2) => {
  SatInStartReplicationReq_Option2[SatInStartReplicationReq_Option2["NONE"] = 0] = "NONE";
  SatInStartReplicationReq_Option2[SatInStartReplicationReq_Option2["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
  return SatInStartReplicationReq_Option2;
})(SatInStartReplicationReq_Option || {});
var SatInStartReplicationReq_Dialect = /* @__PURE__ */ ((SatInStartReplicationReq_Dialect2) => {
  SatInStartReplicationReq_Dialect2[SatInStartReplicationReq_Dialect2["SQLITE"] = 0] = "SQLITE";
  SatInStartReplicationReq_Dialect2[SatInStartReplicationReq_Dialect2["POSTGRES"] = 1] = "POSTGRES";
  SatInStartReplicationReq_Dialect2[SatInStartReplicationReq_Dialect2["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
  return SatInStartReplicationReq_Dialect2;
})(SatInStartReplicationReq_Dialect || {});
var SatInStartReplicationResp_ReplicationError_Code = /* @__PURE__ */ ((SatInStartReplicationResp_ReplicationError_Code2) => {
  SatInStartReplicationResp_ReplicationError_Code2[SatInStartReplicationResp_ReplicationError_Code2["CODE_UNSPECIFIED"] = 0] = "CODE_UNSPECIFIED";
  SatInStartReplicationResp_ReplicationError_Code2[SatInStartReplicationResp_ReplicationError_Code2["BEHIND_WINDOW"] = 1] = "BEHIND_WINDOW";
  SatInStartReplicationResp_ReplicationError_Code2[SatInStartReplicationResp_ReplicationError_Code2["INVALID_POSITION"] = 2] = "INVALID_POSITION";
  SatInStartReplicationResp_ReplicationError_Code2[SatInStartReplicationResp_ReplicationError_Code2["SUBSCRIPTION_NOT_FOUND"] = 3] = "SUBSCRIPTION_NOT_FOUND";
  SatInStartReplicationResp_ReplicationError_Code2[SatInStartReplicationResp_ReplicationError_Code2["MALFORMED_LSN"] = 4] = "MALFORMED_LSN";
  SatInStartReplicationResp_ReplicationError_Code2[SatInStartReplicationResp_ReplicationError_Code2["UNKNOWN_SCHEMA_VSN"] = 5] = "UNKNOWN_SCHEMA_VSN";
  SatInStartReplicationResp_ReplicationError_Code2[SatInStartReplicationResp_ReplicationError_Code2["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
  return SatInStartReplicationResp_ReplicationError_Code2;
})(SatInStartReplicationResp_ReplicationError_Code || {});
var SatRelation_RelationType = /* @__PURE__ */ ((SatRelation_RelationType2) => {
  SatRelation_RelationType2[SatRelation_RelationType2["TABLE"] = 0] = "TABLE";
  SatRelation_RelationType2[SatRelation_RelationType2["INDEX"] = 1] = "INDEX";
  SatRelation_RelationType2[SatRelation_RelationType2["VIEW"] = 2] = "VIEW";
  SatRelation_RelationType2[SatRelation_RelationType2["TRIGGER"] = 3] = "TRIGGER";
  SatRelation_RelationType2[SatRelation_RelationType2["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
  return SatRelation_RelationType2;
})(SatRelation_RelationType || {});
var SatOpMigrate_Type = /* @__PURE__ */ ((SatOpMigrate_Type2) => {
  SatOpMigrate_Type2[SatOpMigrate_Type2["CREATE_TABLE"] = 0] = "CREATE_TABLE";
  SatOpMigrate_Type2[SatOpMigrate_Type2["CREATE_INDEX"] = 1] = "CREATE_INDEX";
  SatOpMigrate_Type2[SatOpMigrate_Type2["CREATE_ENUM_TYPE"] = 2] = "CREATE_ENUM_TYPE";
  SatOpMigrate_Type2[SatOpMigrate_Type2["ALTER_ADD_COLUMN"] = 6] = "ALTER_ADD_COLUMN";
  SatOpMigrate_Type2[SatOpMigrate_Type2["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
  return SatOpMigrate_Type2;
})(SatOpMigrate_Type || {});
var SatSubsResp_SatSubsError_Code = /* @__PURE__ */ ((SatSubsResp_SatSubsError_Code2) => {
  SatSubsResp_SatSubsError_Code2[SatSubsResp_SatSubsError_Code2["CODE_UNSPECIFIED"] = 0] = "CODE_UNSPECIFIED";
  SatSubsResp_SatSubsError_Code2[SatSubsResp_SatSubsError_Code2["SUBSCRIPTION_ID_ALREADY_EXISTS"] = 1] = "SUBSCRIPTION_ID_ALREADY_EXISTS";
  SatSubsResp_SatSubsError_Code2[SatSubsResp_SatSubsError_Code2["SHAPE_REQUEST_ERROR"] = 2] = "SHAPE_REQUEST_ERROR";
  SatSubsResp_SatSubsError_Code2[SatSubsResp_SatSubsError_Code2["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
  return SatSubsResp_SatSubsError_Code2;
})(SatSubsResp_SatSubsError_Code || {});
var SatSubsResp_SatSubsError_ShapeReqError_Code = /* @__PURE__ */ ((SatSubsResp_SatSubsError_ShapeReqError_Code2) => {
  SatSubsResp_SatSubsError_ShapeReqError_Code2[SatSubsResp_SatSubsError_ShapeReqError_Code2["CODE_UNSPECIFIED"] = 0] = "CODE_UNSPECIFIED";
  SatSubsResp_SatSubsError_ShapeReqError_Code2[SatSubsResp_SatSubsError_ShapeReqError_Code2["TABLE_NOT_FOUND"] = 1] = "TABLE_NOT_FOUND";
  SatSubsResp_SatSubsError_ShapeReqError_Code2[SatSubsResp_SatSubsError_ShapeReqError_Code2["REFERENTIAL_INTEGRITY_VIOLATION"] = 2] = "REFERENTIAL_INTEGRITY_VIOLATION";
  SatSubsResp_SatSubsError_ShapeReqError_Code2[SatSubsResp_SatSubsError_ShapeReqError_Code2["EMPTY_SHAPE_DEFINITION"] = 3] = "EMPTY_SHAPE_DEFINITION";
  SatSubsResp_SatSubsError_ShapeReqError_Code2[SatSubsResp_SatSubsError_ShapeReqError_Code2["DUPLICATE_TABLE_IN_SHAPE_DEFINITION"] = 4] = "DUPLICATE_TABLE_IN_SHAPE_DEFINITION";
  SatSubsResp_SatSubsError_ShapeReqError_Code2[SatSubsResp_SatSubsError_ShapeReqError_Code2["INVALID_WHERE_CLAUSE"] = 5] = "INVALID_WHERE_CLAUSE";
  SatSubsResp_SatSubsError_ShapeReqError_Code2[SatSubsResp_SatSubsError_ShapeReqError_Code2["INVALID_INCLUDE_TREE"] = 6] = "INVALID_INCLUDE_TREE";
  SatSubsResp_SatSubsError_ShapeReqError_Code2[SatSubsResp_SatSubsError_ShapeReqError_Code2["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
  return SatSubsResp_SatSubsError_ShapeReqError_Code2;
})(SatSubsResp_SatSubsError_ShapeReqError_Code || {});
var SatSubsDataError_Code = /* @__PURE__ */ ((SatSubsDataError_Code2) => {
  SatSubsDataError_Code2[SatSubsDataError_Code2["CODE_UNSPECIFIED"] = 0] = "CODE_UNSPECIFIED";
  SatSubsDataError_Code2[SatSubsDataError_Code2["SHAPE_DELIVERY_ERROR"] = 1] = "SHAPE_DELIVERY_ERROR";
  SatSubsDataError_Code2[SatSubsDataError_Code2["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
  return SatSubsDataError_Code2;
})(SatSubsDataError_Code || {});
var SatSubsDataError_ShapeReqError_Code = /* @__PURE__ */ ((SatSubsDataError_ShapeReqError_Code2) => {
  SatSubsDataError_ShapeReqError_Code2[SatSubsDataError_ShapeReqError_Code2["CODE_UNSPECIFIED"] = 0] = "CODE_UNSPECIFIED";
  SatSubsDataError_ShapeReqError_Code2[SatSubsDataError_ShapeReqError_Code2["SHAPE_SIZE_LIMIT_EXCEEDED"] = 1] = "SHAPE_SIZE_LIMIT_EXCEEDED";
  SatSubsDataError_ShapeReqError_Code2[SatSubsDataError_ShapeReqError_Code2["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
  return SatSubsDataError_ShapeReqError_Code2;
})(SatSubsDataError_ShapeReqError_Code || {});
function createBaseSatRpcRequest() {
  return { $type: "Electric.Satellite.SatRpcRequest", method: "", requestId: 0, message: new Uint8Array(0) };
}
const SatRpcRequest = {
  $type: "Electric.Satellite.SatRpcRequest",
  encode(message, writer = _m0.Writer.create()) {
    if (message.method !== "") {
      writer.uint32(10).string(message.method);
    }
    if (message.requestId !== 0) {
      writer.uint32(16).uint32(message.requestId);
    }
    if (message.message.length !== 0) {
      writer.uint32(26).bytes(message.message);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseSatRpcRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.method = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }
          message.requestId = reader.uint32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.message = reader.bytes();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  create(base) {
    return SatRpcRequest.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseSatRpcRequest();
    message.method = object.method ?? "";
    message.requestId = object.requestId ?? 0;
    message.message = object.message ?? new Uint8Array(0);
    return message;
  }
};
messageTypeRegistry.set(SatRpcRequest.$type, SatRpcRequest);
function createBaseSatRpcResponse() {
  return { $type: "Electric.Satellite.SatRpcResponse", method: "", requestId: 0, message: void 0, error: void 0 };
}
const SatRpcResponse = {
  $type: "Electric.Satellite.SatRpcResponse",
  encode(message, writer = _m0.Writer.create()) {
    if (message.method !== "") {
      writer.uint32(10).string(message.method);
    }
    if (message.requestId !== 0) {
      writer.uint32(16).uint32(message.requestId);
    }
    if (message.message !== void 0) {
      writer.uint32(26).bytes(message.message);
    }
    if (message.error !== void 0) {
      SatErrorResp.encode(message.error, writer.uint32(34).fork()).ldelim();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseSatRpcResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.method = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }
          message.requestId = reader.uint32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.message = reader.bytes();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }
          message.error = SatErrorResp.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  create(base) {
    return SatRpcResponse.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseSatRpcResponse();
    message.method = object.method ?? "";
    message.requestId = object.requestId ?? 0;
    message.message = object.message ?? void 0;
    message.error = object.error !== void 0 && object.error !== null ? SatErrorResp.fromPartial(object.error) : void 0;
    return message;
  }
};
messageTypeRegistry.set(SatRpcResponse.$type, SatRpcResponse);
function createBaseSatAuthHeaderPair() {
  return { $type: "Electric.Satellite.SatAuthHeaderPair", key: 0, value: "" };
}
const SatAuthHeaderPair = {
  $type: "Electric.Satellite.SatAuthHeaderPair",
  encode(message, writer = _m0.Writer.create()) {
    if (message.key !== 0) {
      writer.uint32(8).int32(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseSatAuthHeaderPair();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }
          message.key = reader.int32();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  create(base) {
    return SatAuthHeaderPair.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseSatAuthHeaderPair();
    message.key = object.key ?? 0;
    message.value = object.value ?? "";
    return message;
  }
};
messageTypeRegistry.set(SatAuthHeaderPair.$type, SatAuthHeaderPair);
function createBaseSatAuthReq() {
  return { $type: "Electric.Satellite.SatAuthReq", id: "", token: "", headers: [] };
}
const SatAuthReq = {
  $type: "Electric.Satellite.SatAuthReq",
  encode(message, writer = _m0.Writer.create()) {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.token !== "") {
      writer.uint32(18).string(message.token);
    }
    for (const v of message.headers) {
      SatAuthHeaderPair.encode(v, writer.uint32(26).fork()).ldelim();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseSatAuthReq();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.token = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.headers.push(SatAuthHeaderPair.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  create(base) {
    return SatAuthReq.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseSatAuthReq();
    message.id = object.id ?? "";
    message.token = object.token ?? "";
    message.headers = object.headers?.map((e) => SatAuthHeaderPair.fromPartial(e)) || [];
    return message;
  }
};
messageTypeRegistry.set(SatAuthReq.$type, SatAuthReq);
function createBaseSatAuthResp() {
  return { $type: "Electric.Satellite.SatAuthResp", id: "", headers: [] };
}
const SatAuthResp = {
  $type: "Electric.Satellite.SatAuthResp",
  encode(message, writer = _m0.Writer.create()) {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    for (const v of message.headers) {
      SatAuthHeaderPair.encode(v, writer.uint32(26).fork()).ldelim();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseSatAuthResp();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.id = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.headers.push(SatAuthHeaderPair.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  create(base) {
    return SatAuthResp.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseSatAuthResp();
    message.id = object.id ?? "";
    message.headers = object.headers?.map((e) => SatAuthHeaderPair.fromPartial(e)) || [];
    return message;
  }
};
messageTypeRegistry.set(SatAuthResp.$type, SatAuthResp);
function createBaseSatErrorResp() {
  return { $type: "Electric.Satellite.SatErrorResp", errorType: 0, lsn: void 0, message: void 0 };
}
const SatErrorResp = {
  $type: "Electric.Satellite.SatErrorResp",
  encode(message, writer = _m0.Writer.create()) {
    if (message.errorType !== 0) {
      writer.uint32(8).int32(message.errorType);
    }
    if (message.lsn !== void 0) {
      writer.uint32(18).bytes(message.lsn);
    }
    if (message.message !== void 0) {
      writer.uint32(26).string(message.message);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseSatErrorResp();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }
          message.errorType = reader.int32();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.lsn = reader.bytes();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.message = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  create(base) {
    return SatErrorResp.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseSatErrorResp();
    message.errorType = object.errorType ?? 0;
    message.lsn = object.lsn ?? void 0;
    message.message = object.message ?? void 0;
    return message;
  }
};
messageTypeRegistry.set(SatErrorResp.$type, SatErrorResp);
function createBaseSatInStartReplicationReq() {
  return {
    $type: "Electric.Satellite.SatInStartReplicationReq",
    lsn: new Uint8Array(0),
    options: [],
    subscriptionIds: [],
    schemaVersion: void 0,
    observedTransactionData: [],
    sqlDialect: void 0,
    observedGoneBatch: []
  };
}
const SatInStartReplicationReq = {
  $type: "Electric.Satellite.SatInStartReplicationReq",
  encode(message, writer = _m0.Writer.create()) {
    if (message.lsn.length !== 0) {
      writer.uint32(10).bytes(message.lsn);
    }
    writer.uint32(18).fork();
    for (const v of message.options) {
      writer.int32(v);
    }
    writer.ldelim();
    for (const v of message.subscriptionIds) {
      writer.uint32(34).string(v);
    }
    if (message.schemaVersion !== void 0) {
      writer.uint32(42).string(message.schemaVersion);
    }
    writer.uint32(50).fork();
    for (const v of message.observedTransactionData) {
      writer.uint64(v);
    }
    writer.ldelim();
    if (message.sqlDialect !== void 0) {
      writer.uint32(56).int32(message.sqlDialect);
    }
    for (const v of message.observedGoneBatch) {
      writer.uint32(66).string(v);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseSatInStartReplicationReq();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.lsn = reader.bytes();
          continue;
        case 2:
          if (tag === 16) {
            message.options.push(reader.int32());
            continue;
          }
          if (tag === 18) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.options.push(reader.int32());
            }
            continue;
          }
          break;
        case 4:
          if (tag !== 34) {
            break;
          }
          message.subscriptionIds.push(reader.string());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }
          message.schemaVersion = reader.string();
          continue;
        case 6:
          if (tag === 48) {
            message.observedTransactionData.push(reader.uint64());
            continue;
          }
          if (tag === 50) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.observedTransactionData.push(reader.uint64());
            }
            continue;
          }
          break;
        case 7:
          if (tag !== 56) {
            break;
          }
          message.sqlDialect = reader.int32();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }
          message.observedGoneBatch.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  create(base) {
    return SatInStartReplicationReq.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseSatInStartReplicationReq();
    message.lsn = object.lsn ?? new Uint8Array(0);
    message.options = object.options?.map((e) => e) || [];
    message.subscriptionIds = object.subscriptionIds?.map((e) => e) || [];
    message.schemaVersion = object.schemaVersion ?? void 0;
    message.observedTransactionData = object.observedTransactionData?.map((e) => Long.fromValue(e)) || [];
    message.sqlDialect = object.sqlDialect ?? void 0;
    message.observedGoneBatch = object.observedGoneBatch?.map((e) => e) || [];
    return message;
  }
};
messageTypeRegistry.set(SatInStartReplicationReq.$type, SatInStartReplicationReq);
function createBaseSatInStartReplicationResp() {
  return { $type: "Electric.Satellite.SatInStartReplicationResp", err: void 0, unackedWindowSize: void 0 };
}
const SatInStartReplicationResp = {
  $type: "Electric.Satellite.SatInStartReplicationResp",
  encode(message, writer = _m0.Writer.create()) {
    if (message.err !== void 0) {
      SatInStartReplicationResp_ReplicationError.encode(message.err, writer.uint32(10).fork()).ldelim();
    }
    if (message.unackedWindowSize !== void 0) {
      writer.uint32(16).uint32(message.unackedWindowSize);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseSatInStartReplicationResp();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.err = SatInStartReplicationResp_ReplicationError.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }
          message.unackedWindowSize = reader.uint32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  create(base) {
    return SatInStartReplicationResp.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseSatInStartReplicationResp();
    message.err = object.err !== void 0 && object.err !== null ? SatInStartReplicationResp_ReplicationError.fromPartial(object.err) : void 0;
    message.unackedWindowSize = object.unackedWindowSize ?? void 0;
    return message;
  }
};
messageTypeRegistry.set(SatInStartReplicationResp.$type, SatInStartReplicationResp);
function createBaseSatInStartReplicationResp_ReplicationError() {
  return { $type: "Electric.Satellite.SatInStartReplicationResp.ReplicationError", code: 0, message: "" };
}
const SatInStartReplicationResp_ReplicationError = {
  $type: "Electric.Satellite.SatInStartReplicationResp.ReplicationError",
  encode(message, writer = _m0.Writer.create()) {
    if (message.code !== 0) {
      writer.uint32(8).int32(message.code);
    }
    if (message.message !== "") {
      writer.uint32(18).string(message.message);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseSatInStartReplicationResp_ReplicationError();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }
          message.code = reader.int32();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.message = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  create(base) {
    return SatInStartReplicationResp_ReplicationError.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseSatInStartReplicationResp_ReplicationError();
    message.code = object.code ?? 0;
    message.message = object.message ?? "";
    return message;
  }
};
messageTypeRegistry.set(SatInStartReplicationResp_ReplicationError.$type, SatInStartReplicationResp_ReplicationError);
function createBaseSatInStopReplicationReq() {
  return { $type: "Electric.Satellite.SatInStopReplicationReq" };
}
const SatInStopReplicationReq = {
  $type: "Electric.Satellite.SatInStopReplicationReq",
  encode(_, writer = _m0.Writer.create()) {
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseSatInStopReplicationReq();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  create(base) {
    return SatInStopReplicationReq.fromPartial(base ?? {});
  },
  fromPartial(_) {
    const message = createBaseSatInStopReplicationReq();
    return message;
  }
};
messageTypeRegistry.set(SatInStopReplicationReq.$type, SatInStopReplicationReq);
function createBaseSatInStopReplicationResp() {
  return { $type: "Electric.Satellite.SatInStopReplicationResp" };
}
const SatInStopReplicationResp = {
  $type: "Electric.Satellite.SatInStopReplicationResp",
  encode(_, writer = _m0.Writer.create()) {
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseSatInStopReplicationResp();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  create(base) {
    return SatInStopReplicationResp.fromPartial(base ?? {});
  },
  fromPartial(_) {
    const message = createBaseSatInStopReplicationResp();
    return message;
  }
};
messageTypeRegistry.set(SatInStopReplicationResp.$type, SatInStopReplicationResp);
function createBaseSatRelationColumn() {
  return { $type: "Electric.Satellite.SatRelationColumn", name: "", type: "", primaryKey: false, isNullable: false };
}
const SatRelationColumn = {
  $type: "Electric.Satellite.SatRelationColumn",
  encode(message, writer = _m0.Writer.create()) {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.type !== "") {
      writer.uint32(18).string(message.type);
    }
    if (message.primaryKey !== false) {
      writer.uint32(24).bool(message.primaryKey);
    }
    if (message.isNullable !== false) {
      writer.uint32(32).bool(message.isNullable);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseSatRelationColumn();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.type = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }
          message.primaryKey = reader.bool();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }
          message.isNullable = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  create(base) {
    return SatRelationColumn.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseSatRelationColumn();
    message.name = object.name ?? "";
    message.type = object.type ?? "";
    message.primaryKey = object.primaryKey ?? false;
    message.isNullable = object.isNullable ?? false;
    return message;
  }
};
messageTypeRegistry.set(SatRelationColumn.$type, SatRelationColumn);
function createBaseSatRelation() {
  return {
    $type: "Electric.Satellite.SatRelation",
    schemaName: "",
    tableType: 0,
    tableName: "",
    relationId: 0,
    columns: []
  };
}
const SatRelation = {
  $type: "Electric.Satellite.SatRelation",
  encode(message, writer = _m0.Writer.create()) {
    if (message.schemaName !== "") {
      writer.uint32(10).string(message.schemaName);
    }
    if (message.tableType !== 0) {
      writer.uint32(16).int32(message.tableType);
    }
    if (message.tableName !== "") {
      writer.uint32(26).string(message.tableName);
    }
    if (message.relationId !== 0) {
      writer.uint32(32).uint32(message.relationId);
    }
    for (const v of message.columns) {
      SatRelationColumn.encode(v, writer.uint32(42).fork()).ldelim();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseSatRelation();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.schemaName = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }
          message.tableType = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.tableName = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }
          message.relationId = reader.uint32();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }
          message.columns.push(SatRelationColumn.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  create(base) {
    return SatRelation.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseSatRelation();
    message.schemaName = object.schemaName ?? "";
    message.tableType = object.tableType ?? 0;
    message.tableName = object.tableName ?? "";
    message.relationId = object.relationId ?? 0;
    message.columns = object.columns?.map((e) => SatRelationColumn.fromPartial(e)) || [];
    return message;
  }
};
messageTypeRegistry.set(SatRelation.$type, SatRelation);
function createBaseSatOpLog() {
  return { $type: "Electric.Satellite.SatOpLog", ops: [] };
}
const SatOpLog = {
  $type: "Electric.Satellite.SatOpLog",
  encode(message, writer = _m0.Writer.create()) {
    for (const v of message.ops) {
      SatTransOp.encode(v, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseSatOpLog();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.ops.push(SatTransOp.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  create(base) {
    return SatOpLog.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseSatOpLog();
    message.ops = object.ops?.map((e) => SatTransOp.fromPartial(e)) || [];
    return message;
  }
};
messageTypeRegistry.set(SatOpLog.$type, SatOpLog);
function createBaseSatOpLogAck() {
  return {
    $type: "Electric.Satellite.SatOpLogAck",
    ackTimestamp: Long.UZERO,
    lsn: new Uint8Array(0),
    transactionId: Long.UZERO,
    subscriptionIds: [],
    additionalDataSourceIds: [],
    goneSubscriptionIds: []
  };
}
const SatOpLogAck = {
  $type: "Electric.Satellite.SatOpLogAck",
  encode(message, writer = _m0.Writer.create()) {
    if (!message.ackTimestamp.equals(Long.UZERO)) {
      writer.uint32(8).uint64(message.ackTimestamp);
    }
    if (message.lsn.length !== 0) {
      writer.uint32(18).bytes(message.lsn);
    }
    if (!message.transactionId.equals(Long.UZERO)) {
      writer.uint32(24).uint64(message.transactionId);
    }
    for (const v of message.subscriptionIds) {
      writer.uint32(34).string(v);
    }
    writer.uint32(42).fork();
    for (const v of message.additionalDataSourceIds) {
      writer.uint64(v);
    }
    writer.ldelim();
    for (const v of message.goneSubscriptionIds) {
      writer.uint32(50).string(v);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseSatOpLogAck();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }
          message.ackTimestamp = reader.uint64();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.lsn = reader.bytes();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }
          message.transactionId = reader.uint64();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }
          message.subscriptionIds.push(reader.string());
          continue;
        case 5:
          if (tag === 40) {
            message.additionalDataSourceIds.push(reader.uint64());
            continue;
          }
          if (tag === 42) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.additionalDataSourceIds.push(reader.uint64());
            }
            continue;
          }
          break;
        case 6:
          if (tag !== 50) {
            break;
          }
          message.goneSubscriptionIds.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  create(base) {
    return SatOpLogAck.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseSatOpLogAck();
    message.ackTimestamp = object.ackTimestamp !== void 0 && object.ackTimestamp !== null ? Long.fromValue(object.ackTimestamp) : Long.UZERO;
    message.lsn = object.lsn ?? new Uint8Array(0);
    message.transactionId = object.transactionId !== void 0 && object.transactionId !== null ? Long.fromValue(object.transactionId) : Long.UZERO;
    message.subscriptionIds = object.subscriptionIds?.map((e) => e) || [];
    message.additionalDataSourceIds = object.additionalDataSourceIds?.map((e) => Long.fromValue(e)) || [];
    message.goneSubscriptionIds = object.goneSubscriptionIds?.map((e) => e) || [];
    return message;
  }
};
messageTypeRegistry.set(SatOpLogAck.$type, SatOpLogAck);
function createBaseSatTransOp() {
  return {
    $type: "Electric.Satellite.SatTransOp",
    begin: void 0,
    commit: void 0,
    update: void 0,
    insert: void 0,
    delete: void 0,
    migrate: void 0,
    compensation: void 0,
    gone: void 0,
    additionalBegin: void 0,
    additionalCommit: void 0
  };
}
const SatTransOp = {
  $type: "Electric.Satellite.SatTransOp",
  encode(message, writer = _m0.Writer.create()) {
    if (message.begin !== void 0) {
      SatOpBegin.encode(message.begin, writer.uint32(10).fork()).ldelim();
    }
    if (message.commit !== void 0) {
      SatOpCommit.encode(message.commit, writer.uint32(18).fork()).ldelim();
    }
    if (message.update !== void 0) {
      SatOpUpdate.encode(message.update, writer.uint32(26).fork()).ldelim();
    }
    if (message.insert !== void 0) {
      SatOpInsert.encode(message.insert, writer.uint32(34).fork()).ldelim();
    }
    if (message.delete !== void 0) {
      SatOpDelete.encode(message.delete, writer.uint32(42).fork()).ldelim();
    }
    if (message.migrate !== void 0) {
      SatOpMigrate.encode(message.migrate, writer.uint32(50).fork()).ldelim();
    }
    if (message.compensation !== void 0) {
      SatOpCompensation.encode(message.compensation, writer.uint32(58).fork()).ldelim();
    }
    if (message.gone !== void 0) {
      SatOpGone.encode(message.gone, writer.uint32(66).fork()).ldelim();
    }
    if (message.additionalBegin !== void 0) {
      SatOpAdditionalBegin.encode(message.additionalBegin, writer.uint32(74).fork()).ldelim();
    }
    if (message.additionalCommit !== void 0) {
      SatOpAdditionalCommit.encode(message.additionalCommit, writer.uint32(82).fork()).ldelim();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseSatTransOp();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.begin = SatOpBegin.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.commit = SatOpCommit.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.update = SatOpUpdate.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }
          message.insert = SatOpInsert.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }
          message.delete = SatOpDelete.decode(reader, reader.uint32());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }
          message.migrate = SatOpMigrate.decode(reader, reader.uint32());
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }
          message.compensation = SatOpCompensation.decode(reader, reader.uint32());
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }
          message.gone = SatOpGone.decode(reader, reader.uint32());
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }
          message.additionalBegin = SatOpAdditionalBegin.decode(reader, reader.uint32());
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }
          message.additionalCommit = SatOpAdditionalCommit.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  create(base) {
    return SatTransOp.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseSatTransOp();
    message.begin = object.begin !== void 0 && object.begin !== null ? SatOpBegin.fromPartial(object.begin) : void 0;
    message.commit = object.commit !== void 0 && object.commit !== null ? SatOpCommit.fromPartial(object.commit) : void 0;
    message.update = object.update !== void 0 && object.update !== null ? SatOpUpdate.fromPartial(object.update) : void 0;
    message.insert = object.insert !== void 0 && object.insert !== null ? SatOpInsert.fromPartial(object.insert) : void 0;
    message.delete = object.delete !== void 0 && object.delete !== null ? SatOpDelete.fromPartial(object.delete) : void 0;
    message.migrate = object.migrate !== void 0 && object.migrate !== null ? SatOpMigrate.fromPartial(object.migrate) : void 0;
    message.compensation = object.compensation !== void 0 && object.compensation !== null ? SatOpCompensation.fromPartial(object.compensation) : void 0;
    message.gone = object.gone !== void 0 && object.gone !== null ? SatOpGone.fromPartial(object.gone) : void 0;
    message.additionalBegin = object.additionalBegin !== void 0 && object.additionalBegin !== null ? SatOpAdditionalBegin.fromPartial(object.additionalBegin) : void 0;
    message.additionalCommit = object.additionalCommit !== void 0 && object.additionalCommit !== null ? SatOpAdditionalCommit.fromPartial(object.additionalCommit) : void 0;
    return message;
  }
};
messageTypeRegistry.set(SatTransOp.$type, SatTransOp);
function createBaseSatOpBegin() {
  return {
    $type: "Electric.Satellite.SatOpBegin",
    commitTimestamp: Long.UZERO,
    lsn: new Uint8Array(0),
    origin: void 0,
    isMigration: false,
    additionalDataRef: Long.UZERO,
    transactionId: void 0
  };
}
const SatOpBegin = {
  $type: "Electric.Satellite.SatOpBegin",
  encode(message, writer = _m0.Writer.create()) {
    if (!message.commitTimestamp.equals(Long.UZERO)) {
      writer.uint32(8).uint64(message.commitTimestamp);
    }
    if (message.lsn.length !== 0) {
      writer.uint32(26).bytes(message.lsn);
    }
    if (message.origin !== void 0) {
      writer.uint32(34).string(message.origin);
    }
    if (message.isMigration !== false) {
      writer.uint32(40).bool(message.isMigration);
    }
    if (!message.additionalDataRef.equals(Long.UZERO)) {
      writer.uint32(48).uint64(message.additionalDataRef);
    }
    if (message.transactionId !== void 0) {
      writer.uint32(56).uint64(message.transactionId);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseSatOpBegin();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }
          message.commitTimestamp = reader.uint64();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.lsn = reader.bytes();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }
          message.origin = reader.string();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }
          message.isMigration = reader.bool();
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }
          message.additionalDataRef = reader.uint64();
          continue;
        case 7:
          if (tag !== 56) {
            break;
          }
          message.transactionId = reader.uint64();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  create(base) {
    return SatOpBegin.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseSatOpBegin();
    message.commitTimestamp = object.commitTimestamp !== void 0 && object.commitTimestamp !== null ? Long.fromValue(object.commitTimestamp) : Long.UZERO;
    message.lsn = object.lsn ?? new Uint8Array(0);
    message.origin = object.origin ?? void 0;
    message.isMigration = object.isMigration ?? false;
    message.additionalDataRef = object.additionalDataRef !== void 0 && object.additionalDataRef !== null ? Long.fromValue(object.additionalDataRef) : Long.UZERO;
    message.transactionId = object.transactionId !== void 0 && object.transactionId !== null ? Long.fromValue(object.transactionId) : void 0;
    return message;
  }
};
messageTypeRegistry.set(SatOpBegin.$type, SatOpBegin);
function createBaseSatOpAdditionalBegin() {
  return { $type: "Electric.Satellite.SatOpAdditionalBegin", ref: Long.UZERO };
}
const SatOpAdditionalBegin = {
  $type: "Electric.Satellite.SatOpAdditionalBegin",
  encode(message, writer = _m0.Writer.create()) {
    if (!message.ref.equals(Long.UZERO)) {
      writer.uint32(8).uint64(message.ref);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseSatOpAdditionalBegin();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }
          message.ref = reader.uint64();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  create(base) {
    return SatOpAdditionalBegin.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseSatOpAdditionalBegin();
    message.ref = object.ref !== void 0 && object.ref !== null ? Long.fromValue(object.ref) : Long.UZERO;
    return message;
  }
};
messageTypeRegistry.set(SatOpAdditionalBegin.$type, SatOpAdditionalBegin);
function createBaseSatOpCommit() {
  return {
    $type: "Electric.Satellite.SatOpCommit",
    commitTimestamp: Long.UZERO,
    lsn: new Uint8Array(0),
    additionalDataRef: Long.UZERO,
    transactionId: void 0
  };
}
const SatOpCommit = {
  $type: "Electric.Satellite.SatOpCommit",
  encode(message, writer = _m0.Writer.create()) {
    if (!message.commitTimestamp.equals(Long.UZERO)) {
      writer.uint32(8).uint64(message.commitTimestamp);
    }
    if (message.lsn.length !== 0) {
      writer.uint32(26).bytes(message.lsn);
    }
    if (!message.additionalDataRef.equals(Long.UZERO)) {
      writer.uint32(32).uint64(message.additionalDataRef);
    }
    if (message.transactionId !== void 0) {
      writer.uint32(40).uint64(message.transactionId);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseSatOpCommit();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }
          message.commitTimestamp = reader.uint64();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.lsn = reader.bytes();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }
          message.additionalDataRef = reader.uint64();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }
          message.transactionId = reader.uint64();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  create(base) {
    return SatOpCommit.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseSatOpCommit();
    message.commitTimestamp = object.commitTimestamp !== void 0 && object.commitTimestamp !== null ? Long.fromValue(object.commitTimestamp) : Long.UZERO;
    message.lsn = object.lsn ?? new Uint8Array(0);
    message.additionalDataRef = object.additionalDataRef !== void 0 && object.additionalDataRef !== null ? Long.fromValue(object.additionalDataRef) : Long.UZERO;
    message.transactionId = object.transactionId !== void 0 && object.transactionId !== null ? Long.fromValue(object.transactionId) : void 0;
    return message;
  }
};
messageTypeRegistry.set(SatOpCommit.$type, SatOpCommit);
function createBaseSatOpAdditionalCommit() {
  return { $type: "Electric.Satellite.SatOpAdditionalCommit", ref: Long.UZERO };
}
const SatOpAdditionalCommit = {
  $type: "Electric.Satellite.SatOpAdditionalCommit",
  encode(message, writer = _m0.Writer.create()) {
    if (!message.ref.equals(Long.UZERO)) {
      writer.uint32(8).uint64(message.ref);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseSatOpAdditionalCommit();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }
          message.ref = reader.uint64();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  create(base) {
    return SatOpAdditionalCommit.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseSatOpAdditionalCommit();
    message.ref = object.ref !== void 0 && object.ref !== null ? Long.fromValue(object.ref) : Long.UZERO;
    return message;
  }
};
messageTypeRegistry.set(SatOpAdditionalCommit.$type, SatOpAdditionalCommit);
function createBaseSatOpInsert() {
  return { $type: "Electric.Satellite.SatOpInsert", relationId: 0, rowData: void 0, tags: [] };
}
const SatOpInsert = {
  $type: "Electric.Satellite.SatOpInsert",
  encode(message, writer = _m0.Writer.create()) {
    if (message.relationId !== 0) {
      writer.uint32(8).uint32(message.relationId);
    }
    if (message.rowData !== void 0) {
      SatOpRow.encode(message.rowData, writer.uint32(18).fork()).ldelim();
    }
    for (const v of message.tags) {
      writer.uint32(26).string(v);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseSatOpInsert();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }
          message.relationId = reader.uint32();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.rowData = SatOpRow.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.tags.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  create(base) {
    return SatOpInsert.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseSatOpInsert();
    message.relationId = object.relationId ?? 0;
    message.rowData = object.rowData !== void 0 && object.rowData !== null ? SatOpRow.fromPartial(object.rowData) : void 0;
    message.tags = object.tags?.map((e) => e) || [];
    return message;
  }
};
messageTypeRegistry.set(SatOpInsert.$type, SatOpInsert);
function createBaseSatOpUpdate() {
  return {
    $type: "Electric.Satellite.SatOpUpdate",
    relationId: 0,
    rowData: void 0,
    oldRowData: void 0,
    tags: []
  };
}
const SatOpUpdate = {
  $type: "Electric.Satellite.SatOpUpdate",
  encode(message, writer = _m0.Writer.create()) {
    if (message.relationId !== 0) {
      writer.uint32(8).uint32(message.relationId);
    }
    if (message.rowData !== void 0) {
      SatOpRow.encode(message.rowData, writer.uint32(18).fork()).ldelim();
    }
    if (message.oldRowData !== void 0) {
      SatOpRow.encode(message.oldRowData, writer.uint32(26).fork()).ldelim();
    }
    for (const v of message.tags) {
      writer.uint32(34).string(v);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseSatOpUpdate();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }
          message.relationId = reader.uint32();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.rowData = SatOpRow.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.oldRowData = SatOpRow.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }
          message.tags.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  create(base) {
    return SatOpUpdate.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseSatOpUpdate();
    message.relationId = object.relationId ?? 0;
    message.rowData = object.rowData !== void 0 && object.rowData !== null ? SatOpRow.fromPartial(object.rowData) : void 0;
    message.oldRowData = object.oldRowData !== void 0 && object.oldRowData !== null ? SatOpRow.fromPartial(object.oldRowData) : void 0;
    message.tags = object.tags?.map((e) => e) || [];
    return message;
  }
};
messageTypeRegistry.set(SatOpUpdate.$type, SatOpUpdate);
function createBaseSatOpDelete() {
  return { $type: "Electric.Satellite.SatOpDelete", relationId: 0, oldRowData: void 0, tags: [] };
}
const SatOpDelete = {
  $type: "Electric.Satellite.SatOpDelete",
  encode(message, writer = _m0.Writer.create()) {
    if (message.relationId !== 0) {
      writer.uint32(8).uint32(message.relationId);
    }
    if (message.oldRowData !== void 0) {
      SatOpRow.encode(message.oldRowData, writer.uint32(18).fork()).ldelim();
    }
    for (const v of message.tags) {
      writer.uint32(26).string(v);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseSatOpDelete();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }
          message.relationId = reader.uint32();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.oldRowData = SatOpRow.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.tags.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  create(base) {
    return SatOpDelete.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseSatOpDelete();
    message.relationId = object.relationId ?? 0;
    message.oldRowData = object.oldRowData !== void 0 && object.oldRowData !== null ? SatOpRow.fromPartial(object.oldRowData) : void 0;
    message.tags = object.tags?.map((e) => e) || [];
    return message;
  }
};
messageTypeRegistry.set(SatOpDelete.$type, SatOpDelete);
function createBaseSatOpCompensation() {
  return { $type: "Electric.Satellite.SatOpCompensation", relationId: 0, pkData: void 0, tags: [] };
}
const SatOpCompensation = {
  $type: "Electric.Satellite.SatOpCompensation",
  encode(message, writer = _m0.Writer.create()) {
    if (message.relationId !== 0) {
      writer.uint32(8).uint32(message.relationId);
    }
    if (message.pkData !== void 0) {
      SatOpRow.encode(message.pkData, writer.uint32(18).fork()).ldelim();
    }
    for (const v of message.tags) {
      writer.uint32(34).string(v);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseSatOpCompensation();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }
          message.relationId = reader.uint32();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.pkData = SatOpRow.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }
          message.tags.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  create(base) {
    return SatOpCompensation.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseSatOpCompensation();
    message.relationId = object.relationId ?? 0;
    message.pkData = object.pkData !== void 0 && object.pkData !== null ? SatOpRow.fromPartial(object.pkData) : void 0;
    message.tags = object.tags?.map((e) => e) || [];
    return message;
  }
};
messageTypeRegistry.set(SatOpCompensation.$type, SatOpCompensation);
function createBaseSatOpGone() {
  return { $type: "Electric.Satellite.SatOpGone", relationId: 0, pkData: void 0 };
}
const SatOpGone = {
  $type: "Electric.Satellite.SatOpGone",
  encode(message, writer = _m0.Writer.create()) {
    if (message.relationId !== 0) {
      writer.uint32(8).uint32(message.relationId);
    }
    if (message.pkData !== void 0) {
      SatOpRow.encode(message.pkData, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseSatOpGone();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }
          message.relationId = reader.uint32();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.pkData = SatOpRow.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  create(base) {
    return SatOpGone.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseSatOpGone();
    message.relationId = object.relationId ?? 0;
    message.pkData = object.pkData !== void 0 && object.pkData !== null ? SatOpRow.fromPartial(object.pkData) : void 0;
    return message;
  }
};
messageTypeRegistry.set(SatOpGone.$type, SatOpGone);
function createBaseSatOpRow() {
  return { $type: "Electric.Satellite.SatOpRow", nullsBitmask: new Uint8Array(0), values: [] };
}
const SatOpRow = {
  $type: "Electric.Satellite.SatOpRow",
  encode(message, writer = _m0.Writer.create()) {
    if (message.nullsBitmask.length !== 0) {
      writer.uint32(10).bytes(message.nullsBitmask);
    }
    for (const v of message.values) {
      writer.uint32(18).bytes(v);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseSatOpRow();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.nullsBitmask = reader.bytes();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.values.push(reader.bytes());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  create(base) {
    return SatOpRow.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseSatOpRow();
    message.nullsBitmask = object.nullsBitmask ?? new Uint8Array(0);
    message.values = object.values?.map((e) => e) || [];
    return message;
  }
};
messageTypeRegistry.set(SatOpRow.$type, SatOpRow);
function createBaseSatOpMigrate() {
  return { $type: "Electric.Satellite.SatOpMigrate", version: "", stmts: [], table: void 0, enumType: void 0 };
}
const SatOpMigrate = {
  $type: "Electric.Satellite.SatOpMigrate",
  encode(message, writer = _m0.Writer.create()) {
    if (message.version !== "") {
      writer.uint32(10).string(message.version);
    }
    for (const v of message.stmts) {
      SatOpMigrate_Stmt.encode(v, writer.uint32(18).fork()).ldelim();
    }
    if (message.table !== void 0) {
      SatOpMigrate_Table.encode(message.table, writer.uint32(26).fork()).ldelim();
    }
    if (message.enumType !== void 0) {
      SatOpMigrate_EnumType.encode(message.enumType, writer.uint32(34).fork()).ldelim();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseSatOpMigrate();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.version = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.stmts.push(SatOpMigrate_Stmt.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.table = SatOpMigrate_Table.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }
          message.enumType = SatOpMigrate_EnumType.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  create(base) {
    return SatOpMigrate.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseSatOpMigrate();
    message.version = object.version ?? "";
    message.stmts = object.stmts?.map((e) => SatOpMigrate_Stmt.fromPartial(e)) || [];
    message.table = object.table !== void 0 && object.table !== null ? SatOpMigrate_Table.fromPartial(object.table) : void 0;
    message.enumType = object.enumType !== void 0 && object.enumType !== null ? SatOpMigrate_EnumType.fromPartial(object.enumType) : void 0;
    return message;
  }
};
messageTypeRegistry.set(SatOpMigrate.$type, SatOpMigrate);
function createBaseSatOpMigrate_Stmt() {
  return { $type: "Electric.Satellite.SatOpMigrate.Stmt", type: 0, sql: "" };
}
const SatOpMigrate_Stmt = {
  $type: "Electric.Satellite.SatOpMigrate.Stmt",
  encode(message, writer = _m0.Writer.create()) {
    if (message.type !== 0) {
      writer.uint32(8).int32(message.type);
    }
    if (message.sql !== "") {
      writer.uint32(18).string(message.sql);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseSatOpMigrate_Stmt();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }
          message.type = reader.int32();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.sql = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  create(base) {
    return SatOpMigrate_Stmt.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseSatOpMigrate_Stmt();
    message.type = object.type ?? 0;
    message.sql = object.sql ?? "";
    return message;
  }
};
messageTypeRegistry.set(SatOpMigrate_Stmt.$type, SatOpMigrate_Stmt);
function createBaseSatOpMigrate_PgColumnType() {
  return { $type: "Electric.Satellite.SatOpMigrate.PgColumnType", name: "", array: [], size: [] };
}
const SatOpMigrate_PgColumnType = {
  $type: "Electric.Satellite.SatOpMigrate.PgColumnType",
  encode(message, writer = _m0.Writer.create()) {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    writer.uint32(18).fork();
    for (const v of message.array) {
      writer.int32(v);
    }
    writer.ldelim();
    writer.uint32(26).fork();
    for (const v of message.size) {
      writer.int32(v);
    }
    writer.ldelim();
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseSatOpMigrate_PgColumnType();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.name = reader.string();
          continue;
        case 2:
          if (tag === 16) {
            message.array.push(reader.int32());
            continue;
          }
          if (tag === 18) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.array.push(reader.int32());
            }
            continue;
          }
          break;
        case 3:
          if (tag === 24) {
            message.size.push(reader.int32());
            continue;
          }
          if (tag === 26) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.size.push(reader.int32());
            }
            continue;
          }
          break;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  create(base) {
    return SatOpMigrate_PgColumnType.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseSatOpMigrate_PgColumnType();
    message.name = object.name ?? "";
    message.array = object.array?.map((e) => e) || [];
    message.size = object.size?.map((e) => e) || [];
    return message;
  }
};
messageTypeRegistry.set(SatOpMigrate_PgColumnType.$type, SatOpMigrate_PgColumnType);
function createBaseSatOpMigrate_Column() {
  return { $type: "Electric.Satellite.SatOpMigrate.Column", name: "", sqliteType: "", pgType: void 0 };
}
const SatOpMigrate_Column = {
  $type: "Electric.Satellite.SatOpMigrate.Column",
  encode(message, writer = _m0.Writer.create()) {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.sqliteType !== "") {
      writer.uint32(18).string(message.sqliteType);
    }
    if (message.pgType !== void 0) {
      SatOpMigrate_PgColumnType.encode(message.pgType, writer.uint32(26).fork()).ldelim();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseSatOpMigrate_Column();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.sqliteType = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.pgType = SatOpMigrate_PgColumnType.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  create(base) {
    return SatOpMigrate_Column.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseSatOpMigrate_Column();
    message.name = object.name ?? "";
    message.sqliteType = object.sqliteType ?? "";
    message.pgType = object.pgType !== void 0 && object.pgType !== null ? SatOpMigrate_PgColumnType.fromPartial(object.pgType) : void 0;
    return message;
  }
};
messageTypeRegistry.set(SatOpMigrate_Column.$type, SatOpMigrate_Column);
function createBaseSatOpMigrate_ForeignKey() {
  return { $type: "Electric.Satellite.SatOpMigrate.ForeignKey", fkCols: [], pkTable: "", pkCols: [] };
}
const SatOpMigrate_ForeignKey = {
  $type: "Electric.Satellite.SatOpMigrate.ForeignKey",
  encode(message, writer = _m0.Writer.create()) {
    for (const v of message.fkCols) {
      writer.uint32(10).string(v);
    }
    if (message.pkTable !== "") {
      writer.uint32(18).string(message.pkTable);
    }
    for (const v of message.pkCols) {
      writer.uint32(26).string(v);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseSatOpMigrate_ForeignKey();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.fkCols.push(reader.string());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.pkTable = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.pkCols.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  create(base) {
    return SatOpMigrate_ForeignKey.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseSatOpMigrate_ForeignKey();
    message.fkCols = object.fkCols?.map((e) => e) || [];
    message.pkTable = object.pkTable ?? "";
    message.pkCols = object.pkCols?.map((e) => e) || [];
    return message;
  }
};
messageTypeRegistry.set(SatOpMigrate_ForeignKey.$type, SatOpMigrate_ForeignKey);
function createBaseSatOpMigrate_Table() {
  return { $type: "Electric.Satellite.SatOpMigrate.Table", name: "", columns: [], fks: [], pks: [] };
}
const SatOpMigrate_Table = {
  $type: "Electric.Satellite.SatOpMigrate.Table",
  encode(message, writer = _m0.Writer.create()) {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    for (const v of message.columns) {
      SatOpMigrate_Column.encode(v, writer.uint32(18).fork()).ldelim();
    }
    for (const v of message.fks) {
      SatOpMigrate_ForeignKey.encode(v, writer.uint32(26).fork()).ldelim();
    }
    for (const v of message.pks) {
      writer.uint32(34).string(v);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseSatOpMigrate_Table();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.columns.push(SatOpMigrate_Column.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.fks.push(SatOpMigrate_ForeignKey.decode(reader, reader.uint32()));
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }
          message.pks.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  create(base) {
    return SatOpMigrate_Table.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseSatOpMigrate_Table();
    message.name = object.name ?? "";
    message.columns = object.columns?.map((e) => SatOpMigrate_Column.fromPartial(e)) || [];
    message.fks = object.fks?.map((e) => SatOpMigrate_ForeignKey.fromPartial(e)) || [];
    message.pks = object.pks?.map((e) => e) || [];
    return message;
  }
};
messageTypeRegistry.set(SatOpMigrate_Table.$type, SatOpMigrate_Table);
function createBaseSatOpMigrate_EnumType() {
  return { $type: "Electric.Satellite.SatOpMigrate.EnumType", name: "", values: [] };
}
const SatOpMigrate_EnumType = {
  $type: "Electric.Satellite.SatOpMigrate.EnumType",
  encode(message, writer = _m0.Writer.create()) {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    for (const v of message.values) {
      writer.uint32(18).string(v);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseSatOpMigrate_EnumType();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.values.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  create(base) {
    return SatOpMigrate_EnumType.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseSatOpMigrate_EnumType();
    message.name = object.name ?? "";
    message.values = object.values?.map((e) => e) || [];
    return message;
  }
};
messageTypeRegistry.set(SatOpMigrate_EnumType.$type, SatOpMigrate_EnumType);
function createBaseSatSubsReq() {
  return { $type: "Electric.Satellite.SatSubsReq", subscriptionId: "", shapeRequests: [] };
}
const SatSubsReq = {
  $type: "Electric.Satellite.SatSubsReq",
  encode(message, writer = _m0.Writer.create()) {
    if (message.subscriptionId !== "") {
      writer.uint32(10).string(message.subscriptionId);
    }
    for (const v of message.shapeRequests) {
      SatShapeReq.encode(v, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseSatSubsReq();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.subscriptionId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.shapeRequests.push(SatShapeReq.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  create(base) {
    return SatSubsReq.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseSatSubsReq();
    message.subscriptionId = object.subscriptionId ?? "";
    message.shapeRequests = object.shapeRequests?.map((e) => SatShapeReq.fromPartial(e)) || [];
    return message;
  }
};
messageTypeRegistry.set(SatSubsReq.$type, SatSubsReq);
function createBaseSatSubsResp() {
  return { $type: "Electric.Satellite.SatSubsResp", subscriptionId: "", err: void 0 };
}
const SatSubsResp = {
  $type: "Electric.Satellite.SatSubsResp",
  encode(message, writer = _m0.Writer.create()) {
    if (message.subscriptionId !== "") {
      writer.uint32(10).string(message.subscriptionId);
    }
    if (message.err !== void 0) {
      SatSubsResp_SatSubsError.encode(message.err, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseSatSubsResp();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.subscriptionId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.err = SatSubsResp_SatSubsError.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  create(base) {
    return SatSubsResp.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseSatSubsResp();
    message.subscriptionId = object.subscriptionId ?? "";
    message.err = object.err !== void 0 && object.err !== null ? SatSubsResp_SatSubsError.fromPartial(object.err) : void 0;
    return message;
  }
};
messageTypeRegistry.set(SatSubsResp.$type, SatSubsResp);
function createBaseSatSubsResp_SatSubsError() {
  return { $type: "Electric.Satellite.SatSubsResp.SatSubsError", code: 0, message: "", shapeRequestError: [] };
}
const SatSubsResp_SatSubsError = {
  $type: "Electric.Satellite.SatSubsResp.SatSubsError",
  encode(message, writer = _m0.Writer.create()) {
    if (message.code !== 0) {
      writer.uint32(16).int32(message.code);
    }
    if (message.message !== "") {
      writer.uint32(26).string(message.message);
    }
    for (const v of message.shapeRequestError) {
      SatSubsResp_SatSubsError_ShapeReqError.encode(v, writer.uint32(34).fork()).ldelim();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseSatSubsResp_SatSubsError();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2:
          if (tag !== 16) {
            break;
          }
          message.code = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.message = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }
          message.shapeRequestError.push(SatSubsResp_SatSubsError_ShapeReqError.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  create(base) {
    return SatSubsResp_SatSubsError.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseSatSubsResp_SatSubsError();
    message.code = object.code ?? 0;
    message.message = object.message ?? "";
    message.shapeRequestError = object.shapeRequestError?.map((e) => SatSubsResp_SatSubsError_ShapeReqError.fromPartial(e)) || [];
    return message;
  }
};
messageTypeRegistry.set(SatSubsResp_SatSubsError.$type, SatSubsResp_SatSubsError);
function createBaseSatSubsResp_SatSubsError_ShapeReqError() {
  return { $type: "Electric.Satellite.SatSubsResp.SatSubsError.ShapeReqError", code: 0, message: "", requestId: "" };
}
const SatSubsResp_SatSubsError_ShapeReqError = {
  $type: "Electric.Satellite.SatSubsResp.SatSubsError.ShapeReqError",
  encode(message, writer = _m0.Writer.create()) {
    if (message.code !== 0) {
      writer.uint32(8).int32(message.code);
    }
    if (message.message !== "") {
      writer.uint32(18).string(message.message);
    }
    if (message.requestId !== "") {
      writer.uint32(26).string(message.requestId);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseSatSubsResp_SatSubsError_ShapeReqError();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }
          message.code = reader.int32();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.message = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.requestId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  create(base) {
    return SatSubsResp_SatSubsError_ShapeReqError.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseSatSubsResp_SatSubsError_ShapeReqError();
    message.code = object.code ?? 0;
    message.message = object.message ?? "";
    message.requestId = object.requestId ?? "";
    return message;
  }
};
messageTypeRegistry.set(SatSubsResp_SatSubsError_ShapeReqError.$type, SatSubsResp_SatSubsError_ShapeReqError);
function createBaseSatUnsubsReq() {
  return { $type: "Electric.Satellite.SatUnsubsReq", subscriptionIds: [] };
}
const SatUnsubsReq = {
  $type: "Electric.Satellite.SatUnsubsReq",
  encode(message, writer = _m0.Writer.create()) {
    for (const v of message.subscriptionIds) {
      writer.uint32(10).string(v);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseSatUnsubsReq();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.subscriptionIds.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  create(base) {
    return SatUnsubsReq.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseSatUnsubsReq();
    message.subscriptionIds = object.subscriptionIds?.map((e) => e) || [];
    return message;
  }
};
messageTypeRegistry.set(SatUnsubsReq.$type, SatUnsubsReq);
function createBaseSatUnsubsResp() {
  return { $type: "Electric.Satellite.SatUnsubsResp" };
}
const SatUnsubsResp = {
  $type: "Electric.Satellite.SatUnsubsResp",
  encode(_, writer = _m0.Writer.create()) {
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseSatUnsubsResp();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  create(base) {
    return SatUnsubsResp.fromPartial(base ?? {});
  },
  fromPartial(_) {
    const message = createBaseSatUnsubsResp();
    return message;
  }
};
messageTypeRegistry.set(SatUnsubsResp.$type, SatUnsubsResp);
function createBaseSatShapeReq() {
  return { $type: "Electric.Satellite.SatShapeReq", requestId: "", shapeDefinition: void 0 };
}
const SatShapeReq = {
  $type: "Electric.Satellite.SatShapeReq",
  encode(message, writer = _m0.Writer.create()) {
    if (message.requestId !== "") {
      writer.uint32(10).string(message.requestId);
    }
    if (message.shapeDefinition !== void 0) {
      SatShapeDef.encode(message.shapeDefinition, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseSatShapeReq();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.requestId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.shapeDefinition = SatShapeDef.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  create(base) {
    return SatShapeReq.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseSatShapeReq();
    message.requestId = object.requestId ?? "";
    message.shapeDefinition = object.shapeDefinition !== void 0 && object.shapeDefinition !== null ? SatShapeDef.fromPartial(object.shapeDefinition) : void 0;
    return message;
  }
};
messageTypeRegistry.set(SatShapeReq.$type, SatShapeReq);
function createBaseSatShapeDef() {
  return { $type: "Electric.Satellite.SatShapeDef", selects: [] };
}
const SatShapeDef = {
  $type: "Electric.Satellite.SatShapeDef",
  encode(message, writer = _m0.Writer.create()) {
    for (const v of message.selects) {
      SatShapeDef_Select.encode(v, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseSatShapeDef();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.selects.push(SatShapeDef_Select.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  create(base) {
    return SatShapeDef.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseSatShapeDef();
    message.selects = object.selects?.map((e) => SatShapeDef_Select.fromPartial(e)) || [];
    return message;
  }
};
messageTypeRegistry.set(SatShapeDef.$type, SatShapeDef);
function createBaseSatShapeDef_Relation() {
  return { $type: "Electric.Satellite.SatShapeDef.Relation", foreignKey: [], select: void 0 };
}
const SatShapeDef_Relation = {
  $type: "Electric.Satellite.SatShapeDef.Relation",
  encode(message, writer = _m0.Writer.create()) {
    for (const v of message.foreignKey) {
      writer.uint32(10).string(v);
    }
    if (message.select !== void 0) {
      SatShapeDef_Select.encode(message.select, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseSatShapeDef_Relation();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.foreignKey.push(reader.string());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.select = SatShapeDef_Select.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  create(base) {
    return SatShapeDef_Relation.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseSatShapeDef_Relation();
    message.foreignKey = object.foreignKey?.map((e) => e) || [];
    message.select = object.select !== void 0 && object.select !== null ? SatShapeDef_Select.fromPartial(object.select) : void 0;
    return message;
  }
};
messageTypeRegistry.set(SatShapeDef_Relation.$type, SatShapeDef_Relation);
function createBaseSatShapeDef_Select() {
  return { $type: "Electric.Satellite.SatShapeDef.Select", tablename: "", where: "", include: [] };
}
const SatShapeDef_Select = {
  $type: "Electric.Satellite.SatShapeDef.Select",
  encode(message, writer = _m0.Writer.create()) {
    if (message.tablename !== "") {
      writer.uint32(10).string(message.tablename);
    }
    if (message.where !== "") {
      writer.uint32(18).string(message.where);
    }
    for (const v of message.include) {
      SatShapeDef_Relation.encode(v, writer.uint32(26).fork()).ldelim();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseSatShapeDef_Select();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.tablename = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.where = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.include.push(SatShapeDef_Relation.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  create(base) {
    return SatShapeDef_Select.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseSatShapeDef_Select();
    message.tablename = object.tablename ?? "";
    message.where = object.where ?? "";
    message.include = object.include?.map((e) => SatShapeDef_Relation.fromPartial(e)) || [];
    return message;
  }
};
messageTypeRegistry.set(SatShapeDef_Select.$type, SatShapeDef_Select);
function createBaseSatSubsDataError() {
  return {
    $type: "Electric.Satellite.SatSubsDataError",
    code: 0,
    message: "",
    subscriptionId: "",
    shapeRequestError: []
  };
}
const SatSubsDataError = {
  $type: "Electric.Satellite.SatSubsDataError",
  encode(message, writer = _m0.Writer.create()) {
    if (message.code !== 0) {
      writer.uint32(8).int32(message.code);
    }
    if (message.message !== "") {
      writer.uint32(18).string(message.message);
    }
    if (message.subscriptionId !== "") {
      writer.uint32(26).string(message.subscriptionId);
    }
    for (const v of message.shapeRequestError) {
      SatSubsDataError_ShapeReqError.encode(v, writer.uint32(34).fork()).ldelim();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseSatSubsDataError();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }
          message.code = reader.int32();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.message = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.subscriptionId = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }
          message.shapeRequestError.push(SatSubsDataError_ShapeReqError.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  create(base) {
    return SatSubsDataError.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseSatSubsDataError();
    message.code = object.code ?? 0;
    message.message = object.message ?? "";
    message.subscriptionId = object.subscriptionId ?? "";
    message.shapeRequestError = object.shapeRequestError?.map((e) => SatSubsDataError_ShapeReqError.fromPartial(e)) || [];
    return message;
  }
};
messageTypeRegistry.set(SatSubsDataError.$type, SatSubsDataError);
function createBaseSatSubsDataError_ShapeReqError() {
  return { $type: "Electric.Satellite.SatSubsDataError.ShapeReqError", code: 0, message: "", requestId: "" };
}
const SatSubsDataError_ShapeReqError = {
  $type: "Electric.Satellite.SatSubsDataError.ShapeReqError",
  encode(message, writer = _m0.Writer.create()) {
    if (message.code !== 0) {
      writer.uint32(8).int32(message.code);
    }
    if (message.message !== "") {
      writer.uint32(18).string(message.message);
    }
    if (message.requestId !== "") {
      writer.uint32(26).string(message.requestId);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseSatSubsDataError_ShapeReqError();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }
          message.code = reader.int32();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.message = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.requestId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  create(base) {
    return SatSubsDataError_ShapeReqError.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseSatSubsDataError_ShapeReqError();
    message.code = object.code ?? 0;
    message.message = object.message ?? "";
    message.requestId = object.requestId ?? "";
    return message;
  }
};
messageTypeRegistry.set(SatSubsDataError_ShapeReqError.$type, SatSubsDataError_ShapeReqError);
function createBaseSatSubsDataBegin() {
  return { $type: "Electric.Satellite.SatSubsDataBegin", subscriptionId: "", lsn: new Uint8Array(0) };
}
const SatSubsDataBegin = {
  $type: "Electric.Satellite.SatSubsDataBegin",
  encode(message, writer = _m0.Writer.create()) {
    if (message.subscriptionId !== "") {
      writer.uint32(10).string(message.subscriptionId);
    }
    if (message.lsn.length !== 0) {
      writer.uint32(18).bytes(message.lsn);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseSatSubsDataBegin();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.subscriptionId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.lsn = reader.bytes();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  create(base) {
    return SatSubsDataBegin.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseSatSubsDataBegin();
    message.subscriptionId = object.subscriptionId ?? "";
    message.lsn = object.lsn ?? new Uint8Array(0);
    return message;
  }
};
messageTypeRegistry.set(SatSubsDataBegin.$type, SatSubsDataBegin);
function createBaseSatSubsDataEnd() {
  return { $type: "Electric.Satellite.SatSubsDataEnd" };
}
const SatSubsDataEnd = {
  $type: "Electric.Satellite.SatSubsDataEnd",
  encode(_, writer = _m0.Writer.create()) {
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseSatSubsDataEnd();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  create(base) {
    return SatSubsDataEnd.fromPartial(base ?? {});
  },
  fromPartial(_) {
    const message = createBaseSatSubsDataEnd();
    return message;
  }
};
messageTypeRegistry.set(SatSubsDataEnd.$type, SatSubsDataEnd);
function createBaseSatUnsubsDataBegin() {
  return { $type: "Electric.Satellite.SatUnsubsDataBegin", subscriptionIds: [], lsn: new Uint8Array(0) };
}
const SatUnsubsDataBegin = {
  $type: "Electric.Satellite.SatUnsubsDataBegin",
  encode(message, writer = _m0.Writer.create()) {
    for (const v of message.subscriptionIds) {
      writer.uint32(10).string(v);
    }
    if (message.lsn.length !== 0) {
      writer.uint32(18).bytes(message.lsn);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseSatUnsubsDataBegin();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.subscriptionIds.push(reader.string());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.lsn = reader.bytes();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  create(base) {
    return SatUnsubsDataBegin.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseSatUnsubsDataBegin();
    message.subscriptionIds = object.subscriptionIds?.map((e) => e) || [];
    message.lsn = object.lsn ?? new Uint8Array(0);
    return message;
  }
};
messageTypeRegistry.set(SatUnsubsDataBegin.$type, SatUnsubsDataBegin);
function createBaseSatUnsubsDataEnd() {
  return { $type: "Electric.Satellite.SatUnsubsDataEnd" };
}
const SatUnsubsDataEnd = {
  $type: "Electric.Satellite.SatUnsubsDataEnd",
  encode(_, writer = _m0.Writer.create()) {
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseSatUnsubsDataEnd();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  create(base) {
    return SatUnsubsDataEnd.fromPartial(base ?? {});
  },
  fromPartial(_) {
    const message = createBaseSatUnsubsDataEnd();
    return message;
  }
};
messageTypeRegistry.set(SatUnsubsDataEnd.$type, SatUnsubsDataEnd);
function createBaseSatShapeDataBegin() {
  return { $type: "Electric.Satellite.SatShapeDataBegin", requestId: "", uuid: "" };
}
const SatShapeDataBegin = {
  $type: "Electric.Satellite.SatShapeDataBegin",
  encode(message, writer = _m0.Writer.create()) {
    if (message.requestId !== "") {
      writer.uint32(10).string(message.requestId);
    }
    if (message.uuid !== "") {
      writer.uint32(18).string(message.uuid);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseSatShapeDataBegin();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.requestId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.uuid = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  create(base) {
    return SatShapeDataBegin.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseSatShapeDataBegin();
    message.requestId = object.requestId ?? "";
    message.uuid = object.uuid ?? "";
    return message;
  }
};
messageTypeRegistry.set(SatShapeDataBegin.$type, SatShapeDataBegin);
function createBaseSatShapeDataEnd() {
  return { $type: "Electric.Satellite.SatShapeDataEnd" };
}
const SatShapeDataEnd = {
  $type: "Electric.Satellite.SatShapeDataEnd",
  encode(_, writer = _m0.Writer.create()) {
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseSatShapeDataEnd();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  create(base) {
    return SatShapeDataEnd.fromPartial(base ?? {});
  },
  fromPartial(_) {
    const message = createBaseSatShapeDataEnd();
    return message;
  }
};
messageTypeRegistry.set(SatShapeDataEnd.$type, SatShapeDataEnd);
const RootServiceName = "Electric.Satellite.Root";
class RootClientImpl {
  rpc;
  service;
  constructor(rpc, opts) {
    this.service = opts?.service || RootServiceName;
    this.rpc = rpc;
    this.authenticate = this.authenticate.bind(this);
    this.startReplication = this.startReplication.bind(this);
    this.stopReplication = this.stopReplication.bind(this);
    this.subscribe = this.subscribe.bind(this);
    this.unsubscribe = this.unsubscribe.bind(this);
  }
  authenticate(request) {
    const data = SatAuthReq.encode(request).finish();
    const promise = this.rpc.request(this.service, "authenticate", data);
    return promise.then((data2) => SatAuthResp.decode(_m0.Reader.create(data2)));
  }
  startReplication(request) {
    const data = SatInStartReplicationReq.encode(request).finish();
    const promise = this.rpc.request(this.service, "startReplication", data);
    return promise.then((data2) => SatInStartReplicationResp.decode(_m0.Reader.create(data2)));
  }
  stopReplication(request) {
    const data = SatInStopReplicationReq.encode(request).finish();
    const promise = this.rpc.request(this.service, "stopReplication", data);
    return promise.then((data2) => SatInStopReplicationResp.decode(_m0.Reader.create(data2)));
  }
  subscribe(request) {
    const data = SatSubsReq.encode(request).finish();
    const promise = this.rpc.request(this.service, "subscribe", data);
    return promise.then((data2) => SatSubsResp.decode(_m0.Reader.create(data2)));
  }
  unsubscribe(request) {
    const data = SatUnsubsReq.encode(request).finish();
    const promise = this.rpc.request(this.service, "unsubscribe", data);
    return promise.then((data2) => SatUnsubsResp.decode(_m0.Reader.create(data2)));
  }
}
const ClientRootServiceName = "Electric.Satellite.ClientRoot";
class ClientRootClientImpl {
  rpc;
  service;
  constructor(rpc, opts) {
    this.service = opts?.service || ClientRootServiceName;
    this.rpc = rpc;
    this.startReplication = this.startReplication.bind(this);
    this.stopReplication = this.stopReplication.bind(this);
  }
  startReplication(request) {
    const data = SatInStartReplicationReq.encode(request).finish();
    const promise = this.rpc.request(this.service, "startReplication", data);
    return promise.then((data2) => SatInStartReplicationResp.decode(_m0.Reader.create(data2)));
  }
  stopReplication(request) {
    const data = SatInStopReplicationReq.encode(request).finish();
    const promise = this.rpc.request(this.service, "stopReplication", data);
    return promise.then((data2) => SatInStopReplicationResp.decode(_m0.Reader.create(data2)));
  }
}
if (_m0.util.Long !== Long) {
  _m0.util.Long = Long;
  _m0.configure();
}
export {
  ClientRootClientImpl,
  ClientRootServiceName,
  RootClientImpl,
  RootServiceName,
  SatAuthHeader,
  SatAuthHeaderPair,
  SatAuthReq,
  SatAuthResp,
  SatErrorResp,
  SatErrorResp_ErrorCode,
  SatInStartReplicationReq,
  SatInStartReplicationReq_Dialect,
  SatInStartReplicationReq_Option,
  SatInStartReplicationResp,
  SatInStartReplicationResp_ReplicationError,
  SatInStartReplicationResp_ReplicationError_Code,
  SatInStopReplicationReq,
  SatInStopReplicationResp,
  SatOpAdditionalBegin,
  SatOpAdditionalCommit,
  SatOpBegin,
  SatOpCommit,
  SatOpCompensation,
  SatOpDelete,
  SatOpGone,
  SatOpInsert,
  SatOpLog,
  SatOpLogAck,
  SatOpMigrate,
  SatOpMigrate_Column,
  SatOpMigrate_EnumType,
  SatOpMigrate_ForeignKey,
  SatOpMigrate_PgColumnType,
  SatOpMigrate_Stmt,
  SatOpMigrate_Table,
  SatOpMigrate_Type,
  SatOpRow,
  SatOpUpdate,
  SatRelation,
  SatRelationColumn,
  SatRelation_RelationType,
  SatRpcRequest,
  SatRpcResponse,
  SatShapeDataBegin,
  SatShapeDataEnd,
  SatShapeDef,
  SatShapeDef_Relation,
  SatShapeDef_Select,
  SatShapeReq,
  SatSubsDataBegin,
  SatSubsDataEnd,
  SatSubsDataError,
  SatSubsDataError_Code,
  SatSubsDataError_ShapeReqError,
  SatSubsDataError_ShapeReqError_Code,
  SatSubsReq,
  SatSubsResp,
  SatSubsResp_SatSubsError,
  SatSubsResp_SatSubsError_Code,
  SatSubsResp_SatSubsError_ShapeReqError,
  SatSubsResp_SatSubsError_ShapeReqError_Code,
  SatTransOp,
  SatUnsubsDataBegin,
  SatUnsubsDataEnd,
  SatUnsubsReq,
  SatUnsubsResp,
  protobufPackage
};
//# sourceMappingURL=satellite.js.map