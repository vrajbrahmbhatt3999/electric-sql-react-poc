import Long from "long";
import _m0 from "protobufjs/minimal.js";
export declare const protobufPackage = "Electric.Satellite";
/**
 * This file defines protobuf protocol for Satellite <> Electric replication
 *
 * In this document there is a notation of the Client/Server and
 * Producer/Consumer which are used to annotate messages.
 *
 * This protocol uses a custom RPC implementation that allows bidirectional RPC calls (usually the client
 * calls the server, but the server makes some RPC calls to the client too) and non-RPC messages.
 *
 * Any RPC call should be done as an `SatRpcRequest` message, with `message` field being a method-appropriate
 * encoded message from this protocol. The answering side should then respond with `SatRpcResponse` with the same
 * method and request id. If RPC call fully failed, the `error` field will be filled. Otherwise, the message field
 * will be field, which may or may not have its own internal error fields.
 *
 * Any message not wrapped in rpc request or response should not warrant a direct response from the other side.
 */
export declare enum SatAuthHeader {
    /** UNSPECIFIED - Required by the Protobuf spec. */
    UNSPECIFIED = 0,
    UNRECOGNIZED = -1
}
/** RPC request transport message, must be used to implement service RPC calls in the protocol */
export interface SatRpcRequest {
    $type: "Electric.Satellite.SatRpcRequest";
    method: string;
    requestId: number;
    message: Uint8Array;
}
/** RPC response transport message, must be used to implement service RPC calls in the protocol */
export interface SatRpcResponse {
    $type: "Electric.Satellite.SatRpcResponse";
    method: string;
    requestId: number;
    message?: Uint8Array | undefined;
    error?: SatErrorResp | undefined;
}
export interface SatAuthHeaderPair {
    $type: "Electric.Satellite.SatAuthHeaderPair";
    key: SatAuthHeader;
    value: string;
}
/**
 * (Client) Auth request
 *
 * Client request is the first request that the client should send before
 * executing any other request.
 */
export interface SatAuthReq {
    $type: "Electric.Satellite.SatAuthReq";
    /**
     * Identity of the Satellite application. Is expected to be something like
     * UUID. Required field
     */
    id: string;
    /** Authentication token, auth method specific, required */
    token: string;
    /** Headers, required */
    headers: SatAuthHeaderPair[];
}
/** (Server) Auth response */
export interface SatAuthResp {
    $type: "Electric.Satellite.SatAuthResp";
    /** Identity of the Server */
    id: string;
    /** Headers optional */
    headers: SatAuthHeaderPair[];
}
/**
 * General purpose error message, that could be sent to any request from any
 * side. FIXME: We might want to separate that into Client/Server parts.
 */
export interface SatErrorResp {
    $type: "Electric.Satellite.SatErrorResp";
    errorType: SatErrorResp_ErrorCode;
    /** lsn of the txn that caused the problem, if available */
    lsn?: Uint8Array | undefined;
    /** human readable explanation of what went wrong */
    message?: string | undefined;
}
export declare enum SatErrorResp_ErrorCode {
    INTERNAL = 0,
    AUTH_REQUIRED = 1,
    AUTH_FAILED = 2,
    REPLICATION_FAILED = 3,
    INVALID_REQUEST = 4,
    PROTO_VSN_MISMATCH = 5,
    SCHEMA_VSN_MISMATCH = 6,
    UNRECOGNIZED = -1
}
/** (Consumer) Starts replication stream from producer to consumer */
export interface SatInStartReplicationReq {
    $type: "Electric.Satellite.SatInStartReplicationReq";
    /** LSN position of the log on the producer side */
    lsn: Uint8Array;
    options: SatInStartReplicationReq_Option[];
    /** the subscriptions identifiers the client wants to resume subscription */
    subscriptionIds: string[];
    /** The version of the most recent migration seen by the client. */
    schemaVersion?: string | undefined;
    /**
     * List of transaction IDs for which the client
     * observed additional data before disconnect
     */
    observedTransactionData: Long[];
    /**
     * The SQL dialect used by the client
     * Defaults to SQLite if not specified
     */
    sqlDialect?: SatInStartReplicationReq_Dialect | undefined;
    /** List of subscription IDs for which the client observed a GONE batch after unsubscribing */
    observedGoneBatch: string[];
}
export declare enum SatInStartReplicationReq_Option {
    /** NONE - Required by the Protobuf spec. */
    NONE = 0,
    UNRECOGNIZED = -1
}
export declare enum SatInStartReplicationReq_Dialect {
    SQLITE = 0,
    POSTGRES = 1,
    UNRECOGNIZED = -1
}
/** (Producer) The result of the start replication requests */
export interface SatInStartReplicationResp {
    $type: "Electric.Satellite.SatInStartReplicationResp";
    /** returned in case replication fails to start */
    err?: SatInStartReplicationResp_ReplicationError | undefined;
    /** How many unacked transactions the producer is willing to send */
    unackedWindowSize?: number | undefined;
}
/** Error returned by the Producer when replication fails to start */
export interface SatInStartReplicationResp_ReplicationError {
    $type: "Electric.Satellite.SatInStartReplicationResp.ReplicationError";
    /** error code */
    code: SatInStartReplicationResp_ReplicationError_Code;
    /** a human-readable description of the error */
    message: string;
}
/** error code enum */
export declare enum SatInStartReplicationResp_ReplicationError_Code {
    /** CODE_UNSPECIFIED - Required by the Protobuf spec. */
    CODE_UNSPECIFIED = 0,
    /** BEHIND_WINDOW - requested LSN is behind the current replication window */
    BEHIND_WINDOW = 1,
    /** INVALID_POSITION - e.g. jumping ahead of the subscriptions cursor */
    INVALID_POSITION = 2,
    /** SUBSCRIPTION_NOT_FOUND - requested subscription not found */
    SUBSCRIPTION_NOT_FOUND = 3,
    /** MALFORMED_LSN - the replication request has malformed LSN */
    MALFORMED_LSN = 4,
    /**
     * UNKNOWN_SCHEMA_VSN - consumer requested replication at schema version that is
     * not known to the producer
     */
    UNKNOWN_SCHEMA_VSN = 5,
    UNRECOGNIZED = -1
}
/** (Consumer) Request to stop replication */
export interface SatInStopReplicationReq {
    $type: "Electric.Satellite.SatInStopReplicationReq";
}
/** (Producer) Acknowledgement that replication has been stopped */
export interface SatInStopReplicationResp {
    $type: "Electric.Satellite.SatInStopReplicationResp";
}
export interface SatRelationColumn {
    $type: "Electric.Satellite.SatRelationColumn";
    name: string;
    type: string;
    primaryKey: boolean;
    isNullable: boolean;
}
export interface SatRelation {
    $type: "Electric.Satellite.SatRelation";
    schemaName: string;
    tableType: SatRelation_RelationType;
    tableName: string;
    /**
     * Volatile identity defined at the start of the replication protocol may or
     * may not be persisted is used in SatTransOp operations, to indicate
     * relation the operation is working on.
     */
    relationId: number;
    columns: SatRelationColumn[];
}
export declare enum SatRelation_RelationType {
    TABLE = 0,
    INDEX = 1,
    VIEW = 2,
    TRIGGER = 3,
    UNRECOGNIZED = -1
}
/**
 * (Producer) Type defines replication messages, that flow from Producer once
 * the replication is established. Message contains operations log. Operations
 * should go in the LSN order. Begin and Commit operations corresponds to
 * transaction boundaries.
 * Transactions are guranteed not to be mixed, and will follow one by one.
 */
export interface SatOpLog {
    $type: "Electric.Satellite.SatOpLog";
    ops: SatTransOp[];
}
/**
 * Acknowledgement message that the transaction with given LSN has been incorporated by the client.
 * Sent by the consumer and used by the producer to regulate garbage collection & backpressure.
 * Clients that don't send it after a certain number of transactions will be considered non-responsive
 * and the producer may choose to pause sending further information to such a client.
 *
 * It's also important the the producer may deny connection requests from clients who try to connect with
 * LSN number less than the most recently acknowledged one, as the acknowledgement may have caused a
 * cleanup of information for this client before this point in time.
 */
export interface SatOpLogAck {
    $type: "Electric.Satellite.SatOpLogAck";
    /** Timestamp on the sending side */
    ackTimestamp: Long;
    /** LSN of the most recent incorporated transaction */
    lsn: Uint8Array;
    /** Transaction ID of the most recent incorporated transaction */
    transactionId: Long;
    /** Subscription IDs for data that was received immediately after this transaction */
    subscriptionIds: string[];
    /** Transaction IDs for which additional data was received immediately after this transaction */
    additionalDataSourceIds: Long[];
    /** Subscription IDs for GONE batches received at this LSN */
    goneSubscriptionIds: string[];
}
/**
 * (Producer) Single operation, should be only send as part of the SatOplog
 * message
 */
export interface SatTransOp {
    $type: "Electric.Satellite.SatTransOp";
    begin?: SatOpBegin | undefined;
    commit?: SatOpCommit | undefined;
    update?: SatOpUpdate | undefined;
    insert?: SatOpInsert | undefined;
    delete?: SatOpDelete | undefined;
    migrate?: SatOpMigrate | undefined;
    compensation?: SatOpCompensation | undefined;
    gone?: SatOpGone | undefined;
    additionalBegin?: SatOpAdditionalBegin | undefined;
    additionalCommit?: SatOpAdditionalCommit | undefined;
}
/**
 * (Producer) Replication message that indicates transaction boundaries
 * should be only send as payload in the SatTransOp message
 */
export interface SatOpBegin {
    $type: "Electric.Satellite.SatOpBegin";
    commitTimestamp: Long;
    /**
     * Lsn position that points to first data segment of transaction in the
     * WAL
     */
    lsn: Uint8Array;
    /**
     * Globally unique id of the source that transaction originated from. For
     * data coming from Satellite this field is ignored. For data coming from
     * Electric this field can be used to deduce if the incoming transaction
     * originated on this Satellite instance or not.
     */
    origin?: string | undefined;
    /** does this transaction contain ddl statements? */
    isMigration: boolean;
    /**
     * If not 0, a transient reference for additional data pseudo-transaction
     * that will be sent at a later point in the stream. It may be shared by multiple transactions
     * sent by the server at the same time, because this additional data will be queried at the same
     * time. Duplicated on SatOpCommit.
     */
    additionalDataRef: Long;
    /** Unique transaction ID, sent only by the server. No guarantees of monotonicity. */
    transactionId?: Long | undefined;
}
/**
 * (Producer) Replication message that indicates a transaction boundary for additional data that existed on the server
 * but the client can now see
 */
export interface SatOpAdditionalBegin {
    $type: "Electric.Satellite.SatOpAdditionalBegin";
    ref: Long;
}
/**
 * (Producer) Replication message that indicates transaction boundaries
 * should be only send as payload in the SatTransOp message
 */
export interface SatOpCommit {
    $type: "Electric.Satellite.SatOpCommit";
    commitTimestamp: Long;
    lsn: Uint8Array;
    /**
     * If not 0, a transient reference for additional data pseudo-transaction
     * that will be sent at a later point in the stream. It may be shared by multiple transactions
     * sent by the server at the same time, because this additional data will be queried at the same
     * time. Duplicated on SatOpBegin.
     */
    additionalDataRef: Long;
    /** Unique transaction ID, sent only by the server. No guarantees of monotonicity. */
    transactionId?: Long | undefined;
}
export interface SatOpAdditionalCommit {
    $type: "Electric.Satellite.SatOpAdditionalCommit";
    ref: Long;
}
/**
 * (Producer) Data manipulation message, that only should be part of the
 * SatTransOp message
 */
export interface SatOpInsert {
    $type: "Electric.Satellite.SatOpInsert";
    relationId: number;
    rowData: SatOpRow | undefined;
    /** dependency information */
    tags: string[];
}
/**
 * (Producer) Data manipulation message, that only should be part of the
 * SatTransOp message
 */
export interface SatOpUpdate {
    $type: "Electric.Satellite.SatOpUpdate";
    relationId: number;
    rowData: SatOpRow | undefined;
    oldRowData: SatOpRow | undefined;
    /** dependency information */
    tags: string[];
}
/**
 * (Producer) Data manipulation message, that only should be part of the
 * SatTransOp message
 */
export interface SatOpDelete {
    $type: "Electric.Satellite.SatOpDelete";
    relationId: number;
    oldRowData: SatOpRow | undefined;
    /** dependency information */
    tags: string[];
}
export interface SatOpCompensation {
    $type: "Electric.Satellite.SatOpCompensation";
    relationId: number;
    pkData: SatOpRow | undefined;
    /** dependency information */
    tags: string[];
}
export interface SatOpGone {
    $type: "Electric.Satellite.SatOpGone";
    relationId: number;
    pkData: SatOpRow | undefined;
}
/** Message that corresponds to the single row. */
export interface SatOpRow {
    $type: "Electric.Satellite.SatOpRow";
    nullsBitmask: Uint8Array;
    /**
     * values may contain binaries with size 0 for NULLs and empty values
     * check nulls_bitmask to differentiate between the two
     */
    values: Uint8Array[];
}
/**
 * A migration message, originating in Postgres, captured via event triggers,
 * propagated to electric, converted from postgres to the equivalent sqlite
 * statement and inserted into the replication stream
 *
 * Each migration message includes the sql strings to execute on the satellite
 * client as well as metadata information about the resulting structure of the
 * changed tables.
 */
export interface SatOpMigrate {
    $type: "Electric.Satellite.SatOpMigrate";
    /**
     * the migration version as specified by the developer and put into
     * the postgresql migration as an electric function call
     */
    version: string;
    /**
     * A list of SQL DDL statements to apply, translated from Postgres to SQLite dialect.
     *
     * The migration machinery converts an `ALTER TABLE action1, action2, action3;`
     * query into a set of 3: `ALTER TABLE action1; ALTER TABLE action2,` etc
     * so we need to support 1+ statements for every migration event.
     *
     * There is an exception for enum types. Since SQLite does not have a matching concept,
     * the original Postgres DDL statement `CREATE TYPE ... AS ENUM (...)` is included as is,
     * without translation.
     */
    stmts: SatOpMigrate_Stmt[];
    /**
     * The resulting table definition after applying these migrations
     * (a DDL statement can only affect one table at a time).
     */
    table?: SatOpMigrate_Table | undefined;
    /** This field is set if stmts includes a single item which is an enum type definition. */
    enumType?: SatOpMigrate_EnumType | undefined;
}
export declare enum SatOpMigrate_Type {
    CREATE_TABLE = 0,
    CREATE_INDEX = 1,
    CREATE_ENUM_TYPE = 2,
    ALTER_ADD_COLUMN = 6,
    UNRECOGNIZED = -1
}
export interface SatOpMigrate_Stmt {
    $type: "Electric.Satellite.SatOpMigrate.Stmt";
    type: SatOpMigrate_Type;
    sql: string;
}
export interface SatOpMigrate_PgColumnType {
    $type: "Electric.Satellite.SatOpMigrate.PgColumnType";
    /** the pg type name, e.g. int4, char */
    name: string;
    /**
     * array dimensions, or [] for scalar types
     * e.g. for a column declared as int4[][3], size = [-1, 3]
     */
    array: number[];
    /** any size information, e.g. for varchar(SIZE) or [] for no size */
    size: number[];
}
/** reserved 2; */
export interface SatOpMigrate_Column {
    $type: "Electric.Satellite.SatOpMigrate.Column";
    name: string;
    /**
     * deprecated
     * leaving it here to avoid breaking TypeScript tests that have hard-coded,
     * base64-encoded SatOpMigrate messages.
     */
    sqliteType: string;
    pgType: SatOpMigrate_PgColumnType | undefined;
}
export interface SatOpMigrate_ForeignKey {
    $type: "Electric.Satellite.SatOpMigrate.ForeignKey";
    /** the columns in the child table that point to the parent */
    fkCols: string[];
    /** the parent table */
    pkTable: string;
    /** the cols in the parent table */
    pkCols: string[];
}
export interface SatOpMigrate_Table {
    $type: "Electric.Satellite.SatOpMigrate.Table";
    name: string;
    columns: SatOpMigrate_Column[];
    fks: SatOpMigrate_ForeignKey[];
    pks: string[];
}
export interface SatOpMigrate_EnumType {
    $type: "Electric.Satellite.SatOpMigrate.EnumType";
    name: string;
    values: string[];
}
/** (Consumer) Request for new subscriptions */
export interface SatSubsReq {
    $type: "Electric.Satellite.SatSubsReq";
    /** a client-generated identifier to track the subscription */
    subscriptionId: string;
    /** Shape requests */
    shapeRequests: SatShapeReq[];
}
/** (Producer) Response for a subscription request */
export interface SatSubsResp {
    $type: "Electric.Satellite.SatSubsResp";
    /** identifier of the subscription this response refers to */
    subscriptionId: string;
    /** the error details if the request failed */
    err?: SatSubsResp_SatSubsError | undefined;
}
/**
 * Error message returned by the Producer when it encounters
 * an error handling subscription request
 */
export interface SatSubsResp_SatSubsError {
    $type: "Electric.Satellite.SatSubsResp.SatSubsError";
    /** error code */
    code: SatSubsResp_SatSubsError_Code;
    /** A human-readable description of the error */
    message: string;
    /** Details of the shape request error */
    shapeRequestError: SatSubsResp_SatSubsError_ShapeReqError[];
}
/** error code enum */
export declare enum SatSubsResp_SatSubsError_Code {
    /** CODE_UNSPECIFIED - Required by the Protobuf spec. */
    CODE_UNSPECIFIED = 0,
    /** SUBSCRIPTION_ID_ALREADY_EXISTS - DUPLICATE IDENTIFIER */
    SUBSCRIPTION_ID_ALREADY_EXISTS = 1,
    /** SHAPE_REQUEST_ERROR - Error requesting shape */
    SHAPE_REQUEST_ERROR = 2,
    UNRECOGNIZED = -1
}
/** Shape request error */
export interface SatSubsResp_SatSubsError_ShapeReqError {
    $type: "Electric.Satellite.SatSubsResp.SatSubsError.ShapeReqError";
    /** error code */
    code: SatSubsResp_SatSubsError_ShapeReqError_Code;
    /** a human-readable description of the error */
    message: string;
    /** the shape request identifier that this error refers to */
    requestId: string;
}
/** error code enum */
export declare enum SatSubsResp_SatSubsError_ShapeReqError_Code {
    /** CODE_UNSPECIFIED - Required by the Protobuf spec. */
    CODE_UNSPECIFIED = 0,
    /** TABLE_NOT_FOUND - Table does not exist in current schema version */
    TABLE_NOT_FOUND = 1,
    /** REFERENTIAL_INTEGRITY_VIOLATION - Requested shape does not maintain referential integirty */
    REFERENTIAL_INTEGRITY_VIOLATION = 2,
    /** EMPTY_SHAPE_DEFINITION - The shape request contains an empty shape definition */
    EMPTY_SHAPE_DEFINITION = 3,
    /** DUPLICATE_TABLE_IN_SHAPE_DEFINITION - Attempt to request the same table more than once in one shape */
    DUPLICATE_TABLE_IN_SHAPE_DEFINITION = 4,
    /** INVALID_WHERE_CLAUSE - Malformed WHERE clause on a table */
    INVALID_WHERE_CLAUSE = 5,
    /** INVALID_INCLUDE_TREE - Specified include tree does not match known schema */
    INVALID_INCLUDE_TREE = 6,
    UNRECOGNIZED = -1
}
/** (Consumer) Request to cancel subscriptions */
export interface SatUnsubsReq {
    $type: "Electric.Satellite.SatUnsubsReq";
    /** Identifiers of the subscriptions */
    subscriptionIds: string[];
}
/** (Producer) Acknowledgment that the subscriptions were cancelled */
export interface SatUnsubsResp {
    $type: "Electric.Satellite.SatUnsubsResp";
}
/** Shape request */
export interface SatShapeReq {
    $type: "Electric.Satellite.SatShapeReq";
    /** Identifier of the request */
    requestId: string;
    /** The shape definition */
    shapeDefinition: SatShapeDef | undefined;
}
/** Top-level structure of a shape definition */
export interface SatShapeDef {
    $type: "Electric.Satellite.SatShapeDef";
    /** Selects for the Shape definition */
    selects: SatShapeDef_Select[];
}
export interface SatShapeDef_Relation {
    $type: "Electric.Satellite.SatShapeDef.Relation";
    foreignKey: string[];
    select: SatShapeDef_Select | undefined;
}
/** Select structure */
export interface SatShapeDef_Select {
    $type: "Electric.Satellite.SatShapeDef.Select";
    /** table name for this select */
    tablename: string;
    where: string;
    include: SatShapeDef_Relation[];
}
/**
 * Error message returned by the Producer when it encounters
 * an error handling subscription data
 */
export interface SatSubsDataError {
    $type: "Electric.Satellite.SatSubsDataError";
    /** error code */
    code: SatSubsDataError_Code;
    /** A human-readable description of the error */
    message: string;
    /** Subscription identifier this error refers to */
    subscriptionId: string;
    /** Details of the shape request error */
    shapeRequestError: SatSubsDataError_ShapeReqError[];
}
/** error code enum */
export declare enum SatSubsDataError_Code {
    /** CODE_UNSPECIFIED - Required by the Protobuf spec. */
    CODE_UNSPECIFIED = 0,
    /** SHAPE_DELIVERY_ERROR - Error delivering shape */
    SHAPE_DELIVERY_ERROR = 1,
    UNRECOGNIZED = -1
}
/** Shape request error */
export interface SatSubsDataError_ShapeReqError {
    $type: "Electric.Satellite.SatSubsDataError.ShapeReqError";
    /** error code */
    code: SatSubsDataError_ShapeReqError_Code;
    /** a human-readable description of the error */
    message: string;
    /** the shape request identifier that this error refers to */
    requestId: string;
}
/** error code enum */
export declare enum SatSubsDataError_ShapeReqError_Code {
    /** CODE_UNSPECIFIED - Required by the Protobuf spec. */
    CODE_UNSPECIFIED = 0,
    /** SHAPE_SIZE_LIMIT_EXCEEDED - Requested shape exceed the maximum allowed shape size */
    SHAPE_SIZE_LIMIT_EXCEEDED = 1,
    UNRECOGNIZED = -1
}
/** Begin delimiter for the incoming subscription data */
export interface SatSubsDataBegin {
    $type: "Electric.Satellite.SatSubsDataBegin";
    /** Identifier of the subscription */
    subscriptionId: string;
    /** LSN at which this data is being sent. May be a duplicate of a transaction that was sent immediately before. */
    lsn: Uint8Array;
}
/** End delimiter for the incoming subscription data */
export interface SatSubsDataEnd {
    $type: "Electric.Satellite.SatSubsDataEnd";
}
/** Begin delimiter for the incoming subscription data */
export interface SatUnsubsDataBegin {
    $type: "Electric.Satellite.SatUnsubsDataBegin";
    /** Identifier of the subscriptions that were handled as unsubbed */
    subscriptionIds: string[];
    /** LSN at which this data is being sent. May be a duplicate of a transaction that was sent immediately before. */
    lsn: Uint8Array;
}
/** End delimiter for the incoming subscription data */
export interface SatUnsubsDataEnd {
    $type: "Electric.Satellite.SatUnsubsDataEnd";
}
/** Begin delimiter for the initial shape data */
export interface SatShapeDataBegin {
    $type: "Electric.Satellite.SatShapeDataBegin";
    /** Identifier of the request */
    requestId: string;
    /** The UUID of the shape on the Producer */
    uuid: string;
}
/** End delimiter for the initial shape data */
export interface SatShapeDataEnd {
    $type: "Electric.Satellite.SatShapeDataEnd";
}
export declare const SatRpcRequest: {
    $type: "Electric.Satellite.SatRpcRequest";
    encode(message: SatRpcRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): SatRpcRequest;
    create<I extends {
        method?: string | undefined;
        requestId?: number | undefined;
        message?: Uint8Array | undefined;
    } & {
        method?: string | undefined;
        requestId?: number | undefined;
        message?: Uint8Array | undefined;
    } & { [K in Exclude<keyof I, "$type" | "method" | "requestId" | "message">]: never; }>(base?: I): SatRpcRequest;
    fromPartial<I_1 extends {
        method?: string | undefined;
        requestId?: number | undefined;
        message?: Uint8Array | undefined;
    } & {
        method?: string | undefined;
        requestId?: number | undefined;
        message?: Uint8Array | undefined;
    } & { [K_1 in Exclude<keyof I_1, "$type" | "method" | "requestId" | "message">]: never; }>(object: I_1): SatRpcRequest;
};
export declare const SatRpcResponse: {
    $type: "Electric.Satellite.SatRpcResponse";
    encode(message: SatRpcResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): SatRpcResponse;
    create<I extends {
        method?: string | undefined;
        requestId?: number | undefined;
        message?: Uint8Array | undefined;
        error?: {
            message?: string | undefined;
            errorType?: SatErrorResp_ErrorCode | undefined;
            lsn?: Uint8Array | undefined;
        } | undefined;
    } & {
        method?: string | undefined;
        requestId?: number | undefined;
        message?: Uint8Array | undefined;
        error?: ({
            message?: string | undefined;
            errorType?: SatErrorResp_ErrorCode | undefined;
            lsn?: Uint8Array | undefined;
        } & {
            message?: string | undefined;
            errorType?: SatErrorResp_ErrorCode | undefined;
            lsn?: Uint8Array | undefined;
        } & { [K in Exclude<keyof I["error"], "$type" | "message" | "errorType" | "lsn">]: never; }) | undefined;
    } & { [K_1 in Exclude<keyof I, "$type" | "method" | "requestId" | "message" | "error">]: never; }>(base?: I): SatRpcResponse;
    fromPartial<I_1 extends {
        method?: string | undefined;
        requestId?: number | undefined;
        message?: Uint8Array | undefined;
        error?: {
            message?: string | undefined;
            errorType?: SatErrorResp_ErrorCode | undefined;
            lsn?: Uint8Array | undefined;
        } | undefined;
    } & {
        method?: string | undefined;
        requestId?: number | undefined;
        message?: Uint8Array | undefined;
        error?: ({
            message?: string | undefined;
            errorType?: SatErrorResp_ErrorCode | undefined;
            lsn?: Uint8Array | undefined;
        } & {
            message?: string | undefined;
            errorType?: SatErrorResp_ErrorCode | undefined;
            lsn?: Uint8Array | undefined;
        } & { [K_2 in Exclude<keyof I_1["error"], "$type" | "message" | "errorType" | "lsn">]: never; }) | undefined;
    } & { [K_3 in Exclude<keyof I_1, "$type" | "method" | "requestId" | "message" | "error">]: never; }>(object: I_1): SatRpcResponse;
};
export declare const SatAuthHeaderPair: {
    $type: "Electric.Satellite.SatAuthHeaderPair";
    encode(message: SatAuthHeaderPair, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): SatAuthHeaderPair;
    create<I extends {
        key?: SatAuthHeader | undefined;
        value?: string | undefined;
    } & {
        key?: SatAuthHeader | undefined;
        value?: string | undefined;
    } & { [K in Exclude<keyof I, "$type" | "key" | "value">]: never; }>(base?: I): SatAuthHeaderPair;
    fromPartial<I_1 extends {
        key?: SatAuthHeader | undefined;
        value?: string | undefined;
    } & {
        key?: SatAuthHeader | undefined;
        value?: string | undefined;
    } & { [K_1 in Exclude<keyof I_1, "$type" | "key" | "value">]: never; }>(object: I_1): SatAuthHeaderPair;
};
export declare const SatAuthReq: {
    $type: "Electric.Satellite.SatAuthReq";
    encode(message: SatAuthReq, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): SatAuthReq;
    create<I extends {
        id?: string | undefined;
        token?: string | undefined;
        headers?: {
            key?: SatAuthHeader | undefined;
            value?: string | undefined;
        }[] | undefined;
    } & {
        id?: string | undefined;
        token?: string | undefined;
        headers?: ({
            key?: SatAuthHeader | undefined;
            value?: string | undefined;
        }[] & ({
            key?: SatAuthHeader | undefined;
            value?: string | undefined;
        } & {
            key?: SatAuthHeader | undefined;
            value?: string | undefined;
        } & { [K in Exclude<keyof I["headers"][number], "$type" | "key" | "value">]: never; })[] & { [K_1 in Exclude<keyof I["headers"], "$type" | keyof {
            key?: SatAuthHeader | undefined;
            value?: string | undefined;
        }[]>]: never; }) | undefined;
    } & { [K_2 in Exclude<keyof I, "$type" | "id" | "token" | "headers">]: never; }>(base?: I): SatAuthReq;
    fromPartial<I_1 extends {
        id?: string | undefined;
        token?: string | undefined;
        headers?: {
            key?: SatAuthHeader | undefined;
            value?: string | undefined;
        }[] | undefined;
    } & {
        id?: string | undefined;
        token?: string | undefined;
        headers?: ({
            key?: SatAuthHeader | undefined;
            value?: string | undefined;
        }[] & ({
            key?: SatAuthHeader | undefined;
            value?: string | undefined;
        } & {
            key?: SatAuthHeader | undefined;
            value?: string | undefined;
        } & { [K_3 in Exclude<keyof I_1["headers"][number], "$type" | "key" | "value">]: never; })[] & { [K_4 in Exclude<keyof I_1["headers"], "$type" | keyof {
            key?: SatAuthHeader | undefined;
            value?: string | undefined;
        }[]>]: never; }) | undefined;
    } & { [K_5 in Exclude<keyof I_1, "$type" | "id" | "token" | "headers">]: never; }>(object: I_1): SatAuthReq;
};
export declare const SatAuthResp: {
    $type: "Electric.Satellite.SatAuthResp";
    encode(message: SatAuthResp, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): SatAuthResp;
    create<I extends {
        id?: string | undefined;
        headers?: {
            key?: SatAuthHeader | undefined;
            value?: string | undefined;
        }[] | undefined;
    } & {
        id?: string | undefined;
        headers?: ({
            key?: SatAuthHeader | undefined;
            value?: string | undefined;
        }[] & ({
            key?: SatAuthHeader | undefined;
            value?: string | undefined;
        } & {
            key?: SatAuthHeader | undefined;
            value?: string | undefined;
        } & { [K in Exclude<keyof I["headers"][number], "$type" | "key" | "value">]: never; })[] & { [K_1 in Exclude<keyof I["headers"], "$type" | keyof {
            key?: SatAuthHeader | undefined;
            value?: string | undefined;
        }[]>]: never; }) | undefined;
    } & { [K_2 in Exclude<keyof I, "$type" | "id" | "headers">]: never; }>(base?: I): SatAuthResp;
    fromPartial<I_1 extends {
        id?: string | undefined;
        headers?: {
            key?: SatAuthHeader | undefined;
            value?: string | undefined;
        }[] | undefined;
    } & {
        id?: string | undefined;
        headers?: ({
            key?: SatAuthHeader | undefined;
            value?: string | undefined;
        }[] & ({
            key?: SatAuthHeader | undefined;
            value?: string | undefined;
        } & {
            key?: SatAuthHeader | undefined;
            value?: string | undefined;
        } & { [K_3 in Exclude<keyof I_1["headers"][number], "$type" | "key" | "value">]: never; })[] & { [K_4 in Exclude<keyof I_1["headers"], "$type" | keyof {
            key?: SatAuthHeader | undefined;
            value?: string | undefined;
        }[]>]: never; }) | undefined;
    } & { [K_5 in Exclude<keyof I_1, "$type" | "id" | "headers">]: never; }>(object: I_1): SatAuthResp;
};
export declare const SatErrorResp: {
    $type: "Electric.Satellite.SatErrorResp";
    encode(message: SatErrorResp, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): SatErrorResp;
    create<I extends {
        message?: string | undefined;
        errorType?: SatErrorResp_ErrorCode | undefined;
        lsn?: Uint8Array | undefined;
    } & {
        message?: string | undefined;
        errorType?: SatErrorResp_ErrorCode | undefined;
        lsn?: Uint8Array | undefined;
    } & { [K in Exclude<keyof I, "$type" | "message" | "errorType" | "lsn">]: never; }>(base?: I): SatErrorResp;
    fromPartial<I_1 extends {
        message?: string | undefined;
        errorType?: SatErrorResp_ErrorCode | undefined;
        lsn?: Uint8Array | undefined;
    } & {
        message?: string | undefined;
        errorType?: SatErrorResp_ErrorCode | undefined;
        lsn?: Uint8Array | undefined;
    } & { [K_1 in Exclude<keyof I_1, "$type" | "message" | "errorType" | "lsn">]: never; }>(object: I_1): SatErrorResp;
};
export declare const SatInStartReplicationReq: {
    $type: "Electric.Satellite.SatInStartReplicationReq";
    encode(message: SatInStartReplicationReq, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): SatInStartReplicationReq;
    create<I extends {
        lsn?: Uint8Array | undefined;
        options?: SatInStartReplicationReq_Option[] | undefined;
        subscriptionIds?: string[] | undefined;
        schemaVersion?: string | undefined;
        observedTransactionData?: (string | number | Long)[] | undefined;
        sqlDialect?: SatInStartReplicationReq_Dialect | undefined;
        observedGoneBatch?: string[] | undefined;
    } & {
        lsn?: Uint8Array | undefined;
        options?: (SatInStartReplicationReq_Option[] & SatInStartReplicationReq_Option[] & { [K in Exclude<keyof I["options"], "$type" | keyof SatInStartReplicationReq_Option[]>]: never; }) | undefined;
        subscriptionIds?: (string[] & string[] & { [K_1 in Exclude<keyof I["subscriptionIds"], "$type" | keyof string[]>]: never; }) | undefined;
        schemaVersion?: string | undefined;
        observedTransactionData?: ((string | number | Long)[] & (string | number | (Long & {
            high: number;
            low: number;
            unsigned: boolean;
            add: (addend: string | number | Long) => Long;
            and: (other: string | number | Long) => Long;
            compare: (other: string | number | Long) => number;
            comp: (other: string | number | Long) => number;
            divide: (divisor: string | number | Long) => Long;
            div: (divisor: string | number | Long) => Long;
            equals: (other: string | number | Long) => boolean;
            eq: (other: string | number | Long) => boolean;
            getHighBits: () => number;
            getHighBitsUnsigned: () => number;
            getLowBits: () => number;
            getLowBitsUnsigned: () => number;
            getNumBitsAbs: () => number;
            greaterThan: (other: string | number | Long) => boolean;
            gt: (other: string | number | Long) => boolean;
            greaterThanOrEqual: (other: string | number | Long) => boolean;
            gte: (other: string | number | Long) => boolean;
            ge: (other: string | number | Long) => boolean;
            isEven: () => boolean;
            isNegative: () => boolean;
            isOdd: () => boolean;
            isPositive: () => boolean;
            isZero: () => boolean;
            eqz: () => boolean;
            lessThan: (other: string | number | Long) => boolean;
            lt: (other: string | number | Long) => boolean;
            lessThanOrEqual: (other: string | number | Long) => boolean;
            lte: (other: string | number | Long) => boolean;
            le: (other: string | number | Long) => boolean;
            modulo: (other: string | number | Long) => Long;
            mod: (other: string | number | Long) => Long;
            rem: (other: string | number | Long) => Long;
            multiply: (multiplier: string | number | Long) => Long;
            mul: (multiplier: string | number | Long) => Long;
            negate: () => Long;
            neg: () => Long;
            not: () => Long;
            countLeadingZeros: () => number;
            clz: () => number;
            countTrailingZeros: () => number;
            ctz: () => number;
            notEquals: (other: string | number | Long) => boolean;
            neq: (other: string | number | Long) => boolean;
            ne: (other: string | number | Long) => boolean;
            or: (other: string | number | Long) => Long;
            shiftLeft: (numBits: number | Long) => Long;
            shl: (numBits: number | Long) => Long;
            shiftRight: (numBits: number | Long) => Long;
            shr: (numBits: number | Long) => Long;
            shiftRightUnsigned: (numBits: number | Long) => Long;
            shru: (numBits: number | Long) => Long;
            shr_u: (numBits: number | Long) => Long;
            rotateLeft: (numBits: number | Long) => Long;
            rotl: (numBits: number | Long) => Long;
            rotateRight: (numBits: number | Long) => Long;
            rotr: (numBits: number | Long) => Long;
            subtract: (subtrahend: string | number | Long) => Long;
            sub: (subtrahend: string | number | Long) => Long;
            toInt: () => number;
            toNumber: () => number;
            toBytes: (le?: boolean | undefined) => number[];
            toBytesLE: () => number[];
            toBytesBE: () => number[];
            toSigned: () => Long;
            toString: (radix?: number | undefined) => string;
            toUnsigned: () => Long;
            xor: (other: string | number | Long) => Long;
        } & { [K_2 in Exclude<keyof I["observedTransactionData"][number], "$type" | keyof Long>]: never; }))[] & { [K_3 in Exclude<keyof I["observedTransactionData"], "$type" | keyof (string | number | Long)[]>]: never; }) | undefined;
        sqlDialect?: SatInStartReplicationReq_Dialect | undefined;
        observedGoneBatch?: (string[] & string[] & { [K_4 in Exclude<keyof I["observedGoneBatch"], "$type" | keyof string[]>]: never; }) | undefined;
    } & { [K_5 in Exclude<keyof I, "$type" | "lsn" | "options" | "subscriptionIds" | "schemaVersion" | "observedTransactionData" | "sqlDialect" | "observedGoneBatch">]: never; }>(base?: I): SatInStartReplicationReq;
    fromPartial<I_1 extends {
        lsn?: Uint8Array | undefined;
        options?: SatInStartReplicationReq_Option[] | undefined;
        subscriptionIds?: string[] | undefined;
        schemaVersion?: string | undefined;
        observedTransactionData?: (string | number | Long)[] | undefined;
        sqlDialect?: SatInStartReplicationReq_Dialect | undefined;
        observedGoneBatch?: string[] | undefined;
    } & {
        lsn?: Uint8Array | undefined;
        options?: (SatInStartReplicationReq_Option[] & SatInStartReplicationReq_Option[] & { [K_6 in Exclude<keyof I_1["options"], "$type" | keyof SatInStartReplicationReq_Option[]>]: never; }) | undefined;
        subscriptionIds?: (string[] & string[] & { [K_7 in Exclude<keyof I_1["subscriptionIds"], "$type" | keyof string[]>]: never; }) | undefined;
        schemaVersion?: string | undefined;
        observedTransactionData?: ((string | number | Long)[] & (string | number | (Long & {
            high: number;
            low: number;
            unsigned: boolean;
            add: (addend: string | number | Long) => Long;
            and: (other: string | number | Long) => Long;
            compare: (other: string | number | Long) => number;
            comp: (other: string | number | Long) => number;
            divide: (divisor: string | number | Long) => Long;
            div: (divisor: string | number | Long) => Long;
            equals: (other: string | number | Long) => boolean;
            eq: (other: string | number | Long) => boolean;
            getHighBits: () => number;
            getHighBitsUnsigned: () => number;
            getLowBits: () => number;
            getLowBitsUnsigned: () => number;
            getNumBitsAbs: () => number;
            greaterThan: (other: string | number | Long) => boolean;
            gt: (other: string | number | Long) => boolean;
            greaterThanOrEqual: (other: string | number | Long) => boolean;
            gte: (other: string | number | Long) => boolean;
            ge: (other: string | number | Long) => boolean;
            isEven: () => boolean;
            isNegative: () => boolean;
            isOdd: () => boolean;
            isPositive: () => boolean;
            isZero: () => boolean;
            eqz: () => boolean;
            lessThan: (other: string | number | Long) => boolean;
            lt: (other: string | number | Long) => boolean;
            lessThanOrEqual: (other: string | number | Long) => boolean;
            lte: (other: string | number | Long) => boolean;
            le: (other: string | number | Long) => boolean;
            modulo: (other: string | number | Long) => Long;
            mod: (other: string | number | Long) => Long;
            rem: (other: string | number | Long) => Long;
            multiply: (multiplier: string | number | Long) => Long;
            mul: (multiplier: string | number | Long) => Long;
            negate: () => Long;
            neg: () => Long;
            not: () => Long;
            countLeadingZeros: () => number;
            clz: () => number;
            countTrailingZeros: () => number;
            ctz: () => number;
            notEquals: (other: string | number | Long) => boolean;
            neq: (other: string | number | Long) => boolean;
            ne: (other: string | number | Long) => boolean;
            or: (other: string | number | Long) => Long;
            shiftLeft: (numBits: number | Long) => Long;
            shl: (numBits: number | Long) => Long;
            shiftRight: (numBits: number | Long) => Long;
            shr: (numBits: number | Long) => Long;
            shiftRightUnsigned: (numBits: number | Long) => Long;
            shru: (numBits: number | Long) => Long;
            shr_u: (numBits: number | Long) => Long;
            rotateLeft: (numBits: number | Long) => Long;
            rotl: (numBits: number | Long) => Long;
            rotateRight: (numBits: number | Long) => Long;
            rotr: (numBits: number | Long) => Long;
            subtract: (subtrahend: string | number | Long) => Long;
            sub: (subtrahend: string | number | Long) => Long;
            toInt: () => number;
            toNumber: () => number;
            toBytes: (le?: boolean | undefined) => number[];
            toBytesLE: () => number[];
            toBytesBE: () => number[];
            toSigned: () => Long;
            toString: (radix?: number | undefined) => string;
            toUnsigned: () => Long;
            xor: (other: string | number | Long) => Long;
        } & { [K_8 in Exclude<keyof I_1["observedTransactionData"][number], "$type" | keyof Long>]: never; }))[] & { [K_9 in Exclude<keyof I_1["observedTransactionData"], "$type" | keyof (string | number | Long)[]>]: never; }) | undefined;
        sqlDialect?: SatInStartReplicationReq_Dialect | undefined;
        observedGoneBatch?: (string[] & string[] & { [K_10 in Exclude<keyof I_1["observedGoneBatch"], "$type" | keyof string[]>]: never; }) | undefined;
    } & { [K_11 in Exclude<keyof I_1, "$type" | "lsn" | "options" | "subscriptionIds" | "schemaVersion" | "observedTransactionData" | "sqlDialect" | "observedGoneBatch">]: never; }>(object: I_1): SatInStartReplicationReq;
};
export declare const SatInStartReplicationResp: {
    $type: "Electric.Satellite.SatInStartReplicationResp";
    encode(message: SatInStartReplicationResp, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): SatInStartReplicationResp;
    create<I extends {
        err?: {
            message?: string | undefined;
            code?: SatInStartReplicationResp_ReplicationError_Code | undefined;
        } | undefined;
        unackedWindowSize?: number | undefined;
    } & {
        err?: ({
            message?: string | undefined;
            code?: SatInStartReplicationResp_ReplicationError_Code | undefined;
        } & {
            message?: string | undefined;
            code?: SatInStartReplicationResp_ReplicationError_Code | undefined;
        } & { [K in Exclude<keyof I["err"], "$type" | "message" | "code">]: never; }) | undefined;
        unackedWindowSize?: number | undefined;
    } & { [K_1 in Exclude<keyof I, "$type" | "err" | "unackedWindowSize">]: never; }>(base?: I): SatInStartReplicationResp;
    fromPartial<I_1 extends {
        err?: {
            message?: string | undefined;
            code?: SatInStartReplicationResp_ReplicationError_Code | undefined;
        } | undefined;
        unackedWindowSize?: number | undefined;
    } & {
        err?: ({
            message?: string | undefined;
            code?: SatInStartReplicationResp_ReplicationError_Code | undefined;
        } & {
            message?: string | undefined;
            code?: SatInStartReplicationResp_ReplicationError_Code | undefined;
        } & { [K_2 in Exclude<keyof I_1["err"], "$type" | "message" | "code">]: never; }) | undefined;
        unackedWindowSize?: number | undefined;
    } & { [K_3 in Exclude<keyof I_1, "$type" | "err" | "unackedWindowSize">]: never; }>(object: I_1): SatInStartReplicationResp;
};
export declare const SatInStartReplicationResp_ReplicationError: {
    $type: "Electric.Satellite.SatInStartReplicationResp.ReplicationError";
    encode(message: SatInStartReplicationResp_ReplicationError, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): SatInStartReplicationResp_ReplicationError;
    create<I extends {
        message?: string | undefined;
        code?: SatInStartReplicationResp_ReplicationError_Code | undefined;
    } & {
        message?: string | undefined;
        code?: SatInStartReplicationResp_ReplicationError_Code | undefined;
    } & { [K in Exclude<keyof I, "$type" | "message" | "code">]: never; }>(base?: I): SatInStartReplicationResp_ReplicationError;
    fromPartial<I_1 extends {
        message?: string | undefined;
        code?: SatInStartReplicationResp_ReplicationError_Code | undefined;
    } & {
        message?: string | undefined;
        code?: SatInStartReplicationResp_ReplicationError_Code | undefined;
    } & { [K_1 in Exclude<keyof I_1, "$type" | "message" | "code">]: never; }>(object: I_1): SatInStartReplicationResp_ReplicationError;
};
export declare const SatInStopReplicationReq: {
    $type: "Electric.Satellite.SatInStopReplicationReq";
    encode(_: SatInStopReplicationReq, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): SatInStopReplicationReq;
    create<I extends {} & {} & { [K in Exclude<keyof I, "$type">]: never; }>(base?: I): SatInStopReplicationReq;
    fromPartial<I_1 extends {} & {} & { [K_1 in Exclude<keyof I_1, "$type">]: never; }>(_: I_1): SatInStopReplicationReq;
};
export declare const SatInStopReplicationResp: {
    $type: "Electric.Satellite.SatInStopReplicationResp";
    encode(_: SatInStopReplicationResp, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): SatInStopReplicationResp;
    create<I extends {} & {} & { [K in Exclude<keyof I, "$type">]: never; }>(base?: I): SatInStopReplicationResp;
    fromPartial<I_1 extends {} & {} & { [K_1 in Exclude<keyof I_1, "$type">]: never; }>(_: I_1): SatInStopReplicationResp;
};
export declare const SatRelationColumn: {
    $type: "Electric.Satellite.SatRelationColumn";
    encode(message: SatRelationColumn, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): SatRelationColumn;
    create<I extends {
        name?: string | undefined;
        type?: string | undefined;
        primaryKey?: boolean | undefined;
        isNullable?: boolean | undefined;
    } & {
        name?: string | undefined;
        type?: string | undefined;
        primaryKey?: boolean | undefined;
        isNullable?: boolean | undefined;
    } & { [K in Exclude<keyof I, "$type" | "name" | "type" | "primaryKey" | "isNullable">]: never; }>(base?: I): SatRelationColumn;
    fromPartial<I_1 extends {
        name?: string | undefined;
        type?: string | undefined;
        primaryKey?: boolean | undefined;
        isNullable?: boolean | undefined;
    } & {
        name?: string | undefined;
        type?: string | undefined;
        primaryKey?: boolean | undefined;
        isNullable?: boolean | undefined;
    } & { [K_1 in Exclude<keyof I_1, "$type" | "name" | "type" | "primaryKey" | "isNullable">]: never; }>(object: I_1): SatRelationColumn;
};
export declare const SatRelation: {
    $type: "Electric.Satellite.SatRelation";
    encode(message: SatRelation, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): SatRelation;
    create<I extends {
        schemaName?: string | undefined;
        tableType?: SatRelation_RelationType | undefined;
        tableName?: string | undefined;
        relationId?: number | undefined;
        columns?: {
            name?: string | undefined;
            type?: string | undefined;
            primaryKey?: boolean | undefined;
            isNullable?: boolean | undefined;
        }[] | undefined;
    } & {
        schemaName?: string | undefined;
        tableType?: SatRelation_RelationType | undefined;
        tableName?: string | undefined;
        relationId?: number | undefined;
        columns?: ({
            name?: string | undefined;
            type?: string | undefined;
            primaryKey?: boolean | undefined;
            isNullable?: boolean | undefined;
        }[] & ({
            name?: string | undefined;
            type?: string | undefined;
            primaryKey?: boolean | undefined;
            isNullable?: boolean | undefined;
        } & {
            name?: string | undefined;
            type?: string | undefined;
            primaryKey?: boolean | undefined;
            isNullable?: boolean | undefined;
        } & { [K in Exclude<keyof I["columns"][number], "$type" | "name" | "type" | "primaryKey" | "isNullable">]: never; })[] & { [K_1 in Exclude<keyof I["columns"], "$type" | keyof {
            name?: string | undefined;
            type?: string | undefined;
            primaryKey?: boolean | undefined;
            isNullable?: boolean | undefined;
        }[]>]: never; }) | undefined;
    } & { [K_2 in Exclude<keyof I, "$type" | "schemaName" | "tableType" | "tableName" | "relationId" | "columns">]: never; }>(base?: I): SatRelation;
    fromPartial<I_1 extends {
        schemaName?: string | undefined;
        tableType?: SatRelation_RelationType | undefined;
        tableName?: string | undefined;
        relationId?: number | undefined;
        columns?: {
            name?: string | undefined;
            type?: string | undefined;
            primaryKey?: boolean | undefined;
            isNullable?: boolean | undefined;
        }[] | undefined;
    } & {
        schemaName?: string | undefined;
        tableType?: SatRelation_RelationType | undefined;
        tableName?: string | undefined;
        relationId?: number | undefined;
        columns?: ({
            name?: string | undefined;
            type?: string | undefined;
            primaryKey?: boolean | undefined;
            isNullable?: boolean | undefined;
        }[] & ({
            name?: string | undefined;
            type?: string | undefined;
            primaryKey?: boolean | undefined;
            isNullable?: boolean | undefined;
        } & {
            name?: string | undefined;
            type?: string | undefined;
            primaryKey?: boolean | undefined;
            isNullable?: boolean | undefined;
        } & { [K_3 in Exclude<keyof I_1["columns"][number], "$type" | "name" | "type" | "primaryKey" | "isNullable">]: never; })[] & { [K_4 in Exclude<keyof I_1["columns"], "$type" | keyof {
            name?: string | undefined;
            type?: string | undefined;
            primaryKey?: boolean | undefined;
            isNullable?: boolean | undefined;
        }[]>]: never; }) | undefined;
    } & { [K_5 in Exclude<keyof I_1, "$type" | "schemaName" | "tableType" | "tableName" | "relationId" | "columns">]: never; }>(object: I_1): SatRelation;
};
export declare const SatOpLog: {
    $type: "Electric.Satellite.SatOpLog";
    encode(message: SatOpLog, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): SatOpLog;
    create<I extends {
        ops?: {
            begin?: {
                lsn?: Uint8Array | undefined;
                transactionId?: string | number | Long | undefined;
                commitTimestamp?: string | number | Long | undefined;
                origin?: string | undefined;
                isMigration?: boolean | undefined;
                additionalDataRef?: string | number | Long | undefined;
            } | undefined;
            commit?: {
                lsn?: Uint8Array | undefined;
                transactionId?: string | number | Long | undefined;
                commitTimestamp?: string | number | Long | undefined;
                additionalDataRef?: string | number | Long | undefined;
            } | undefined;
            update?: {
                relationId?: number | undefined;
                rowData?: {
                    values?: Uint8Array[] | undefined;
                    nullsBitmask?: Uint8Array | undefined;
                } | undefined;
                oldRowData?: {
                    values?: Uint8Array[] | undefined;
                    nullsBitmask?: Uint8Array | undefined;
                } | undefined;
                tags?: string[] | undefined;
            } | undefined;
            insert?: {
                relationId?: number | undefined;
                rowData?: {
                    values?: Uint8Array[] | undefined;
                    nullsBitmask?: Uint8Array | undefined;
                } | undefined;
                tags?: string[] | undefined;
            } | undefined;
            delete?: {
                relationId?: number | undefined;
                oldRowData?: {
                    values?: Uint8Array[] | undefined;
                    nullsBitmask?: Uint8Array | undefined;
                } | undefined;
                tags?: string[] | undefined;
            } | undefined;
            migrate?: {
                version?: string | undefined;
                stmts?: {
                    type?: SatOpMigrate_Type | undefined;
                    sql?: string | undefined;
                }[] | undefined;
                table?: {
                    name?: string | undefined;
                    columns?: {
                        name?: string | undefined;
                        sqliteType?: string | undefined;
                        pgType?: {
                            name?: string | undefined;
                            array?: number[] | undefined;
                            size?: number[] | undefined;
                        } | undefined;
                    }[] | undefined;
                    fks?: {
                        fkCols?: string[] | undefined;
                        pkTable?: string | undefined;
                        pkCols?: string[] | undefined;
                    }[] | undefined;
                    pks?: string[] | undefined;
                } | undefined;
                enumType?: {
                    values?: string[] | undefined;
                    name?: string | undefined;
                } | undefined;
            } | undefined;
            compensation?: {
                relationId?: number | undefined;
                tags?: string[] | undefined;
                pkData?: {
                    values?: Uint8Array[] | undefined;
                    nullsBitmask?: Uint8Array | undefined;
                } | undefined;
            } | undefined;
            gone?: {
                relationId?: number | undefined;
                pkData?: {
                    values?: Uint8Array[] | undefined;
                    nullsBitmask?: Uint8Array | undefined;
                } | undefined;
            } | undefined;
            additionalBegin?: {
                ref?: string | number | Long | undefined;
            } | undefined;
            additionalCommit?: {
                ref?: string | number | Long | undefined;
            } | undefined;
        }[] | undefined;
    } & {
        ops?: ({
            begin?: {
                lsn?: Uint8Array | undefined;
                transactionId?: string | number | Long | undefined;
                commitTimestamp?: string | number | Long | undefined;
                origin?: string | undefined;
                isMigration?: boolean | undefined;
                additionalDataRef?: string | number | Long | undefined;
            } | undefined;
            commit?: {
                lsn?: Uint8Array | undefined;
                transactionId?: string | number | Long | undefined;
                commitTimestamp?: string | number | Long | undefined;
                additionalDataRef?: string | number | Long | undefined;
            } | undefined;
            update?: {
                relationId?: number | undefined;
                rowData?: {
                    values?: Uint8Array[] | undefined;
                    nullsBitmask?: Uint8Array | undefined;
                } | undefined;
                oldRowData?: {
                    values?: Uint8Array[] | undefined;
                    nullsBitmask?: Uint8Array | undefined;
                } | undefined;
                tags?: string[] | undefined;
            } | undefined;
            insert?: {
                relationId?: number | undefined;
                rowData?: {
                    values?: Uint8Array[] | undefined;
                    nullsBitmask?: Uint8Array | undefined;
                } | undefined;
                tags?: string[] | undefined;
            } | undefined;
            delete?: {
                relationId?: number | undefined;
                oldRowData?: {
                    values?: Uint8Array[] | undefined;
                    nullsBitmask?: Uint8Array | undefined;
                } | undefined;
                tags?: string[] | undefined;
            } | undefined;
            migrate?: {
                version?: string | undefined;
                stmts?: {
                    type?: SatOpMigrate_Type | undefined;
                    sql?: string | undefined;
                }[] | undefined;
                table?: {
                    name?: string | undefined;
                    columns?: {
                        name?: string | undefined;
                        sqliteType?: string | undefined;
                        pgType?: {
                            name?: string | undefined;
                            array?: number[] | undefined;
                            size?: number[] | undefined;
                        } | undefined;
                    }[] | undefined;
                    fks?: {
                        fkCols?: string[] | undefined;
                        pkTable?: string | undefined;
                        pkCols?: string[] | undefined;
                    }[] | undefined;
                    pks?: string[] | undefined;
                } | undefined;
                enumType?: {
                    values?: string[] | undefined;
                    name?: string | undefined;
                } | undefined;
            } | undefined;
            compensation?: {
                relationId?: number | undefined;
                tags?: string[] | undefined;
                pkData?: {
                    values?: Uint8Array[] | undefined;
                    nullsBitmask?: Uint8Array | undefined;
                } | undefined;
            } | undefined;
            gone?: {
                relationId?: number | undefined;
                pkData?: {
                    values?: Uint8Array[] | undefined;
                    nullsBitmask?: Uint8Array | undefined;
                } | undefined;
            } | undefined;
            additionalBegin?: {
                ref?: string | number | Long | undefined;
            } | undefined;
            additionalCommit?: {
                ref?: string | number | Long | undefined;
            } | undefined;
        }[] & ({
            begin?: {
                lsn?: Uint8Array | undefined;
                transactionId?: string | number | Long | undefined;
                commitTimestamp?: string | number | Long | undefined;
                origin?: string | undefined;
                isMigration?: boolean | undefined;
                additionalDataRef?: string | number | Long | undefined;
            } | undefined;
            commit?: {
                lsn?: Uint8Array | undefined;
                transactionId?: string | number | Long | undefined;
                commitTimestamp?: string | number | Long | undefined;
                additionalDataRef?: string | number | Long | undefined;
            } | undefined;
            update?: {
                relationId?: number | undefined;
                rowData?: {
                    values?: Uint8Array[] | undefined;
                    nullsBitmask?: Uint8Array | undefined;
                } | undefined;
                oldRowData?: {
                    values?: Uint8Array[] | undefined;
                    nullsBitmask?: Uint8Array | undefined;
                } | undefined;
                tags?: string[] | undefined;
            } | undefined;
            insert?: {
                relationId?: number | undefined;
                rowData?: {
                    values?: Uint8Array[] | undefined;
                    nullsBitmask?: Uint8Array | undefined;
                } | undefined;
                tags?: string[] | undefined;
            } | undefined;
            delete?: {
                relationId?: number | undefined;
                oldRowData?: {
                    values?: Uint8Array[] | undefined;
                    nullsBitmask?: Uint8Array | undefined;
                } | undefined;
                tags?: string[] | undefined;
            } | undefined;
            migrate?: {
                version?: string | undefined;
                stmts?: {
                    type?: SatOpMigrate_Type | undefined;
                    sql?: string | undefined;
                }[] | undefined;
                table?: {
                    name?: string | undefined;
                    columns?: {
                        name?: string | undefined;
                        sqliteType?: string | undefined;
                        pgType?: {
                            name?: string | undefined;
                            array?: number[] | undefined;
                            size?: number[] | undefined;
                        } | undefined;
                    }[] | undefined;
                    fks?: {
                        fkCols?: string[] | undefined;
                        pkTable?: string | undefined;
                        pkCols?: string[] | undefined;
                    }[] | undefined;
                    pks?: string[] | undefined;
                } | undefined;
                enumType?: {
                    values?: string[] | undefined;
                    name?: string | undefined;
                } | undefined;
            } | undefined;
            compensation?: {
                relationId?: number | undefined;
                tags?: string[] | undefined;
                pkData?: {
                    values?: Uint8Array[] | undefined;
                    nullsBitmask?: Uint8Array | undefined;
                } | undefined;
            } | undefined;
            gone?: {
                relationId?: number | undefined;
                pkData?: {
                    values?: Uint8Array[] | undefined;
                    nullsBitmask?: Uint8Array | undefined;
                } | undefined;
            } | undefined;
            additionalBegin?: {
                ref?: string | number | Long | undefined;
            } | undefined;
            additionalCommit?: {
                ref?: string | number | Long | undefined;
            } | undefined;
        } & {
            begin?: ({
                lsn?: Uint8Array | undefined;
                transactionId?: string | number | Long | undefined;
                commitTimestamp?: string | number | Long | undefined;
                origin?: string | undefined;
                isMigration?: boolean | undefined;
                additionalDataRef?: string | number | Long | undefined;
            } & {
                lsn?: Uint8Array | undefined;
                transactionId?: string | number | (Long & {
                    high: number;
                    low: number;
                    unsigned: boolean;
                    add: (addend: string | number | Long) => Long;
                    and: (other: string | number | Long) => Long;
                    compare: (other: string | number | Long) => number;
                    comp: (other: string | number | Long) => number;
                    divide: (divisor: string | number | Long) => Long;
                    div: (divisor: string | number | Long) => Long;
                    equals: (other: string | number | Long) => boolean;
                    eq: (other: string | number | Long) => boolean;
                    getHighBits: () => number;
                    getHighBitsUnsigned: () => number;
                    getLowBits: () => number;
                    getLowBitsUnsigned: () => number;
                    getNumBitsAbs: () => number;
                    greaterThan: (other: string | number | Long) => boolean;
                    gt: (other: string | number | Long) => boolean;
                    greaterThanOrEqual: (other: string | number | Long) => boolean;
                    gte: (other: string | number | Long) => boolean;
                    ge: (other: string | number | Long) => boolean;
                    isEven: () => boolean;
                    isNegative: () => boolean;
                    isOdd: () => boolean;
                    isPositive: () => boolean;
                    isZero: () => boolean;
                    eqz: () => boolean;
                    lessThan: (other: string | number | Long) => boolean;
                    lt: (other: string | number | Long) => boolean;
                    lessThanOrEqual: (other: string | number | Long) => boolean;
                    lte: (other: string | number | Long) => boolean;
                    le: (other: string | number | Long) => boolean;
                    modulo: (other: string | number | Long) => Long;
                    mod: (other: string | number | Long) => Long;
                    rem: (other: string | number | Long) => Long;
                    multiply: (multiplier: string | number | Long) => Long;
                    mul: (multiplier: string | number | Long) => Long;
                    negate: () => Long;
                    neg: () => Long;
                    not: () => Long;
                    countLeadingZeros: () => number;
                    clz: () => number;
                    countTrailingZeros: () => number;
                    ctz: () => number;
                    notEquals: (other: string | number | Long) => boolean;
                    neq: (other: string | number | Long) => boolean;
                    ne: (other: string | number | Long) => boolean;
                    or: (other: string | number | Long) => Long;
                    shiftLeft: (numBits: number | Long) => Long;
                    shl: (numBits: number | Long) => Long;
                    shiftRight: (numBits: number | Long) => Long;
                    shr: (numBits: number | Long) => Long;
                    shiftRightUnsigned: (numBits: number | Long) => Long;
                    shru: (numBits: number | Long) => Long;
                    shr_u: (numBits: number | Long) => Long;
                    rotateLeft: (numBits: number | Long) => Long;
                    rotl: (numBits: number | Long) => Long;
                    rotateRight: (numBits: number | Long) => Long;
                    rotr: (numBits: number | Long) => Long;
                    subtract: (subtrahend: string | number | Long) => Long;
                    sub: (subtrahend: string | number | Long) => Long;
                    toInt: () => number;
                    toNumber: () => number;
                    toBytes: (le?: boolean | undefined) => number[];
                    toBytesLE: () => number[];
                    toBytesBE: () => number[];
                    toSigned: () => Long;
                    toString: (radix?: number | undefined) => string;
                    toUnsigned: () => Long;
                    xor: (other: string | number | Long) => Long;
                } & { [K in Exclude<keyof I["ops"][number]["begin"]["transactionId"], "$type" | keyof Long>]: never; }) | undefined;
                commitTimestamp?: string | number | (Long & {
                    high: number;
                    low: number;
                    unsigned: boolean;
                    add: (addend: string | number | Long) => Long;
                    and: (other: string | number | Long) => Long;
                    compare: (other: string | number | Long) => number;
                    comp: (other: string | number | Long) => number;
                    divide: (divisor: string | number | Long) => Long;
                    div: (divisor: string | number | Long) => Long;
                    equals: (other: string | number | Long) => boolean;
                    eq: (other: string | number | Long) => boolean;
                    getHighBits: () => number;
                    getHighBitsUnsigned: () => number;
                    getLowBits: () => number;
                    getLowBitsUnsigned: () => number;
                    getNumBitsAbs: () => number;
                    greaterThan: (other: string | number | Long) => boolean;
                    gt: (other: string | number | Long) => boolean;
                    greaterThanOrEqual: (other: string | number | Long) => boolean;
                    gte: (other: string | number | Long) => boolean;
                    ge: (other: string | number | Long) => boolean;
                    isEven: () => boolean;
                    isNegative: () => boolean;
                    isOdd: () => boolean;
                    isPositive: () => boolean;
                    isZero: () => boolean;
                    eqz: () => boolean;
                    lessThan: (other: string | number | Long) => boolean;
                    lt: (other: string | number | Long) => boolean;
                    lessThanOrEqual: (other: string | number | Long) => boolean;
                    lte: (other: string | number | Long) => boolean;
                    le: (other: string | number | Long) => boolean;
                    modulo: (other: string | number | Long) => Long;
                    mod: (other: string | number | Long) => Long;
                    rem: (other: string | number | Long) => Long;
                    multiply: (multiplier: string | number | Long) => Long;
                    mul: (multiplier: string | number | Long) => Long;
                    negate: () => Long;
                    neg: () => Long;
                    not: () => Long;
                    countLeadingZeros: () => number;
                    clz: () => number;
                    countTrailingZeros: () => number;
                    ctz: () => number;
                    notEquals: (other: string | number | Long) => boolean;
                    neq: (other: string | number | Long) => boolean;
                    ne: (other: string | number | Long) => boolean;
                    or: (other: string | number | Long) => Long;
                    shiftLeft: (numBits: number | Long) => Long;
                    shl: (numBits: number | Long) => Long;
                    shiftRight: (numBits: number | Long) => Long;
                    shr: (numBits: number | Long) => Long;
                    shiftRightUnsigned: (numBits: number | Long) => Long;
                    shru: (numBits: number | Long) => Long;
                    shr_u: (numBits: number | Long) => Long;
                    rotateLeft: (numBits: number | Long) => Long;
                    rotl: (numBits: number | Long) => Long;
                    rotateRight: (numBits: number | Long) => Long;
                    rotr: (numBits: number | Long) => Long;
                    subtract: (subtrahend: string | number | Long) => Long;
                    sub: (subtrahend: string | number | Long) => Long;
                    toInt: () => number;
                    toNumber: () => number;
                    toBytes: (le?: boolean | undefined) => number[];
                    toBytesLE: () => number[];
                    toBytesBE: () => number[];
                    toSigned: () => Long;
                    toString: (radix?: number | undefined) => string;
                    toUnsigned: () => Long;
                    xor: (other: string | number | Long) => Long;
                } & { [K_1 in Exclude<keyof I["ops"][number]["begin"]["commitTimestamp"], "$type" | keyof Long>]: never; }) | undefined;
                origin?: string | undefined;
                isMigration?: boolean | undefined;
                additionalDataRef?: string | number | (Long & {
                    high: number;
                    low: number;
                    unsigned: boolean;
                    add: (addend: string | number | Long) => Long;
                    and: (other: string | number | Long) => Long;
                    compare: (other: string | number | Long) => number;
                    comp: (other: string | number | Long) => number;
                    divide: (divisor: string | number | Long) => Long;
                    div: (divisor: string | number | Long) => Long;
                    equals: (other: string | number | Long) => boolean;
                    eq: (other: string | number | Long) => boolean;
                    getHighBits: () => number;
                    getHighBitsUnsigned: () => number;
                    getLowBits: () => number;
                    getLowBitsUnsigned: () => number;
                    getNumBitsAbs: () => number;
                    greaterThan: (other: string | number | Long) => boolean;
                    gt: (other: string | number | Long) => boolean;
                    greaterThanOrEqual: (other: string | number | Long) => boolean;
                    gte: (other: string | number | Long) => boolean;
                    ge: (other: string | number | Long) => boolean;
                    isEven: () => boolean;
                    isNegative: () => boolean;
                    isOdd: () => boolean;
                    isPositive: () => boolean;
                    isZero: () => boolean;
                    eqz: () => boolean;
                    lessThan: (other: string | number | Long) => boolean;
                    lt: (other: string | number | Long) => boolean;
                    lessThanOrEqual: (other: string | number | Long) => boolean;
                    lte: (other: string | number | Long) => boolean;
                    le: (other: string | number | Long) => boolean;
                    modulo: (other: string | number | Long) => Long;
                    mod: (other: string | number | Long) => Long;
                    rem: (other: string | number | Long) => Long;
                    multiply: (multiplier: string | number | Long) => Long;
                    mul: (multiplier: string | number | Long) => Long;
                    negate: () => Long;
                    neg: () => Long;
                    not: () => Long;
                    countLeadingZeros: () => number;
                    clz: () => number;
                    countTrailingZeros: () => number;
                    ctz: () => number;
                    notEquals: (other: string | number | Long) => boolean;
                    neq: (other: string | number | Long) => boolean;
                    ne: (other: string | number | Long) => boolean;
                    or: (other: string | number | Long) => Long;
                    shiftLeft: (numBits: number | Long) => Long;
                    shl: (numBits: number | Long) => Long;
                    shiftRight: (numBits: number | Long) => Long;
                    shr: (numBits: number | Long) => Long;
                    shiftRightUnsigned: (numBits: number | Long) => Long;
                    shru: (numBits: number | Long) => Long;
                    shr_u: (numBits: number | Long) => Long;
                    rotateLeft: (numBits: number | Long) => Long;
                    rotl: (numBits: number | Long) => Long;
                    rotateRight: (numBits: number | Long) => Long;
                    rotr: (numBits: number | Long) => Long;
                    subtract: (subtrahend: string | number | Long) => Long;
                    sub: (subtrahend: string | number | Long) => Long;
                    toInt: () => number;
                    toNumber: () => number;
                    toBytes: (le?: boolean | undefined) => number[];
                    toBytesLE: () => number[];
                    toBytesBE: () => number[];
                    toSigned: () => Long;
                    toString: (radix?: number | undefined) => string;
                    toUnsigned: () => Long;
                    xor: (other: string | number | Long) => Long;
                } & { [K_2 in Exclude<keyof I["ops"][number]["begin"]["additionalDataRef"], "$type" | keyof Long>]: never; }) | undefined;
            } & { [K_3 in Exclude<keyof I["ops"][number]["begin"], "$type" | "lsn" | "transactionId" | "commitTimestamp" | "origin" | "isMigration" | "additionalDataRef">]: never; }) | undefined;
            commit?: ({
                lsn?: Uint8Array | undefined;
                transactionId?: string | number | Long | undefined;
                commitTimestamp?: string | number | Long | undefined;
                additionalDataRef?: string | number | Long | undefined;
            } & {
                lsn?: Uint8Array | undefined;
                transactionId?: string | number | (Long & {
                    high: number;
                    low: number;
                    unsigned: boolean;
                    add: (addend: string | number | Long) => Long;
                    and: (other: string | number | Long) => Long;
                    compare: (other: string | number | Long) => number;
                    comp: (other: string | number | Long) => number;
                    divide: (divisor: string | number | Long) => Long;
                    div: (divisor: string | number | Long) => Long;
                    equals: (other: string | number | Long) => boolean;
                    eq: (other: string | number | Long) => boolean;
                    getHighBits: () => number;
                    getHighBitsUnsigned: () => number;
                    getLowBits: () => number;
                    getLowBitsUnsigned: () => number;
                    getNumBitsAbs: () => number;
                    greaterThan: (other: string | number | Long) => boolean;
                    gt: (other: string | number | Long) => boolean;
                    greaterThanOrEqual: (other: string | number | Long) => boolean;
                    gte: (other: string | number | Long) => boolean;
                    ge: (other: string | number | Long) => boolean;
                    isEven: () => boolean;
                    isNegative: () => boolean;
                    isOdd: () => boolean;
                    isPositive: () => boolean;
                    isZero: () => boolean;
                    eqz: () => boolean;
                    lessThan: (other: string | number | Long) => boolean;
                    lt: (other: string | number | Long) => boolean;
                    lessThanOrEqual: (other: string | number | Long) => boolean;
                    lte: (other: string | number | Long) => boolean;
                    le: (other: string | number | Long) => boolean;
                    modulo: (other: string | number | Long) => Long;
                    mod: (other: string | number | Long) => Long;
                    rem: (other: string | number | Long) => Long;
                    multiply: (multiplier: string | number | Long) => Long;
                    mul: (multiplier: string | number | Long) => Long;
                    negate: () => Long;
                    neg: () => Long;
                    not: () => Long;
                    countLeadingZeros: () => number;
                    clz: () => number;
                    countTrailingZeros: () => number;
                    ctz: () => number;
                    notEquals: (other: string | number | Long) => boolean;
                    neq: (other: string | number | Long) => boolean;
                    ne: (other: string | number | Long) => boolean;
                    or: (other: string | number | Long) => Long;
                    shiftLeft: (numBits: number | Long) => Long;
                    shl: (numBits: number | Long) => Long;
                    shiftRight: (numBits: number | Long) => Long;
                    shr: (numBits: number | Long) => Long;
                    shiftRightUnsigned: (numBits: number | Long) => Long;
                    shru: (numBits: number | Long) => Long;
                    shr_u: (numBits: number | Long) => Long;
                    rotateLeft: (numBits: number | Long) => Long;
                    rotl: (numBits: number | Long) => Long;
                    rotateRight: (numBits: number | Long) => Long;
                    rotr: (numBits: number | Long) => Long;
                    subtract: (subtrahend: string | number | Long) => Long;
                    sub: (subtrahend: string | number | Long) => Long;
                    toInt: () => number;
                    toNumber: () => number;
                    toBytes: (le?: boolean | undefined) => number[];
                    toBytesLE: () => number[];
                    toBytesBE: () => number[];
                    toSigned: () => Long;
                    toString: (radix?: number | undefined) => string;
                    toUnsigned: () => Long;
                    xor: (other: string | number | Long) => Long;
                } & { [K_4 in Exclude<keyof I["ops"][number]["commit"]["transactionId"], "$type" | keyof Long>]: never; }) | undefined;
                commitTimestamp?: string | number | (Long & {
                    high: number;
                    low: number;
                    unsigned: boolean;
                    add: (addend: string | number | Long) => Long;
                    and: (other: string | number | Long) => Long;
                    compare: (other: string | number | Long) => number;
                    comp: (other: string | number | Long) => number;
                    divide: (divisor: string | number | Long) => Long;
                    div: (divisor: string | number | Long) => Long;
                    equals: (other: string | number | Long) => boolean;
                    eq: (other: string | number | Long) => boolean;
                    getHighBits: () => number;
                    getHighBitsUnsigned: () => number;
                    getLowBits: () => number;
                    getLowBitsUnsigned: () => number;
                    getNumBitsAbs: () => number;
                    greaterThan: (other: string | number | Long) => boolean;
                    gt: (other: string | number | Long) => boolean;
                    greaterThanOrEqual: (other: string | number | Long) => boolean;
                    gte: (other: string | number | Long) => boolean;
                    ge: (other: string | number | Long) => boolean;
                    isEven: () => boolean;
                    isNegative: () => boolean;
                    isOdd: () => boolean;
                    isPositive: () => boolean;
                    isZero: () => boolean;
                    eqz: () => boolean;
                    lessThan: (other: string | number | Long) => boolean;
                    lt: (other: string | number | Long) => boolean;
                    lessThanOrEqual: (other: string | number | Long) => boolean;
                    lte: (other: string | number | Long) => boolean;
                    le: (other: string | number | Long) => boolean;
                    modulo: (other: string | number | Long) => Long;
                    mod: (other: string | number | Long) => Long;
                    rem: (other: string | number | Long) => Long;
                    multiply: (multiplier: string | number | Long) => Long;
                    mul: (multiplier: string | number | Long) => Long;
                    negate: () => Long;
                    neg: () => Long;
                    not: () => Long;
                    countLeadingZeros: () => number;
                    clz: () => number;
                    countTrailingZeros: () => number;
                    ctz: () => number;
                    notEquals: (other: string | number | Long) => boolean;
                    neq: (other: string | number | Long) => boolean;
                    ne: (other: string | number | Long) => boolean;
                    or: (other: string | number | Long) => Long;
                    shiftLeft: (numBits: number | Long) => Long;
                    shl: (numBits: number | Long) => Long;
                    shiftRight: (numBits: number | Long) => Long;
                    shr: (numBits: number | Long) => Long;
                    shiftRightUnsigned: (numBits: number | Long) => Long;
                    shru: (numBits: number | Long) => Long;
                    shr_u: (numBits: number | Long) => Long;
                    rotateLeft: (numBits: number | Long) => Long;
                    rotl: (numBits: number | Long) => Long;
                    rotateRight: (numBits: number | Long) => Long;
                    rotr: (numBits: number | Long) => Long;
                    subtract: (subtrahend: string | number | Long) => Long;
                    sub: (subtrahend: string | number | Long) => Long;
                    toInt: () => number;
                    toNumber: () => number;
                    toBytes: (le?: boolean | undefined) => number[];
                    toBytesLE: () => number[];
                    toBytesBE: () => number[];
                    toSigned: () => Long;
                    toString: (radix?: number | undefined) => string;
                    toUnsigned: () => Long;
                    xor: (other: string | number | Long) => Long;
                } & { [K_5 in Exclude<keyof I["ops"][number]["commit"]["commitTimestamp"], "$type" | keyof Long>]: never; }) | undefined;
                additionalDataRef?: string | number | (Long & {
                    high: number;
                    low: number;
                    unsigned: boolean;
                    add: (addend: string | number | Long) => Long;
                    and: (other: string | number | Long) => Long;
                    compare: (other: string | number | Long) => number;
                    comp: (other: string | number | Long) => number;
                    divide: (divisor: string | number | Long) => Long;
                    div: (divisor: string | number | Long) => Long;
                    equals: (other: string | number | Long) => boolean;
                    eq: (other: string | number | Long) => boolean;
                    getHighBits: () => number;
                    getHighBitsUnsigned: () => number;
                    getLowBits: () => number;
                    getLowBitsUnsigned: () => number;
                    getNumBitsAbs: () => number;
                    greaterThan: (other: string | number | Long) => boolean;
                    gt: (other: string | number | Long) => boolean;
                    greaterThanOrEqual: (other: string | number | Long) => boolean;
                    gte: (other: string | number | Long) => boolean;
                    ge: (other: string | number | Long) => boolean;
                    isEven: () => boolean;
                    isNegative: () => boolean;
                    isOdd: () => boolean;
                    isPositive: () => boolean;
                    isZero: () => boolean;
                    eqz: () => boolean;
                    lessThan: (other: string | number | Long) => boolean;
                    lt: (other: string | number | Long) => boolean;
                    lessThanOrEqual: (other: string | number | Long) => boolean;
                    lte: (other: string | number | Long) => boolean;
                    le: (other: string | number | Long) => boolean;
                    modulo: (other: string | number | Long) => Long;
                    mod: (other: string | number | Long) => Long;
                    rem: (other: string | number | Long) => Long;
                    multiply: (multiplier: string | number | Long) => Long;
                    mul: (multiplier: string | number | Long) => Long;
                    negate: () => Long;
                    neg: () => Long;
                    not: () => Long;
                    countLeadingZeros: () => number;
                    clz: () => number;
                    countTrailingZeros: () => number;
                    ctz: () => number;
                    notEquals: (other: string | number | Long) => boolean;
                    neq: (other: string | number | Long) => boolean;
                    ne: (other: string | number | Long) => boolean;
                    or: (other: string | number | Long) => Long;
                    shiftLeft: (numBits: number | Long) => Long;
                    shl: (numBits: number | Long) => Long;
                    shiftRight: (numBits: number | Long) => Long;
                    shr: (numBits: number | Long) => Long;
                    shiftRightUnsigned: (numBits: number | Long) => Long;
                    shru: (numBits: number | Long) => Long;
                    shr_u: (numBits: number | Long) => Long;
                    rotateLeft: (numBits: number | Long) => Long;
                    rotl: (numBits: number | Long) => Long;
                    rotateRight: (numBits: number | Long) => Long;
                    rotr: (numBits: number | Long) => Long;
                    subtract: (subtrahend: string | number | Long) => Long;
                    sub: (subtrahend: string | number | Long) => Long;
                    toInt: () => number;
                    toNumber: () => number;
                    toBytes: (le?: boolean | undefined) => number[];
                    toBytesLE: () => number[];
                    toBytesBE: () => number[];
                    toSigned: () => Long;
                    toString: (radix?: number | undefined) => string;
                    toUnsigned: () => Long;
                    xor: (other: string | number | Long) => Long;
                } & { [K_6 in Exclude<keyof I["ops"][number]["commit"]["additionalDataRef"], "$type" | keyof Long>]: never; }) | undefined;
            } & { [K_7 in Exclude<keyof I["ops"][number]["commit"], "$type" | "lsn" | "transactionId" | "commitTimestamp" | "additionalDataRef">]: never; }) | undefined;
            update?: ({
                relationId?: number | undefined;
                rowData?: {
                    values?: Uint8Array[] | undefined;
                    nullsBitmask?: Uint8Array | undefined;
                } | undefined;
                oldRowData?: {
                    values?: Uint8Array[] | undefined;
                    nullsBitmask?: Uint8Array | undefined;
                } | undefined;
                tags?: string[] | undefined;
            } & {
                relationId?: number | undefined;
                rowData?: ({
                    values?: Uint8Array[] | undefined;
                    nullsBitmask?: Uint8Array | undefined;
                } & {
                    values?: (Uint8Array[] & Uint8Array[] & { [K_8 in Exclude<keyof I["ops"][number]["update"]["rowData"]["values"], "$type" | keyof Uint8Array[]>]: never; }) | undefined;
                    nullsBitmask?: Uint8Array | undefined;
                } & { [K_9 in Exclude<keyof I["ops"][number]["update"]["rowData"], "$type" | "values" | "nullsBitmask">]: never; }) | undefined;
                oldRowData?: ({
                    values?: Uint8Array[] | undefined;
                    nullsBitmask?: Uint8Array | undefined;
                } & {
                    values?: (Uint8Array[] & Uint8Array[] & { [K_10 in Exclude<keyof I["ops"][number]["update"]["oldRowData"]["values"], "$type" | keyof Uint8Array[]>]: never; }) | undefined;
                    nullsBitmask?: Uint8Array | undefined;
                } & { [K_11 in Exclude<keyof I["ops"][number]["update"]["oldRowData"], "$type" | "values" | "nullsBitmask">]: never; }) | undefined;
                tags?: (string[] & string[] & { [K_12 in Exclude<keyof I["ops"][number]["update"]["tags"], "$type" | keyof string[]>]: never; }) | undefined;
            } & { [K_13 in Exclude<keyof I["ops"][number]["update"], "$type" | "relationId" | "rowData" | "oldRowData" | "tags">]: never; }) | undefined;
            insert?: ({
                relationId?: number | undefined;
                rowData?: {
                    values?: Uint8Array[] | undefined;
                    nullsBitmask?: Uint8Array | undefined;
                } | undefined;
                tags?: string[] | undefined;
            } & {
                relationId?: number | undefined;
                rowData?: ({
                    values?: Uint8Array[] | undefined;
                    nullsBitmask?: Uint8Array | undefined;
                } & {
                    values?: (Uint8Array[] & Uint8Array[] & { [K_14 in Exclude<keyof I["ops"][number]["insert"]["rowData"]["values"], "$type" | keyof Uint8Array[]>]: never; }) | undefined;
                    nullsBitmask?: Uint8Array | undefined;
                } & { [K_15 in Exclude<keyof I["ops"][number]["insert"]["rowData"], "$type" | "values" | "nullsBitmask">]: never; }) | undefined;
                tags?: (string[] & string[] & { [K_16 in Exclude<keyof I["ops"][number]["insert"]["tags"], "$type" | keyof string[]>]: never; }) | undefined;
            } & { [K_17 in Exclude<keyof I["ops"][number]["insert"], "$type" | "relationId" | "rowData" | "tags">]: never; }) | undefined;
            delete?: ({
                relationId?: number | undefined;
                oldRowData?: {
                    values?: Uint8Array[] | undefined;
                    nullsBitmask?: Uint8Array | undefined;
                } | undefined;
                tags?: string[] | undefined;
            } & {
                relationId?: number | undefined;
                oldRowData?: ({
                    values?: Uint8Array[] | undefined;
                    nullsBitmask?: Uint8Array | undefined;
                } & {
                    values?: (Uint8Array[] & Uint8Array[] & { [K_18 in Exclude<keyof I["ops"][number]["delete"]["oldRowData"]["values"], "$type" | keyof Uint8Array[]>]: never; }) | undefined;
                    nullsBitmask?: Uint8Array | undefined;
                } & { [K_19 in Exclude<keyof I["ops"][number]["delete"]["oldRowData"], "$type" | "values" | "nullsBitmask">]: never; }) | undefined;
                tags?: (string[] & string[] & { [K_20 in Exclude<keyof I["ops"][number]["delete"]["tags"], "$type" | keyof string[]>]: never; }) | undefined;
            } & { [K_21 in Exclude<keyof I["ops"][number]["delete"], "$type" | "relationId" | "oldRowData" | "tags">]: never; }) | undefined;
            migrate?: ({
                version?: string | undefined;
                stmts?: {
                    type?: SatOpMigrate_Type | undefined;
                    sql?: string | undefined;
                }[] | undefined;
                table?: {
                    name?: string | undefined;
                    columns?: {
                        name?: string | undefined;
                        sqliteType?: string | undefined;
                        pgType?: {
                            name?: string | undefined;
                            array?: number[] | undefined;
                            size?: number[] | undefined;
                        } | undefined;
                    }[] | undefined;
                    fks?: {
                        fkCols?: string[] | undefined;
                        pkTable?: string | undefined;
                        pkCols?: string[] | undefined;
                    }[] | undefined;
                    pks?: string[] | undefined;
                } | undefined;
                enumType?: {
                    values?: string[] | undefined;
                    name?: string | undefined;
                } | undefined;
            } & {
                version?: string | undefined;
                stmts?: ({
                    type?: SatOpMigrate_Type | undefined;
                    sql?: string | undefined;
                }[] & ({
                    type?: SatOpMigrate_Type | undefined;
                    sql?: string | undefined;
                } & {
                    type?: SatOpMigrate_Type | undefined;
                    sql?: string | undefined;
                } & { [K_22 in Exclude<keyof I["ops"][number]["migrate"]["stmts"][number], "$type" | "type" | "sql">]: never; })[] & { [K_23 in Exclude<keyof I["ops"][number]["migrate"]["stmts"], "$type" | keyof {
                    type?: SatOpMigrate_Type | undefined;
                    sql?: string | undefined;
                }[]>]: never; }) | undefined;
                table?: ({
                    name?: string | undefined;
                    columns?: {
                        name?: string | undefined;
                        sqliteType?: string | undefined;
                        pgType?: {
                            name?: string | undefined;
                            array?: number[] | undefined;
                            size?: number[] | undefined;
                        } | undefined;
                    }[] | undefined;
                    fks?: {
                        fkCols?: string[] | undefined;
                        pkTable?: string | undefined;
                        pkCols?: string[] | undefined;
                    }[] | undefined;
                    pks?: string[] | undefined;
                } & {
                    name?: string | undefined;
                    columns?: ({
                        name?: string | undefined;
                        sqliteType?: string | undefined;
                        pgType?: {
                            name?: string | undefined;
                            array?: number[] | undefined;
                            size?: number[] | undefined;
                        } | undefined;
                    }[] & ({
                        name?: string | undefined;
                        sqliteType?: string | undefined;
                        pgType?: {
                            name?: string | undefined;
                            array?: number[] | undefined;
                            size?: number[] | undefined;
                        } | undefined;
                    } & {
                        name?: string | undefined;
                        sqliteType?: string | undefined;
                        pgType?: ({
                            name?: string | undefined;
                            array?: number[] | undefined;
                            size?: number[] | undefined;
                        } & {
                            name?: string | undefined;
                            array?: (number[] & number[] & { [K_24 in Exclude<keyof I["ops"][number]["migrate"]["table"]["columns"][number]["pgType"]["array"], "$type" | keyof number[]>]: never; }) | undefined;
                            size?: (number[] & number[] & { [K_25 in Exclude<keyof I["ops"][number]["migrate"]["table"]["columns"][number]["pgType"]["size"], "$type" | keyof number[]>]: never; }) | undefined;
                        } & { [K_26 in Exclude<keyof I["ops"][number]["migrate"]["table"]["columns"][number]["pgType"], "$type" | "name" | "array" | "size">]: never; }) | undefined;
                    } & { [K_27 in Exclude<keyof I["ops"][number]["migrate"]["table"]["columns"][number], "$type" | "name" | "sqliteType" | "pgType">]: never; })[] & { [K_28 in Exclude<keyof I["ops"][number]["migrate"]["table"]["columns"], "$type" | keyof {
                        name?: string | undefined;
                        sqliteType?: string | undefined;
                        pgType?: {
                            name?: string | undefined;
                            array?: number[] | undefined;
                            size?: number[] | undefined;
                        } | undefined;
                    }[]>]: never; }) | undefined;
                    fks?: ({
                        fkCols?: string[] | undefined;
                        pkTable?: string | undefined;
                        pkCols?: string[] | undefined;
                    }[] & ({
                        fkCols?: string[] | undefined;
                        pkTable?: string | undefined;
                        pkCols?: string[] | undefined;
                    } & {
                        fkCols?: (string[] & string[] & { [K_29 in Exclude<keyof I["ops"][number]["migrate"]["table"]["fks"][number]["fkCols"], "$type" | keyof string[]>]: never; }) | undefined;
                        pkTable?: string | undefined;
                        pkCols?: (string[] & string[] & { [K_30 in Exclude<keyof I["ops"][number]["migrate"]["table"]["fks"][number]["pkCols"], "$type" | keyof string[]>]: never; }) | undefined;
                    } & { [K_31 in Exclude<keyof I["ops"][number]["migrate"]["table"]["fks"][number], "$type" | "fkCols" | "pkTable" | "pkCols">]: never; })[] & { [K_32 in Exclude<keyof I["ops"][number]["migrate"]["table"]["fks"], "$type" | keyof {
                        fkCols?: string[] | undefined;
                        pkTable?: string | undefined;
                        pkCols?: string[] | undefined;
                    }[]>]: never; }) | undefined;
                    pks?: (string[] & string[] & { [K_33 in Exclude<keyof I["ops"][number]["migrate"]["table"]["pks"], "$type" | keyof string[]>]: never; }) | undefined;
                } & { [K_34 in Exclude<keyof I["ops"][number]["migrate"]["table"], "$type" | "name" | "columns" | "fks" | "pks">]: never; }) | undefined;
                enumType?: ({
                    values?: string[] | undefined;
                    name?: string | undefined;
                } & {
                    values?: (string[] & string[] & { [K_35 in Exclude<keyof I["ops"][number]["migrate"]["enumType"]["values"], "$type" | keyof string[]>]: never; }) | undefined;
                    name?: string | undefined;
                } & { [K_36 in Exclude<keyof I["ops"][number]["migrate"]["enumType"], "$type" | "values" | "name">]: never; }) | undefined;
            } & { [K_37 in Exclude<keyof I["ops"][number]["migrate"], "$type" | "version" | "stmts" | "table" | "enumType">]: never; }) | undefined;
            compensation?: ({
                relationId?: number | undefined;
                tags?: string[] | undefined;
                pkData?: {
                    values?: Uint8Array[] | undefined;
                    nullsBitmask?: Uint8Array | undefined;
                } | undefined;
            } & {
                relationId?: number | undefined;
                tags?: (string[] & string[] & { [K_38 in Exclude<keyof I["ops"][number]["compensation"]["tags"], "$type" | keyof string[]>]: never; }) | undefined;
                pkData?: ({
                    values?: Uint8Array[] | undefined;
                    nullsBitmask?: Uint8Array | undefined;
                } & {
                    values?: (Uint8Array[] & Uint8Array[] & { [K_39 in Exclude<keyof I["ops"][number]["compensation"]["pkData"]["values"], "$type" | keyof Uint8Array[]>]: never; }) | undefined;
                    nullsBitmask?: Uint8Array | undefined;
                } & { [K_40 in Exclude<keyof I["ops"][number]["compensation"]["pkData"], "$type" | "values" | "nullsBitmask">]: never; }) | undefined;
            } & { [K_41 in Exclude<keyof I["ops"][number]["compensation"], "$type" | "relationId" | "tags" | "pkData">]: never; }) | undefined;
            gone?: ({
                relationId?: number | undefined;
                pkData?: {
                    values?: Uint8Array[] | undefined;
                    nullsBitmask?: Uint8Array | undefined;
                } | undefined;
            } & {
                relationId?: number | undefined;
                pkData?: ({
                    values?: Uint8Array[] | undefined;
                    nullsBitmask?: Uint8Array | undefined;
                } & {
                    values?: (Uint8Array[] & Uint8Array[] & { [K_42 in Exclude<keyof I["ops"][number]["gone"]["pkData"]["values"], "$type" | keyof Uint8Array[]>]: never; }) | undefined;
                    nullsBitmask?: Uint8Array | undefined;
                } & { [K_43 in Exclude<keyof I["ops"][number]["gone"]["pkData"], "$type" | "values" | "nullsBitmask">]: never; }) | undefined;
            } & { [K_44 in Exclude<keyof I["ops"][number]["gone"], "$type" | "relationId" | "pkData">]: never; }) | undefined;
            additionalBegin?: ({
                ref?: string | number | Long | undefined;
            } & {
                ref?: string | number | (Long & {
                    high: number;
                    low: number;
                    unsigned: boolean;
                    add: (addend: string | number | Long) => Long;
                    and: (other: string | number | Long) => Long;
                    compare: (other: string | number | Long) => number;
                    comp: (other: string | number | Long) => number;
                    divide: (divisor: string | number | Long) => Long;
                    div: (divisor: string | number | Long) => Long;
                    equals: (other: string | number | Long) => boolean;
                    eq: (other: string | number | Long) => boolean;
                    getHighBits: () => number;
                    getHighBitsUnsigned: () => number;
                    getLowBits: () => number;
                    getLowBitsUnsigned: () => number;
                    getNumBitsAbs: () => number;
                    greaterThan: (other: string | number | Long) => boolean;
                    gt: (other: string | number | Long) => boolean;
                    greaterThanOrEqual: (other: string | number | Long) => boolean;
                    gte: (other: string | number | Long) => boolean;
                    ge: (other: string | number | Long) => boolean;
                    isEven: () => boolean;
                    isNegative: () => boolean;
                    isOdd: () => boolean;
                    isPositive: () => boolean;
                    isZero: () => boolean;
                    eqz: () => boolean;
                    lessThan: (other: string | number | Long) => boolean;
                    lt: (other: string | number | Long) => boolean;
                    lessThanOrEqual: (other: string | number | Long) => boolean;
                    lte: (other: string | number | Long) => boolean;
                    le: (other: string | number | Long) => boolean;
                    modulo: (other: string | number | Long) => Long;
                    mod: (other: string | number | Long) => Long;
                    rem: (other: string | number | Long) => Long;
                    multiply: (multiplier: string | number | Long) => Long;
                    mul: (multiplier: string | number | Long) => Long;
                    negate: () => Long;
                    neg: () => Long;
                    not: () => Long;
                    countLeadingZeros: () => number;
                    clz: () => number;
                    countTrailingZeros: () => number;
                    ctz: () => number;
                    notEquals: (other: string | number | Long) => boolean;
                    neq: (other: string | number | Long) => boolean;
                    ne: (other: string | number | Long) => boolean;
                    or: (other: string | number | Long) => Long;
                    shiftLeft: (numBits: number | Long) => Long;
                    shl: (numBits: number | Long) => Long;
                    shiftRight: (numBits: number | Long) => Long;
                    shr: (numBits: number | Long) => Long;
                    shiftRightUnsigned: (numBits: number | Long) => Long;
                    shru: (numBits: number | Long) => Long;
                    shr_u: (numBits: number | Long) => Long;
                    rotateLeft: (numBits: number | Long) => Long;
                    rotl: (numBits: number | Long) => Long;
                    rotateRight: (numBits: number | Long) => Long;
                    rotr: (numBits: number | Long) => Long;
                    subtract: (subtrahend: string | number | Long) => Long;
                    sub: (subtrahend: string | number | Long) => Long;
                    toInt: () => number;
                    toNumber: () => number;
                    toBytes: (le?: boolean | undefined) => number[];
                    toBytesLE: () => number[];
                    toBytesBE: () => number[];
                    toSigned: () => Long;
                    toString: (radix?: number | undefined) => string;
                    toUnsigned: () => Long;
                    xor: (other: string | number | Long) => Long;
                } & { [K_45 in Exclude<keyof I["ops"][number]["additionalBegin"]["ref"], "$type" | keyof Long>]: never; }) | undefined;
            } & { [K_46 in Exclude<keyof I["ops"][number]["additionalBegin"], "$type" | "ref">]: never; }) | undefined;
            additionalCommit?: ({
                ref?: string | number | Long | undefined;
            } & {
                ref?: string | number | (Long & {
                    high: number;
                    low: number;
                    unsigned: boolean;
                    add: (addend: string | number | Long) => Long;
                    and: (other: string | number | Long) => Long;
                    compare: (other: string | number | Long) => number;
                    comp: (other: string | number | Long) => number;
                    divide: (divisor: string | number | Long) => Long;
                    div: (divisor: string | number | Long) => Long;
                    equals: (other: string | number | Long) => boolean;
                    eq: (other: string | number | Long) => boolean;
                    getHighBits: () => number;
                    getHighBitsUnsigned: () => number;
                    getLowBits: () => number;
                    getLowBitsUnsigned: () => number;
                    getNumBitsAbs: () => number;
                    greaterThan: (other: string | number | Long) => boolean;
                    gt: (other: string | number | Long) => boolean;
                    greaterThanOrEqual: (other: string | number | Long) => boolean;
                    gte: (other: string | number | Long) => boolean;
                    ge: (other: string | number | Long) => boolean;
                    isEven: () => boolean;
                    isNegative: () => boolean;
                    isOdd: () => boolean;
                    isPositive: () => boolean;
                    isZero: () => boolean;
                    eqz: () => boolean;
                    lessThan: (other: string | number | Long) => boolean;
                    lt: (other: string | number | Long) => boolean;
                    lessThanOrEqual: (other: string | number | Long) => boolean;
                    lte: (other: string | number | Long) => boolean;
                    le: (other: string | number | Long) => boolean;
                    modulo: (other: string | number | Long) => Long;
                    mod: (other: string | number | Long) => Long;
                    rem: (other: string | number | Long) => Long;
                    multiply: (multiplier: string | number | Long) => Long;
                    mul: (multiplier: string | number | Long) => Long;
                    negate: () => Long;
                    neg: () => Long;
                    not: () => Long;
                    countLeadingZeros: () => number;
                    clz: () => number;
                    countTrailingZeros: () => number;
                    ctz: () => number;
                    notEquals: (other: string | number | Long) => boolean;
                    neq: (other: string | number | Long) => boolean;
                    ne: (other: string | number | Long) => boolean;
                    or: (other: string | number | Long) => Long;
                    shiftLeft: (numBits: number | Long) => Long;
                    shl: (numBits: number | Long) => Long;
                    shiftRight: (numBits: number | Long) => Long;
                    shr: (numBits: number | Long) => Long;
                    shiftRightUnsigned: (numBits: number | Long) => Long;
                    shru: (numBits: number | Long) => Long;
                    shr_u: (numBits: number | Long) => Long;
                    rotateLeft: (numBits: number | Long) => Long;
                    rotl: (numBits: number | Long) => Long;
                    rotateRight: (numBits: number | Long) => Long;
                    rotr: (numBits: number | Long) => Long;
                    subtract: (subtrahend: string | number | Long) => Long;
                    sub: (subtrahend: string | number | Long) => Long;
                    toInt: () => number;
                    toNumber: () => number;
                    toBytes: (le?: boolean | undefined) => number[];
                    toBytesLE: () => number[];
                    toBytesBE: () => number[];
                    toSigned: () => Long;
                    toString: (radix?: number | undefined) => string;
                    toUnsigned: () => Long;
                    xor: (other: string | number | Long) => Long;
                } & { [K_47 in Exclude<keyof I["ops"][number]["additionalCommit"]["ref"], "$type" | keyof Long>]: never; }) | undefined;
            } & { [K_48 in Exclude<keyof I["ops"][number]["additionalCommit"], "$type" | "ref">]: never; }) | undefined;
        } & { [K_49 in Exclude<keyof I["ops"][number], "$type" | "begin" | "commit" | "update" | "insert" | "delete" | "migrate" | "compensation" | "gone" | "additionalBegin" | "additionalCommit">]: never; })[] & { [K_50 in Exclude<keyof I["ops"], "$type" | keyof {
            begin?: {
                lsn?: Uint8Array | undefined;
                transactionId?: string | number | Long | undefined;
                commitTimestamp?: string | number | Long | undefined;
                origin?: string | undefined;
                isMigration?: boolean | undefined;
                additionalDataRef?: string | number | Long | undefined;
            } | undefined;
            commit?: {
                lsn?: Uint8Array | undefined;
                transactionId?: string | number | Long | undefined;
                commitTimestamp?: string | number | Long | undefined;
                additionalDataRef?: string | number | Long | undefined;
            } | undefined;
            update?: {
                relationId?: number | undefined;
                rowData?: {
                    values?: Uint8Array[] | undefined;
                    nullsBitmask?: Uint8Array | undefined;
                } | undefined;
                oldRowData?: {
                    values?: Uint8Array[] | undefined;
                    nullsBitmask?: Uint8Array | undefined;
                } | undefined;
                tags?: string[] | undefined;
            } | undefined;
            insert?: {
                relationId?: number | undefined;
                rowData?: {
                    values?: Uint8Array[] | undefined;
                    nullsBitmask?: Uint8Array | undefined;
                } | undefined;
                tags?: string[] | undefined;
            } | undefined;
            delete?: {
                relationId?: number | undefined;
                oldRowData?: {
                    values?: Uint8Array[] | undefined;
                    nullsBitmask?: Uint8Array | undefined;
                } | undefined;
                tags?: string[] | undefined;
            } | undefined;
            migrate?: {
                version?: string | undefined;
                stmts?: {
                    type?: SatOpMigrate_Type | undefined;
                    sql?: string | undefined;
                }[] | undefined;
                table?: {
                    name?: string | undefined;
                    columns?: {
                        name?: string | undefined;
                        sqliteType?: string | undefined;
                        pgType?: {
                            name?: string | undefined;
                            array?: number[] | undefined;
                            size?: number[] | undefined;
                        } | undefined;
                    }[] | undefined;
                    fks?: {
                        fkCols?: string[] | undefined;
                        pkTable?: string | undefined;
                        pkCols?: string[] | undefined;
                    }[] | undefined;
                    pks?: string[] | undefined;
                } | undefined;
                enumType?: {
                    values?: string[] | undefined;
                    name?: string | undefined;
                } | undefined;
            } | undefined;
            compensation?: {
                relationId?: number | undefined;
                tags?: string[] | undefined;
                pkData?: {
                    values?: Uint8Array[] | undefined;
                    nullsBitmask?: Uint8Array | undefined;
                } | undefined;
            } | undefined;
            gone?: {
                relationId?: number | undefined;
                pkData?: {
                    values?: Uint8Array[] | undefined;
                    nullsBitmask?: Uint8Array | undefined;
                } | undefined;
            } | undefined;
            additionalBegin?: {
                ref?: string | number | Long | undefined;
            } | undefined;
            additionalCommit?: {
                ref?: string | number | Long | undefined;
            } | undefined;
        }[]>]: never; }) | undefined;
    } & { [K_51 in Exclude<keyof I, "$type" | "ops">]: never; }>(base?: I): SatOpLog;
    fromPartial<I_1 extends {
        ops?: {
            begin?: {
                lsn?: Uint8Array | undefined;
                transactionId?: string | number | Long | undefined;
                commitTimestamp?: string | number | Long | undefined;
                origin?: string | undefined;
                isMigration?: boolean | undefined;
                additionalDataRef?: string | number | Long | undefined;
            } | undefined;
            commit?: {
                lsn?: Uint8Array | undefined;
                transactionId?: string | number | Long | undefined;
                commitTimestamp?: string | number | Long | undefined;
                additionalDataRef?: string | number | Long | undefined;
            } | undefined;
            update?: {
                relationId?: number | undefined;
                rowData?: {
                    values?: Uint8Array[] | undefined;
                    nullsBitmask?: Uint8Array | undefined;
                } | undefined;
                oldRowData?: {
                    values?: Uint8Array[] | undefined;
                    nullsBitmask?: Uint8Array | undefined;
                } | undefined;
                tags?: string[] | undefined;
            } | undefined;
            insert?: {
                relationId?: number | undefined;
                rowData?: {
                    values?: Uint8Array[] | undefined;
                    nullsBitmask?: Uint8Array | undefined;
                } | undefined;
                tags?: string[] | undefined;
            } | undefined;
            delete?: {
                relationId?: number | undefined;
                oldRowData?: {
                    values?: Uint8Array[] | undefined;
                    nullsBitmask?: Uint8Array | undefined;
                } | undefined;
                tags?: string[] | undefined;
            } | undefined;
            migrate?: {
                version?: string | undefined;
                stmts?: {
                    type?: SatOpMigrate_Type | undefined;
                    sql?: string | undefined;
                }[] | undefined;
                table?: {
                    name?: string | undefined;
                    columns?: {
                        name?: string | undefined;
                        sqliteType?: string | undefined;
                        pgType?: {
                            name?: string | undefined;
                            array?: number[] | undefined;
                            size?: number[] | undefined;
                        } | undefined;
                    }[] | undefined;
                    fks?: {
                        fkCols?: string[] | undefined;
                        pkTable?: string | undefined;
                        pkCols?: string[] | undefined;
                    }[] | undefined;
                    pks?: string[] | undefined;
                } | undefined;
                enumType?: {
                    values?: string[] | undefined;
                    name?: string | undefined;
                } | undefined;
            } | undefined;
            compensation?: {
                relationId?: number | undefined;
                tags?: string[] | undefined;
                pkData?: {
                    values?: Uint8Array[] | undefined;
                    nullsBitmask?: Uint8Array | undefined;
                } | undefined;
            } | undefined;
            gone?: {
                relationId?: number | undefined;
                pkData?: {
                    values?: Uint8Array[] | undefined;
                    nullsBitmask?: Uint8Array | undefined;
                } | undefined;
            } | undefined;
            additionalBegin?: {
                ref?: string | number | Long | undefined;
            } | undefined;
            additionalCommit?: {
                ref?: string | number | Long | undefined;
            } | undefined;
        }[] | undefined;
    } & {
        ops?: ({
            begin?: {
                lsn?: Uint8Array | undefined;
                transactionId?: string | number | Long | undefined;
                commitTimestamp?: string | number | Long | undefined;
                origin?: string | undefined;
                isMigration?: boolean | undefined;
                additionalDataRef?: string | number | Long | undefined;
            } | undefined;
            commit?: {
                lsn?: Uint8Array | undefined;
                transactionId?: string | number | Long | undefined;
                commitTimestamp?: string | number | Long | undefined;
                additionalDataRef?: string | number | Long | undefined;
            } | undefined;
            update?: {
                relationId?: number | undefined;
                rowData?: {
                    values?: Uint8Array[] | undefined;
                    nullsBitmask?: Uint8Array | undefined;
                } | undefined;
                oldRowData?: {
                    values?: Uint8Array[] | undefined;
                    nullsBitmask?: Uint8Array | undefined;
                } | undefined;
                tags?: string[] | undefined;
            } | undefined;
            insert?: {
                relationId?: number | undefined;
                rowData?: {
                    values?: Uint8Array[] | undefined;
                    nullsBitmask?: Uint8Array | undefined;
                } | undefined;
                tags?: string[] | undefined;
            } | undefined;
            delete?: {
                relationId?: number | undefined;
                oldRowData?: {
                    values?: Uint8Array[] | undefined;
                    nullsBitmask?: Uint8Array | undefined;
                } | undefined;
                tags?: string[] | undefined;
            } | undefined;
            migrate?: {
                version?: string | undefined;
                stmts?: {
                    type?: SatOpMigrate_Type | undefined;
                    sql?: string | undefined;
                }[] | undefined;
                table?: {
                    name?: string | undefined;
                    columns?: {
                        name?: string | undefined;
                        sqliteType?: string | undefined;
                        pgType?: {
                            name?: string | undefined;
                            array?: number[] | undefined;
                            size?: number[] | undefined;
                        } | undefined;
                    }[] | undefined;
                    fks?: {
                        fkCols?: string[] | undefined;
                        pkTable?: string | undefined;
                        pkCols?: string[] | undefined;
                    }[] | undefined;
                    pks?: string[] | undefined;
                } | undefined;
                enumType?: {
                    values?: string[] | undefined;
                    name?: string | undefined;
                } | undefined;
            } | undefined;
            compensation?: {
                relationId?: number | undefined;
                tags?: string[] | undefined;
                pkData?: {
                    values?: Uint8Array[] | undefined;
                    nullsBitmask?: Uint8Array | undefined;
                } | undefined;
            } | undefined;
            gone?: {
                relationId?: number | undefined;
                pkData?: {
                    values?: Uint8Array[] | undefined;
                    nullsBitmask?: Uint8Array | undefined;
                } | undefined;
            } | undefined;
            additionalBegin?: {
                ref?: string | number | Long | undefined;
            } | undefined;
            additionalCommit?: {
                ref?: string | number | Long | undefined;
            } | undefined;
        }[] & ({
            begin?: {
                lsn?: Uint8Array | undefined;
                transactionId?: string | number | Long | undefined;
                commitTimestamp?: string | number | Long | undefined;
                origin?: string | undefined;
                isMigration?: boolean | undefined;
                additionalDataRef?: string | number | Long | undefined;
            } | undefined;
            commit?: {
                lsn?: Uint8Array | undefined;
                transactionId?: string | number | Long | undefined;
                commitTimestamp?: string | number | Long | undefined;
                additionalDataRef?: string | number | Long | undefined;
            } | undefined;
            update?: {
                relationId?: number | undefined;
                rowData?: {
                    values?: Uint8Array[] | undefined;
                    nullsBitmask?: Uint8Array | undefined;
                } | undefined;
                oldRowData?: {
                    values?: Uint8Array[] | undefined;
                    nullsBitmask?: Uint8Array | undefined;
                } | undefined;
                tags?: string[] | undefined;
            } | undefined;
            insert?: {
                relationId?: number | undefined;
                rowData?: {
                    values?: Uint8Array[] | undefined;
                    nullsBitmask?: Uint8Array | undefined;
                } | undefined;
                tags?: string[] | undefined;
            } | undefined;
            delete?: {
                relationId?: number | undefined;
                oldRowData?: {
                    values?: Uint8Array[] | undefined;
                    nullsBitmask?: Uint8Array | undefined;
                } | undefined;
                tags?: string[] | undefined;
            } | undefined;
            migrate?: {
                version?: string | undefined;
                stmts?: {
                    type?: SatOpMigrate_Type | undefined;
                    sql?: string | undefined;
                }[] | undefined;
                table?: {
                    name?: string | undefined;
                    columns?: {
                        name?: string | undefined;
                        sqliteType?: string | undefined;
                        pgType?: {
                            name?: string | undefined;
                            array?: number[] | undefined;
                            size?: number[] | undefined;
                        } | undefined;
                    }[] | undefined;
                    fks?: {
                        fkCols?: string[] | undefined;
                        pkTable?: string | undefined;
                        pkCols?: string[] | undefined;
                    }[] | undefined;
                    pks?: string[] | undefined;
                } | undefined;
                enumType?: {
                    values?: string[] | undefined;
                    name?: string | undefined;
                } | undefined;
            } | undefined;
            compensation?: {
                relationId?: number | undefined;
                tags?: string[] | undefined;
                pkData?: {
                    values?: Uint8Array[] | undefined;
                    nullsBitmask?: Uint8Array | undefined;
                } | undefined;
            } | undefined;
            gone?: {
                relationId?: number | undefined;
                pkData?: {
                    values?: Uint8Array[] | undefined;
                    nullsBitmask?: Uint8Array | undefined;
                } | undefined;
            } | undefined;
            additionalBegin?: {
                ref?: string | number | Long | undefined;
            } | undefined;
            additionalCommit?: {
                ref?: string | number | Long | undefined;
            } | undefined;
        } & {
            begin?: ({
                lsn?: Uint8Array | undefined;
                transactionId?: string | number | Long | undefined;
                commitTimestamp?: string | number | Long | undefined;
                origin?: string | undefined;
                isMigration?: boolean | undefined;
                additionalDataRef?: string | number | Long | undefined;
            } & {
                lsn?: Uint8Array | undefined;
                transactionId?: string | number | (Long & {
                    high: number;
                    low: number;
                    unsigned: boolean;
                    add: (addend: string | number | Long) => Long;
                    and: (other: string | number | Long) => Long;
                    compare: (other: string | number | Long) => number;
                    comp: (other: string | number | Long) => number;
                    divide: (divisor: string | number | Long) => Long;
                    div: (divisor: string | number | Long) => Long;
                    equals: (other: string | number | Long) => boolean;
                    eq: (other: string | number | Long) => boolean;
                    getHighBits: () => number;
                    getHighBitsUnsigned: () => number;
                    getLowBits: () => number;
                    getLowBitsUnsigned: () => number;
                    getNumBitsAbs: () => number;
                    greaterThan: (other: string | number | Long) => boolean;
                    gt: (other: string | number | Long) => boolean;
                    greaterThanOrEqual: (other: string | number | Long) => boolean;
                    gte: (other: string | number | Long) => boolean;
                    ge: (other: string | number | Long) => boolean;
                    isEven: () => boolean;
                    isNegative: () => boolean;
                    isOdd: () => boolean;
                    isPositive: () => boolean;
                    isZero: () => boolean;
                    eqz: () => boolean;
                    lessThan: (other: string | number | Long) => boolean;
                    lt: (other: string | number | Long) => boolean;
                    lessThanOrEqual: (other: string | number | Long) => boolean;
                    lte: (other: string | number | Long) => boolean;
                    le: (other: string | number | Long) => boolean;
                    modulo: (other: string | number | Long) => Long;
                    mod: (other: string | number | Long) => Long;
                    rem: (other: string | number | Long) => Long;
                    multiply: (multiplier: string | number | Long) => Long;
                    mul: (multiplier: string | number | Long) => Long;
                    negate: () => Long;
                    neg: () => Long;
                    not: () => Long;
                    countLeadingZeros: () => number;
                    clz: () => number;
                    countTrailingZeros: () => number;
                    ctz: () => number;
                    notEquals: (other: string | number | Long) => boolean;
                    neq: (other: string | number | Long) => boolean;
                    ne: (other: string | number | Long) => boolean;
                    or: (other: string | number | Long) => Long;
                    shiftLeft: (numBits: number | Long) => Long;
                    shl: (numBits: number | Long) => Long;
                    shiftRight: (numBits: number | Long) => Long;
                    shr: (numBits: number | Long) => Long;
                    shiftRightUnsigned: (numBits: number | Long) => Long;
                    shru: (numBits: number | Long) => Long;
                    shr_u: (numBits: number | Long) => Long;
                    rotateLeft: (numBits: number | Long) => Long;
                    rotl: (numBits: number | Long) => Long;
                    rotateRight: (numBits: number | Long) => Long;
                    rotr: (numBits: number | Long) => Long;
                    subtract: (subtrahend: string | number | Long) => Long;
                    sub: (subtrahend: string | number | Long) => Long;
                    toInt: () => number;
                    toNumber: () => number;
                    toBytes: (le?: boolean | undefined) => number[];
                    toBytesLE: () => number[];
                    toBytesBE: () => number[];
                    toSigned: () => Long;
                    toString: (radix?: number | undefined) => string;
                    toUnsigned: () => Long;
                    xor: (other: string | number | Long) => Long;
                } & { [K_52 in Exclude<keyof I_1["ops"][number]["begin"]["transactionId"], "$type" | keyof Long>]: never; }) | undefined;
                commitTimestamp?: string | number | (Long & {
                    high: number;
                    low: number;
                    unsigned: boolean;
                    add: (addend: string | number | Long) => Long;
                    and: (other: string | number | Long) => Long;
                    compare: (other: string | number | Long) => number;
                    comp: (other: string | number | Long) => number;
                    divide: (divisor: string | number | Long) => Long;
                    div: (divisor: string | number | Long) => Long;
                    equals: (other: string | number | Long) => boolean;
                    eq: (other: string | number | Long) => boolean;
                    getHighBits: () => number;
                    getHighBitsUnsigned: () => number;
                    getLowBits: () => number;
                    getLowBitsUnsigned: () => number;
                    getNumBitsAbs: () => number;
                    greaterThan: (other: string | number | Long) => boolean;
                    gt: (other: string | number | Long) => boolean;
                    greaterThanOrEqual: (other: string | number | Long) => boolean;
                    gte: (other: string | number | Long) => boolean;
                    ge: (other: string | number | Long) => boolean;
                    isEven: () => boolean;
                    isNegative: () => boolean;
                    isOdd: () => boolean;
                    isPositive: () => boolean;
                    isZero: () => boolean;
                    eqz: () => boolean;
                    lessThan: (other: string | number | Long) => boolean;
                    lt: (other: string | number | Long) => boolean;
                    lessThanOrEqual: (other: string | number | Long) => boolean;
                    lte: (other: string | number | Long) => boolean;
                    le: (other: string | number | Long) => boolean;
                    modulo: (other: string | number | Long) => Long;
                    mod: (other: string | number | Long) => Long;
                    rem: (other: string | number | Long) => Long;
                    multiply: (multiplier: string | number | Long) => Long;
                    mul: (multiplier: string | number | Long) => Long;
                    negate: () => Long;
                    neg: () => Long;
                    not: () => Long;
                    countLeadingZeros: () => number;
                    clz: () => number;
                    countTrailingZeros: () => number;
                    ctz: () => number;
                    notEquals: (other: string | number | Long) => boolean;
                    neq: (other: string | number | Long) => boolean;
                    ne: (other: string | number | Long) => boolean;
                    or: (other: string | number | Long) => Long;
                    shiftLeft: (numBits: number | Long) => Long;
                    shl: (numBits: number | Long) => Long;
                    shiftRight: (numBits: number | Long) => Long;
                    shr: (numBits: number | Long) => Long;
                    shiftRightUnsigned: (numBits: number | Long) => Long;
                    shru: (numBits: number | Long) => Long;
                    shr_u: (numBits: number | Long) => Long;
                    rotateLeft: (numBits: number | Long) => Long;
                    rotl: (numBits: number | Long) => Long;
                    rotateRight: (numBits: number | Long) => Long;
                    rotr: (numBits: number | Long) => Long;
                    subtract: (subtrahend: string | number | Long) => Long;
                    sub: (subtrahend: string | number | Long) => Long;
                    toInt: () => number;
                    toNumber: () => number;
                    toBytes: (le?: boolean | undefined) => number[];
                    toBytesLE: () => number[];
                    toBytesBE: () => number[];
                    toSigned: () => Long;
                    toString: (radix?: number | undefined) => string;
                    toUnsigned: () => Long;
                    xor: (other: string | number | Long) => Long;
                } & { [K_53 in Exclude<keyof I_1["ops"][number]["begin"]["commitTimestamp"], "$type" | keyof Long>]: never; }) | undefined;
                origin?: string | undefined;
                isMigration?: boolean | undefined;
                additionalDataRef?: string | number | (Long & {
                    high: number;
                    low: number;
                    unsigned: boolean;
                    add: (addend: string | number | Long) => Long;
                    and: (other: string | number | Long) => Long;
                    compare: (other: string | number | Long) => number;
                    comp: (other: string | number | Long) => number;
                    divide: (divisor: string | number | Long) => Long;
                    div: (divisor: string | number | Long) => Long;
                    equals: (other: string | number | Long) => boolean;
                    eq: (other: string | number | Long) => boolean;
                    getHighBits: () => number;
                    getHighBitsUnsigned: () => number;
                    getLowBits: () => number;
                    getLowBitsUnsigned: () => number;
                    getNumBitsAbs: () => number;
                    greaterThan: (other: string | number | Long) => boolean;
                    gt: (other: string | number | Long) => boolean;
                    greaterThanOrEqual: (other: string | number | Long) => boolean;
                    gte: (other: string | number | Long) => boolean;
                    ge: (other: string | number | Long) => boolean;
                    isEven: () => boolean;
                    isNegative: () => boolean;
                    isOdd: () => boolean;
                    isPositive: () => boolean;
                    isZero: () => boolean;
                    eqz: () => boolean;
                    lessThan: (other: string | number | Long) => boolean;
                    lt: (other: string | number | Long) => boolean;
                    lessThanOrEqual: (other: string | number | Long) => boolean;
                    lte: (other: string | number | Long) => boolean;
                    le: (other: string | number | Long) => boolean;
                    modulo: (other: string | number | Long) => Long;
                    mod: (other: string | number | Long) => Long;
                    rem: (other: string | number | Long) => Long;
                    multiply: (multiplier: string | number | Long) => Long;
                    mul: (multiplier: string | number | Long) => Long;
                    negate: () => Long;
                    neg: () => Long;
                    not: () => Long;
                    countLeadingZeros: () => number;
                    clz: () => number;
                    countTrailingZeros: () => number;
                    ctz: () => number;
                    notEquals: (other: string | number | Long) => boolean;
                    neq: (other: string | number | Long) => boolean;
                    ne: (other: string | number | Long) => boolean;
                    or: (other: string | number | Long) => Long;
                    shiftLeft: (numBits: number | Long) => Long;
                    shl: (numBits: number | Long) => Long;
                    shiftRight: (numBits: number | Long) => Long;
                    shr: (numBits: number | Long) => Long;
                    shiftRightUnsigned: (numBits: number | Long) => Long;
                    shru: (numBits: number | Long) => Long;
                    shr_u: (numBits: number | Long) => Long;
                    rotateLeft: (numBits: number | Long) => Long;
                    rotl: (numBits: number | Long) => Long;
                    rotateRight: (numBits: number | Long) => Long;
                    rotr: (numBits: number | Long) => Long;
                    subtract: (subtrahend: string | number | Long) => Long;
                    sub: (subtrahend: string | number | Long) => Long;
                    toInt: () => number;
                    toNumber: () => number;
                    toBytes: (le?: boolean | undefined) => number[];
                    toBytesLE: () => number[];
                    toBytesBE: () => number[];
                    toSigned: () => Long;
                    toString: (radix?: number | undefined) => string;
                    toUnsigned: () => Long;
                    xor: (other: string | number | Long) => Long;
                } & { [K_54 in Exclude<keyof I_1["ops"][number]["begin"]["additionalDataRef"], "$type" | keyof Long>]: never; }) | undefined;
            } & { [K_55 in Exclude<keyof I_1["ops"][number]["begin"], "$type" | "lsn" | "transactionId" | "commitTimestamp" | "origin" | "isMigration" | "additionalDataRef">]: never; }) | undefined;
            commit?: ({
                lsn?: Uint8Array | undefined;
                transactionId?: string | number | Long | undefined;
                commitTimestamp?: string | number | Long | undefined;
                additionalDataRef?: string | number | Long | undefined;
            } & {
                lsn?: Uint8Array | undefined;
                transactionId?: string | number | (Long & {
                    high: number;
                    low: number;
                    unsigned: boolean;
                    add: (addend: string | number | Long) => Long;
                    and: (other: string | number | Long) => Long;
                    compare: (other: string | number | Long) => number;
                    comp: (other: string | number | Long) => number;
                    divide: (divisor: string | number | Long) => Long;
                    div: (divisor: string | number | Long) => Long;
                    equals: (other: string | number | Long) => boolean;
                    eq: (other: string | number | Long) => boolean;
                    getHighBits: () => number;
                    getHighBitsUnsigned: () => number;
                    getLowBits: () => number;
                    getLowBitsUnsigned: () => number;
                    getNumBitsAbs: () => number;
                    greaterThan: (other: string | number | Long) => boolean;
                    gt: (other: string | number | Long) => boolean;
                    greaterThanOrEqual: (other: string | number | Long) => boolean;
                    gte: (other: string | number | Long) => boolean;
                    ge: (other: string | number | Long) => boolean;
                    isEven: () => boolean;
                    isNegative: () => boolean;
                    isOdd: () => boolean;
                    isPositive: () => boolean;
                    isZero: () => boolean;
                    eqz: () => boolean;
                    lessThan: (other: string | number | Long) => boolean;
                    lt: (other: string | number | Long) => boolean;
                    lessThanOrEqual: (other: string | number | Long) => boolean;
                    lte: (other: string | number | Long) => boolean;
                    le: (other: string | number | Long) => boolean;
                    modulo: (other: string | number | Long) => Long;
                    mod: (other: string | number | Long) => Long;
                    rem: (other: string | number | Long) => Long;
                    multiply: (multiplier: string | number | Long) => Long;
                    mul: (multiplier: string | number | Long) => Long;
                    negate: () => Long;
                    neg: () => Long;
                    not: () => Long;
                    countLeadingZeros: () => number;
                    clz: () => number;
                    countTrailingZeros: () => number;
                    ctz: () => number;
                    notEquals: (other: string | number | Long) => boolean;
                    neq: (other: string | number | Long) => boolean;
                    ne: (other: string | number | Long) => boolean;
                    or: (other: string | number | Long) => Long;
                    shiftLeft: (numBits: number | Long) => Long;
                    shl: (numBits: number | Long) => Long;
                    shiftRight: (numBits: number | Long) => Long;
                    shr: (numBits: number | Long) => Long;
                    shiftRightUnsigned: (numBits: number | Long) => Long;
                    shru: (numBits: number | Long) => Long;
                    shr_u: (numBits: number | Long) => Long;
                    rotateLeft: (numBits: number | Long) => Long;
                    rotl: (numBits: number | Long) => Long;
                    rotateRight: (numBits: number | Long) => Long;
                    rotr: (numBits: number | Long) => Long;
                    subtract: (subtrahend: string | number | Long) => Long;
                    sub: (subtrahend: string | number | Long) => Long;
                    toInt: () => number;
                    toNumber: () => number;
                    toBytes: (le?: boolean | undefined) => number[];
                    toBytesLE: () => number[];
                    toBytesBE: () => number[];
                    toSigned: () => Long;
                    toString: (radix?: number | undefined) => string;
                    toUnsigned: () => Long;
                    xor: (other: string | number | Long) => Long;
                } & { [K_56 in Exclude<keyof I_1["ops"][number]["commit"]["transactionId"], "$type" | keyof Long>]: never; }) | undefined;
                commitTimestamp?: string | number | (Long & {
                    high: number;
                    low: number;
                    unsigned: boolean;
                    add: (addend: string | number | Long) => Long;
                    and: (other: string | number | Long) => Long;
                    compare: (other: string | number | Long) => number;
                    comp: (other: string | number | Long) => number;
                    divide: (divisor: string | number | Long) => Long;
                    div: (divisor: string | number | Long) => Long;
                    equals: (other: string | number | Long) => boolean;
                    eq: (other: string | number | Long) => boolean;
                    getHighBits: () => number;
                    getHighBitsUnsigned: () => number;
                    getLowBits: () => number;
                    getLowBitsUnsigned: () => number;
                    getNumBitsAbs: () => number;
                    greaterThan: (other: string | number | Long) => boolean;
                    gt: (other: string | number | Long) => boolean;
                    greaterThanOrEqual: (other: string | number | Long) => boolean;
                    gte: (other: string | number | Long) => boolean;
                    ge: (other: string | number | Long) => boolean;
                    isEven: () => boolean;
                    isNegative: () => boolean;
                    isOdd: () => boolean;
                    isPositive: () => boolean;
                    isZero: () => boolean;
                    eqz: () => boolean;
                    lessThan: (other: string | number | Long) => boolean;
                    lt: (other: string | number | Long) => boolean;
                    lessThanOrEqual: (other: string | number | Long) => boolean;
                    lte: (other: string | number | Long) => boolean;
                    le: (other: string | number | Long) => boolean;
                    modulo: (other: string | number | Long) => Long;
                    mod: (other: string | number | Long) => Long;
                    rem: (other: string | number | Long) => Long;
                    multiply: (multiplier: string | number | Long) => Long;
                    mul: (multiplier: string | number | Long) => Long;
                    negate: () => Long;
                    neg: () => Long;
                    not: () => Long;
                    countLeadingZeros: () => number;
                    clz: () => number;
                    countTrailingZeros: () => number;
                    ctz: () => number;
                    notEquals: (other: string | number | Long) => boolean;
                    neq: (other: string | number | Long) => boolean;
                    ne: (other: string | number | Long) => boolean;
                    or: (other: string | number | Long) => Long;
                    shiftLeft: (numBits: number | Long) => Long;
                    shl: (numBits: number | Long) => Long;
                    shiftRight: (numBits: number | Long) => Long;
                    shr: (numBits: number | Long) => Long;
                    shiftRightUnsigned: (numBits: number | Long) => Long;
                    shru: (numBits: number | Long) => Long;
                    shr_u: (numBits: number | Long) => Long;
                    rotateLeft: (numBits: number | Long) => Long;
                    rotl: (numBits: number | Long) => Long;
                    rotateRight: (numBits: number | Long) => Long;
                    rotr: (numBits: number | Long) => Long;
                    subtract: (subtrahend: string | number | Long) => Long;
                    sub: (subtrahend: string | number | Long) => Long;
                    toInt: () => number;
                    toNumber: () => number;
                    toBytes: (le?: boolean | undefined) => number[];
                    toBytesLE: () => number[];
                    toBytesBE: () => number[];
                    toSigned: () => Long;
                    toString: (radix?: number | undefined) => string;
                    toUnsigned: () => Long;
                    xor: (other: string | number | Long) => Long;
                } & { [K_57 in Exclude<keyof I_1["ops"][number]["commit"]["commitTimestamp"], "$type" | keyof Long>]: never; }) | undefined;
                additionalDataRef?: string | number | (Long & {
                    high: number;
                    low: number;
                    unsigned: boolean;
                    add: (addend: string | number | Long) => Long;
                    and: (other: string | number | Long) => Long;
                    compare: (other: string | number | Long) => number;
                    comp: (other: string | number | Long) => number;
                    divide: (divisor: string | number | Long) => Long;
                    div: (divisor: string | number | Long) => Long;
                    equals: (other: string | number | Long) => boolean;
                    eq: (other: string | number | Long) => boolean;
                    getHighBits: () => number;
                    getHighBitsUnsigned: () => number;
                    getLowBits: () => number;
                    getLowBitsUnsigned: () => number;
                    getNumBitsAbs: () => number;
                    greaterThan: (other: string | number | Long) => boolean;
                    gt: (other: string | number | Long) => boolean;
                    greaterThanOrEqual: (other: string | number | Long) => boolean;
                    gte: (other: string | number | Long) => boolean;
                    ge: (other: string | number | Long) => boolean;
                    isEven: () => boolean;
                    isNegative: () => boolean;
                    isOdd: () => boolean;
                    isPositive: () => boolean;
                    isZero: () => boolean;
                    eqz: () => boolean;
                    lessThan: (other: string | number | Long) => boolean;
                    lt: (other: string | number | Long) => boolean;
                    lessThanOrEqual: (other: string | number | Long) => boolean;
                    lte: (other: string | number | Long) => boolean;
                    le: (other: string | number | Long) => boolean;
                    modulo: (other: string | number | Long) => Long;
                    mod: (other: string | number | Long) => Long;
                    rem: (other: string | number | Long) => Long;
                    multiply: (multiplier: string | number | Long) => Long;
                    mul: (multiplier: string | number | Long) => Long;
                    negate: () => Long;
                    neg: () => Long;
                    not: () => Long;
                    countLeadingZeros: () => number;
                    clz: () => number;
                    countTrailingZeros: () => number;
                    ctz: () => number;
                    notEquals: (other: string | number | Long) => boolean;
                    neq: (other: string | number | Long) => boolean;
                    ne: (other: string | number | Long) => boolean;
                    or: (other: string | number | Long) => Long;
                    shiftLeft: (numBits: number | Long) => Long;
                    shl: (numBits: number | Long) => Long;
                    shiftRight: (numBits: number | Long) => Long;
                    shr: (numBits: number | Long) => Long;
                    shiftRightUnsigned: (numBits: number | Long) => Long;
                    shru: (numBits: number | Long) => Long;
                    shr_u: (numBits: number | Long) => Long;
                    rotateLeft: (numBits: number | Long) => Long;
                    rotl: (numBits: number | Long) => Long;
                    rotateRight: (numBits: number | Long) => Long;
                    rotr: (numBits: number | Long) => Long;
                    subtract: (subtrahend: string | number | Long) => Long;
                    sub: (subtrahend: string | number | Long) => Long;
                    toInt: () => number;
                    toNumber: () => number;
                    toBytes: (le?: boolean | undefined) => number[];
                    toBytesLE: () => number[];
                    toBytesBE: () => number[];
                    toSigned: () => Long;
                    toString: (radix?: number | undefined) => string;
                    toUnsigned: () => Long;
                    xor: (other: string | number | Long) => Long;
                } & { [K_58 in Exclude<keyof I_1["ops"][number]["commit"]["additionalDataRef"], "$type" | keyof Long>]: never; }) | undefined;
            } & { [K_59 in Exclude<keyof I_1["ops"][number]["commit"], "$type" | "lsn" | "transactionId" | "commitTimestamp" | "additionalDataRef">]: never; }) | undefined;
            update?: ({
                relationId?: number | undefined;
                rowData?: {
                    values?: Uint8Array[] | undefined;
                    nullsBitmask?: Uint8Array | undefined;
                } | undefined;
                oldRowData?: {
                    values?: Uint8Array[] | undefined;
                    nullsBitmask?: Uint8Array | undefined;
                } | undefined;
                tags?: string[] | undefined;
            } & {
                relationId?: number | undefined;
                rowData?: ({
                    values?: Uint8Array[] | undefined;
                    nullsBitmask?: Uint8Array | undefined;
                } & {
                    values?: (Uint8Array[] & Uint8Array[] & { [K_60 in Exclude<keyof I_1["ops"][number]["update"]["rowData"]["values"], "$type" | keyof Uint8Array[]>]: never; }) | undefined;
                    nullsBitmask?: Uint8Array | undefined;
                } & { [K_61 in Exclude<keyof I_1["ops"][number]["update"]["rowData"], "$type" | "values" | "nullsBitmask">]: never; }) | undefined;
                oldRowData?: ({
                    values?: Uint8Array[] | undefined;
                    nullsBitmask?: Uint8Array | undefined;
                } & {
                    values?: (Uint8Array[] & Uint8Array[] & { [K_62 in Exclude<keyof I_1["ops"][number]["update"]["oldRowData"]["values"], "$type" | keyof Uint8Array[]>]: never; }) | undefined;
                    nullsBitmask?: Uint8Array | undefined;
                } & { [K_63 in Exclude<keyof I_1["ops"][number]["update"]["oldRowData"], "$type" | "values" | "nullsBitmask">]: never; }) | undefined;
                tags?: (string[] & string[] & { [K_64 in Exclude<keyof I_1["ops"][number]["update"]["tags"], "$type" | keyof string[]>]: never; }) | undefined;
            } & { [K_65 in Exclude<keyof I_1["ops"][number]["update"], "$type" | "relationId" | "rowData" | "oldRowData" | "tags">]: never; }) | undefined;
            insert?: ({
                relationId?: number | undefined;
                rowData?: {
                    values?: Uint8Array[] | undefined;
                    nullsBitmask?: Uint8Array | undefined;
                } | undefined;
                tags?: string[] | undefined;
            } & {
                relationId?: number | undefined;
                rowData?: ({
                    values?: Uint8Array[] | undefined;
                    nullsBitmask?: Uint8Array | undefined;
                } & {
                    values?: (Uint8Array[] & Uint8Array[] & { [K_66 in Exclude<keyof I_1["ops"][number]["insert"]["rowData"]["values"], "$type" | keyof Uint8Array[]>]: never; }) | undefined;
                    nullsBitmask?: Uint8Array | undefined;
                } & { [K_67 in Exclude<keyof I_1["ops"][number]["insert"]["rowData"], "$type" | "values" | "nullsBitmask">]: never; }) | undefined;
                tags?: (string[] & string[] & { [K_68 in Exclude<keyof I_1["ops"][number]["insert"]["tags"], "$type" | keyof string[]>]: never; }) | undefined;
            } & { [K_69 in Exclude<keyof I_1["ops"][number]["insert"], "$type" | "relationId" | "rowData" | "tags">]: never; }) | undefined;
            delete?: ({
                relationId?: number | undefined;
                oldRowData?: {
                    values?: Uint8Array[] | undefined;
                    nullsBitmask?: Uint8Array | undefined;
                } | undefined;
                tags?: string[] | undefined;
            } & {
                relationId?: number | undefined;
                oldRowData?: ({
                    values?: Uint8Array[] | undefined;
                    nullsBitmask?: Uint8Array | undefined;
                } & {
                    values?: (Uint8Array[] & Uint8Array[] & { [K_70 in Exclude<keyof I_1["ops"][number]["delete"]["oldRowData"]["values"], "$type" | keyof Uint8Array[]>]: never; }) | undefined;
                    nullsBitmask?: Uint8Array | undefined;
                } & { [K_71 in Exclude<keyof I_1["ops"][number]["delete"]["oldRowData"], "$type" | "values" | "nullsBitmask">]: never; }) | undefined;
                tags?: (string[] & string[] & { [K_72 in Exclude<keyof I_1["ops"][number]["delete"]["tags"], "$type" | keyof string[]>]: never; }) | undefined;
            } & { [K_73 in Exclude<keyof I_1["ops"][number]["delete"], "$type" | "relationId" | "oldRowData" | "tags">]: never; }) | undefined;
            migrate?: ({
                version?: string | undefined;
                stmts?: {
                    type?: SatOpMigrate_Type | undefined;
                    sql?: string | undefined;
                }[] | undefined;
                table?: {
                    name?: string | undefined;
                    columns?: {
                        name?: string | undefined;
                        sqliteType?: string | undefined;
                        pgType?: {
                            name?: string | undefined;
                            array?: number[] | undefined;
                            size?: number[] | undefined;
                        } | undefined;
                    }[] | undefined;
                    fks?: {
                        fkCols?: string[] | undefined;
                        pkTable?: string | undefined;
                        pkCols?: string[] | undefined;
                    }[] | undefined;
                    pks?: string[] | undefined;
                } | undefined;
                enumType?: {
                    values?: string[] | undefined;
                    name?: string | undefined;
                } | undefined;
            } & {
                version?: string | undefined;
                stmts?: ({
                    type?: SatOpMigrate_Type | undefined;
                    sql?: string | undefined;
                }[] & ({
                    type?: SatOpMigrate_Type | undefined;
                    sql?: string | undefined;
                } & {
                    type?: SatOpMigrate_Type | undefined;
                    sql?: string | undefined;
                } & { [K_74 in Exclude<keyof I_1["ops"][number]["migrate"]["stmts"][number], "$type" | "type" | "sql">]: never; })[] & { [K_75 in Exclude<keyof I_1["ops"][number]["migrate"]["stmts"], "$type" | keyof {
                    type?: SatOpMigrate_Type | undefined;
                    sql?: string | undefined;
                }[]>]: never; }) | undefined;
                table?: ({
                    name?: string | undefined;
                    columns?: {
                        name?: string | undefined;
                        sqliteType?: string | undefined;
                        pgType?: {
                            name?: string | undefined;
                            array?: number[] | undefined;
                            size?: number[] | undefined;
                        } | undefined;
                    }[] | undefined;
                    fks?: {
                        fkCols?: string[] | undefined;
                        pkTable?: string | undefined;
                        pkCols?: string[] | undefined;
                    }[] | undefined;
                    pks?: string[] | undefined;
                } & {
                    name?: string | undefined;
                    columns?: ({
                        name?: string | undefined;
                        sqliteType?: string | undefined;
                        pgType?: {
                            name?: string | undefined;
                            array?: number[] | undefined;
                            size?: number[] | undefined;
                        } | undefined;
                    }[] & ({
                        name?: string | undefined;
                        sqliteType?: string | undefined;
                        pgType?: {
                            name?: string | undefined;
                            array?: number[] | undefined;
                            size?: number[] | undefined;
                        } | undefined;
                    } & {
                        name?: string | undefined;
                        sqliteType?: string | undefined;
                        pgType?: ({
                            name?: string | undefined;
                            array?: number[] | undefined;
                            size?: number[] | undefined;
                        } & {
                            name?: string | undefined;
                            array?: (number[] & number[] & { [K_76 in Exclude<keyof I_1["ops"][number]["migrate"]["table"]["columns"][number]["pgType"]["array"], "$type" | keyof number[]>]: never; }) | undefined;
                            size?: (number[] & number[] & { [K_77 in Exclude<keyof I_1["ops"][number]["migrate"]["table"]["columns"][number]["pgType"]["size"], "$type" | keyof number[]>]: never; }) | undefined;
                        } & { [K_78 in Exclude<keyof I_1["ops"][number]["migrate"]["table"]["columns"][number]["pgType"], "$type" | "name" | "array" | "size">]: never; }) | undefined;
                    } & { [K_79 in Exclude<keyof I_1["ops"][number]["migrate"]["table"]["columns"][number], "$type" | "name" | "sqliteType" | "pgType">]: never; })[] & { [K_80 in Exclude<keyof I_1["ops"][number]["migrate"]["table"]["columns"], "$type" | keyof {
                        name?: string | undefined;
                        sqliteType?: string | undefined;
                        pgType?: {
                            name?: string | undefined;
                            array?: number[] | undefined;
                            size?: number[] | undefined;
                        } | undefined;
                    }[]>]: never; }) | undefined;
                    fks?: ({
                        fkCols?: string[] | undefined;
                        pkTable?: string | undefined;
                        pkCols?: string[] | undefined;
                    }[] & ({
                        fkCols?: string[] | undefined;
                        pkTable?: string | undefined;
                        pkCols?: string[] | undefined;
                    } & {
                        fkCols?: (string[] & string[] & { [K_81 in Exclude<keyof I_1["ops"][number]["migrate"]["table"]["fks"][number]["fkCols"], "$type" | keyof string[]>]: never; }) | undefined;
                        pkTable?: string | undefined;
                        pkCols?: (string[] & string[] & { [K_82 in Exclude<keyof I_1["ops"][number]["migrate"]["table"]["fks"][number]["pkCols"], "$type" | keyof string[]>]: never; }) | undefined;
                    } & { [K_83 in Exclude<keyof I_1["ops"][number]["migrate"]["table"]["fks"][number], "$type" | "fkCols" | "pkTable" | "pkCols">]: never; })[] & { [K_84 in Exclude<keyof I_1["ops"][number]["migrate"]["table"]["fks"], "$type" | keyof {
                        fkCols?: string[] | undefined;
                        pkTable?: string | undefined;
                        pkCols?: string[] | undefined;
                    }[]>]: never; }) | undefined;
                    pks?: (string[] & string[] & { [K_85 in Exclude<keyof I_1["ops"][number]["migrate"]["table"]["pks"], "$type" | keyof string[]>]: never; }) | undefined;
                } & { [K_86 in Exclude<keyof I_1["ops"][number]["migrate"]["table"], "$type" | "name" | "columns" | "fks" | "pks">]: never; }) | undefined;
                enumType?: ({
                    values?: string[] | undefined;
                    name?: string | undefined;
                } & {
                    values?: (string[] & string[] & { [K_87 in Exclude<keyof I_1["ops"][number]["migrate"]["enumType"]["values"], "$type" | keyof string[]>]: never; }) | undefined;
                    name?: string | undefined;
                } & { [K_88 in Exclude<keyof I_1["ops"][number]["migrate"]["enumType"], "$type" | "values" | "name">]: never; }) | undefined;
            } & { [K_89 in Exclude<keyof I_1["ops"][number]["migrate"], "$type" | "version" | "stmts" | "table" | "enumType">]: never; }) | undefined;
            compensation?: ({
                relationId?: number | undefined;
                tags?: string[] | undefined;
                pkData?: {
                    values?: Uint8Array[] | undefined;
                    nullsBitmask?: Uint8Array | undefined;
                } | undefined;
            } & {
                relationId?: number | undefined;
                tags?: (string[] & string[] & { [K_90 in Exclude<keyof I_1["ops"][number]["compensation"]["tags"], "$type" | keyof string[]>]: never; }) | undefined;
                pkData?: ({
                    values?: Uint8Array[] | undefined;
                    nullsBitmask?: Uint8Array | undefined;
                } & {
                    values?: (Uint8Array[] & Uint8Array[] & { [K_91 in Exclude<keyof I_1["ops"][number]["compensation"]["pkData"]["values"], "$type" | keyof Uint8Array[]>]: never; }) | undefined;
                    nullsBitmask?: Uint8Array | undefined;
                } & { [K_92 in Exclude<keyof I_1["ops"][number]["compensation"]["pkData"], "$type" | "values" | "nullsBitmask">]: never; }) | undefined;
            } & { [K_93 in Exclude<keyof I_1["ops"][number]["compensation"], "$type" | "relationId" | "tags" | "pkData">]: never; }) | undefined;
            gone?: ({
                relationId?: number | undefined;
                pkData?: {
                    values?: Uint8Array[] | undefined;
                    nullsBitmask?: Uint8Array | undefined;
                } | undefined;
            } & {
                relationId?: number | undefined;
                pkData?: ({
                    values?: Uint8Array[] | undefined;
                    nullsBitmask?: Uint8Array | undefined;
                } & {
                    values?: (Uint8Array[] & Uint8Array[] & { [K_94 in Exclude<keyof I_1["ops"][number]["gone"]["pkData"]["values"], "$type" | keyof Uint8Array[]>]: never; }) | undefined;
                    nullsBitmask?: Uint8Array | undefined;
                } & { [K_95 in Exclude<keyof I_1["ops"][number]["gone"]["pkData"], "$type" | "values" | "nullsBitmask">]: never; }) | undefined;
            } & { [K_96 in Exclude<keyof I_1["ops"][number]["gone"], "$type" | "relationId" | "pkData">]: never; }) | undefined;
            additionalBegin?: ({
                ref?: string | number | Long | undefined;
            } & {
                ref?: string | number | (Long & {
                    high: number;
                    low: number;
                    unsigned: boolean;
                    add: (addend: string | number | Long) => Long;
                    and: (other: string | number | Long) => Long;
                    compare: (other: string | number | Long) => number;
                    comp: (other: string | number | Long) => number;
                    divide: (divisor: string | number | Long) => Long;
                    div: (divisor: string | number | Long) => Long;
                    equals: (other: string | number | Long) => boolean;
                    eq: (other: string | number | Long) => boolean;
                    getHighBits: () => number;
                    getHighBitsUnsigned: () => number;
                    getLowBits: () => number;
                    getLowBitsUnsigned: () => number;
                    getNumBitsAbs: () => number;
                    greaterThan: (other: string | number | Long) => boolean;
                    gt: (other: string | number | Long) => boolean;
                    greaterThanOrEqual: (other: string | number | Long) => boolean;
                    gte: (other: string | number | Long) => boolean;
                    ge: (other: string | number | Long) => boolean;
                    isEven: () => boolean;
                    isNegative: () => boolean;
                    isOdd: () => boolean;
                    isPositive: () => boolean;
                    isZero: () => boolean;
                    eqz: () => boolean;
                    lessThan: (other: string | number | Long) => boolean;
                    lt: (other: string | number | Long) => boolean;
                    lessThanOrEqual: (other: string | number | Long) => boolean;
                    lte: (other: string | number | Long) => boolean;
                    le: (other: string | number | Long) => boolean;
                    modulo: (other: string | number | Long) => Long;
                    mod: (other: string | number | Long) => Long;
                    rem: (other: string | number | Long) => Long;
                    multiply: (multiplier: string | number | Long) => Long;
                    mul: (multiplier: string | number | Long) => Long;
                    negate: () => Long;
                    neg: () => Long;
                    not: () => Long;
                    countLeadingZeros: () => number;
                    clz: () => number;
                    countTrailingZeros: () => number;
                    ctz: () => number;
                    notEquals: (other: string | number | Long) => boolean;
                    neq: (other: string | number | Long) => boolean;
                    ne: (other: string | number | Long) => boolean;
                    or: (other: string | number | Long) => Long;
                    shiftLeft: (numBits: number | Long) => Long;
                    shl: (numBits: number | Long) => Long;
                    shiftRight: (numBits: number | Long) => Long;
                    shr: (numBits: number | Long) => Long;
                    shiftRightUnsigned: (numBits: number | Long) => Long;
                    shru: (numBits: number | Long) => Long;
                    shr_u: (numBits: number | Long) => Long;
                    rotateLeft: (numBits: number | Long) => Long;
                    rotl: (numBits: number | Long) => Long;
                    rotateRight: (numBits: number | Long) => Long;
                    rotr: (numBits: number | Long) => Long;
                    subtract: (subtrahend: string | number | Long) => Long;
                    sub: (subtrahend: string | number | Long) => Long;
                    toInt: () => number;
                    toNumber: () => number;
                    toBytes: (le?: boolean | undefined) => number[];
                    toBytesLE: () => number[];
                    toBytesBE: () => number[];
                    toSigned: () => Long;
                    toString: (radix?: number | undefined) => string;
                    toUnsigned: () => Long;
                    xor: (other: string | number | Long) => Long;
                } & { [K_97 in Exclude<keyof I_1["ops"][number]["additionalBegin"]["ref"], "$type" | keyof Long>]: never; }) | undefined;
            } & { [K_98 in Exclude<keyof I_1["ops"][number]["additionalBegin"], "$type" | "ref">]: never; }) | undefined;
            additionalCommit?: ({
                ref?: string | number | Long | undefined;
            } & {
                ref?: string | number | (Long & {
                    high: number;
                    low: number;
                    unsigned: boolean;
                    add: (addend: string | number | Long) => Long;
                    and: (other: string | number | Long) => Long;
                    compare: (other: string | number | Long) => number;
                    comp: (other: string | number | Long) => number;
                    divide: (divisor: string | number | Long) => Long;
                    div: (divisor: string | number | Long) => Long;
                    equals: (other: string | number | Long) => boolean;
                    eq: (other: string | number | Long) => boolean;
                    getHighBits: () => number;
                    getHighBitsUnsigned: () => number;
                    getLowBits: () => number;
                    getLowBitsUnsigned: () => number;
                    getNumBitsAbs: () => number;
                    greaterThan: (other: string | number | Long) => boolean;
                    gt: (other: string | number | Long) => boolean;
                    greaterThanOrEqual: (other: string | number | Long) => boolean;
                    gte: (other: string | number | Long) => boolean;
                    ge: (other: string | number | Long) => boolean;
                    isEven: () => boolean;
                    isNegative: () => boolean;
                    isOdd: () => boolean;
                    isPositive: () => boolean;
                    isZero: () => boolean;
                    eqz: () => boolean;
                    lessThan: (other: string | number | Long) => boolean;
                    lt: (other: string | number | Long) => boolean;
                    lessThanOrEqual: (other: string | number | Long) => boolean;
                    lte: (other: string | number | Long) => boolean;
                    le: (other: string | number | Long) => boolean;
                    modulo: (other: string | number | Long) => Long;
                    mod: (other: string | number | Long) => Long;
                    rem: (other: string | number | Long) => Long;
                    multiply: (multiplier: string | number | Long) => Long;
                    mul: (multiplier: string | number | Long) => Long;
                    negate: () => Long;
                    neg: () => Long;
                    not: () => Long;
                    countLeadingZeros: () => number;
                    clz: () => number;
                    countTrailingZeros: () => number;
                    ctz: () => number;
                    notEquals: (other: string | number | Long) => boolean;
                    neq: (other: string | number | Long) => boolean;
                    ne: (other: string | number | Long) => boolean;
                    or: (other: string | number | Long) => Long;
                    shiftLeft: (numBits: number | Long) => Long;
                    shl: (numBits: number | Long) => Long;
                    shiftRight: (numBits: number | Long) => Long;
                    shr: (numBits: number | Long) => Long;
                    shiftRightUnsigned: (numBits: number | Long) => Long;
                    shru: (numBits: number | Long) => Long;
                    shr_u: (numBits: number | Long) => Long;
                    rotateLeft: (numBits: number | Long) => Long;
                    rotl: (numBits: number | Long) => Long;
                    rotateRight: (numBits: number | Long) => Long;
                    rotr: (numBits: number | Long) => Long;
                    subtract: (subtrahend: string | number | Long) => Long;
                    sub: (subtrahend: string | number | Long) => Long;
                    toInt: () => number;
                    toNumber: () => number;
                    toBytes: (le?: boolean | undefined) => number[];
                    toBytesLE: () => number[];
                    toBytesBE: () => number[];
                    toSigned: () => Long;
                    toString: (radix?: number | undefined) => string;
                    toUnsigned: () => Long;
                    xor: (other: string | number | Long) => Long;
                } & { [K_99 in Exclude<keyof I_1["ops"][number]["additionalCommit"]["ref"], "$type" | keyof Long>]: never; }) | undefined;
            } & { [K_100 in Exclude<keyof I_1["ops"][number]["additionalCommit"], "$type" | "ref">]: never; }) | undefined;
        } & { [K_101 in Exclude<keyof I_1["ops"][number], "$type" | "begin" | "commit" | "update" | "insert" | "delete" | "migrate" | "compensation" | "gone" | "additionalBegin" | "additionalCommit">]: never; })[] & { [K_102 in Exclude<keyof I_1["ops"], "$type" | keyof {
            begin?: {
                lsn?: Uint8Array | undefined;
                transactionId?: string | number | Long | undefined;
                commitTimestamp?: string | number | Long | undefined;
                origin?: string | undefined;
                isMigration?: boolean | undefined;
                additionalDataRef?: string | number | Long | undefined;
            } | undefined;
            commit?: {
                lsn?: Uint8Array | undefined;
                transactionId?: string | number | Long | undefined;
                commitTimestamp?: string | number | Long | undefined;
                additionalDataRef?: string | number | Long | undefined;
            } | undefined;
            update?: {
                relationId?: number | undefined;
                rowData?: {
                    values?: Uint8Array[] | undefined;
                    nullsBitmask?: Uint8Array | undefined;
                } | undefined;
                oldRowData?: {
                    values?: Uint8Array[] | undefined;
                    nullsBitmask?: Uint8Array | undefined;
                } | undefined;
                tags?: string[] | undefined;
            } | undefined;
            insert?: {
                relationId?: number | undefined;
                rowData?: {
                    values?: Uint8Array[] | undefined;
                    nullsBitmask?: Uint8Array | undefined;
                } | undefined;
                tags?: string[] | undefined;
            } | undefined;
            delete?: {
                relationId?: number | undefined;
                oldRowData?: {
                    values?: Uint8Array[] | undefined;
                    nullsBitmask?: Uint8Array | undefined;
                } | undefined;
                tags?: string[] | undefined;
            } | undefined;
            migrate?: {
                version?: string | undefined;
                stmts?: {
                    type?: SatOpMigrate_Type | undefined;
                    sql?: string | undefined;
                }[] | undefined;
                table?: {
                    name?: string | undefined;
                    columns?: {
                        name?: string | undefined;
                        sqliteType?: string | undefined;
                        pgType?: {
                            name?: string | undefined;
                            array?: number[] | undefined;
                            size?: number[] | undefined;
                        } | undefined;
                    }[] | undefined;
                    fks?: {
                        fkCols?: string[] | undefined;
                        pkTable?: string | undefined;
                        pkCols?: string[] | undefined;
                    }[] | undefined;
                    pks?: string[] | undefined;
                } | undefined;
                enumType?: {
                    values?: string[] | undefined;
                    name?: string | undefined;
                } | undefined;
            } | undefined;
            compensation?: {
                relationId?: number | undefined;
                tags?: string[] | undefined;
                pkData?: {
                    values?: Uint8Array[] | undefined;
                    nullsBitmask?: Uint8Array | undefined;
                } | undefined;
            } | undefined;
            gone?: {
                relationId?: number | undefined;
                pkData?: {
                    values?: Uint8Array[] | undefined;
                    nullsBitmask?: Uint8Array | undefined;
                } | undefined;
            } | undefined;
            additionalBegin?: {
                ref?: string | number | Long | undefined;
            } | undefined;
            additionalCommit?: {
                ref?: string | number | Long | undefined;
            } | undefined;
        }[]>]: never; }) | undefined;
    } & { [K_103 in Exclude<keyof I_1, "$type" | "ops">]: never; }>(object: I_1): SatOpLog;
};
export declare const SatOpLogAck: {
    $type: "Electric.Satellite.SatOpLogAck";
    encode(message: SatOpLogAck, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): SatOpLogAck;
    create<I extends {
        lsn?: Uint8Array | undefined;
        subscriptionIds?: string[] | undefined;
        ackTimestamp?: string | number | Long | undefined;
        transactionId?: string | number | Long | undefined;
        additionalDataSourceIds?: (string | number | Long)[] | undefined;
        goneSubscriptionIds?: string[] | undefined;
    } & {
        lsn?: Uint8Array | undefined;
        subscriptionIds?: (string[] & string[] & { [K in Exclude<keyof I["subscriptionIds"], "$type" | keyof string[]>]: never; }) | undefined;
        ackTimestamp?: string | number | (Long & {
            high: number;
            low: number;
            unsigned: boolean;
            add: (addend: string | number | Long) => Long;
            and: (other: string | number | Long) => Long;
            compare: (other: string | number | Long) => number;
            comp: (other: string | number | Long) => number;
            divide: (divisor: string | number | Long) => Long;
            div: (divisor: string | number | Long) => Long;
            equals: (other: string | number | Long) => boolean;
            eq: (other: string | number | Long) => boolean;
            getHighBits: () => number;
            getHighBitsUnsigned: () => number;
            getLowBits: () => number;
            getLowBitsUnsigned: () => number;
            getNumBitsAbs: () => number;
            greaterThan: (other: string | number | Long) => boolean;
            gt: (other: string | number | Long) => boolean;
            greaterThanOrEqual: (other: string | number | Long) => boolean;
            gte: (other: string | number | Long) => boolean;
            ge: (other: string | number | Long) => boolean;
            isEven: () => boolean;
            isNegative: () => boolean;
            isOdd: () => boolean;
            isPositive: () => boolean;
            isZero: () => boolean;
            eqz: () => boolean;
            lessThan: (other: string | number | Long) => boolean;
            lt: (other: string | number | Long) => boolean;
            lessThanOrEqual: (other: string | number | Long) => boolean;
            lte: (other: string | number | Long) => boolean;
            le: (other: string | number | Long) => boolean;
            modulo: (other: string | number | Long) => Long;
            mod: (other: string | number | Long) => Long;
            rem: (other: string | number | Long) => Long;
            multiply: (multiplier: string | number | Long) => Long;
            mul: (multiplier: string | number | Long) => Long;
            negate: () => Long;
            neg: () => Long;
            not: () => Long;
            countLeadingZeros: () => number;
            clz: () => number;
            countTrailingZeros: () => number;
            ctz: () => number;
            notEquals: (other: string | number | Long) => boolean;
            neq: (other: string | number | Long) => boolean;
            ne: (other: string | number | Long) => boolean;
            or: (other: string | number | Long) => Long;
            shiftLeft: (numBits: number | Long) => Long;
            shl: (numBits: number | Long) => Long;
            shiftRight: (numBits: number | Long) => Long;
            shr: (numBits: number | Long) => Long;
            shiftRightUnsigned: (numBits: number | Long) => Long;
            shru: (numBits: number | Long) => Long;
            shr_u: (numBits: number | Long) => Long;
            rotateLeft: (numBits: number | Long) => Long;
            rotl: (numBits: number | Long) => Long;
            rotateRight: (numBits: number | Long) => Long;
            rotr: (numBits: number | Long) => Long;
            subtract: (subtrahend: string | number | Long) => Long;
            sub: (subtrahend: string | number | Long) => Long;
            toInt: () => number;
            toNumber: () => number;
            toBytes: (le?: boolean | undefined) => number[];
            toBytesLE: () => number[];
            toBytesBE: () => number[];
            toSigned: () => Long;
            toString: (radix?: number | undefined) => string;
            toUnsigned: () => Long;
            xor: (other: string | number | Long) => Long;
        } & { [K_1 in Exclude<keyof I["ackTimestamp"], "$type" | keyof Long>]: never; }) | undefined;
        transactionId?: string | number | (Long & {
            high: number;
            low: number;
            unsigned: boolean;
            add: (addend: string | number | Long) => Long;
            and: (other: string | number | Long) => Long;
            compare: (other: string | number | Long) => number;
            comp: (other: string | number | Long) => number;
            divide: (divisor: string | number | Long) => Long;
            div: (divisor: string | number | Long) => Long;
            equals: (other: string | number | Long) => boolean;
            eq: (other: string | number | Long) => boolean;
            getHighBits: () => number;
            getHighBitsUnsigned: () => number;
            getLowBits: () => number;
            getLowBitsUnsigned: () => number;
            getNumBitsAbs: () => number;
            greaterThan: (other: string | number | Long) => boolean;
            gt: (other: string | number | Long) => boolean;
            greaterThanOrEqual: (other: string | number | Long) => boolean;
            gte: (other: string | number | Long) => boolean;
            ge: (other: string | number | Long) => boolean;
            isEven: () => boolean;
            isNegative: () => boolean;
            isOdd: () => boolean;
            isPositive: () => boolean;
            isZero: () => boolean;
            eqz: () => boolean;
            lessThan: (other: string | number | Long) => boolean;
            lt: (other: string | number | Long) => boolean;
            lessThanOrEqual: (other: string | number | Long) => boolean;
            lte: (other: string | number | Long) => boolean;
            le: (other: string | number | Long) => boolean;
            modulo: (other: string | number | Long) => Long;
            mod: (other: string | number | Long) => Long;
            rem: (other: string | number | Long) => Long;
            multiply: (multiplier: string | number | Long) => Long;
            mul: (multiplier: string | number | Long) => Long;
            negate: () => Long;
            neg: () => Long;
            not: () => Long;
            countLeadingZeros: () => number;
            clz: () => number;
            countTrailingZeros: () => number;
            ctz: () => number;
            notEquals: (other: string | number | Long) => boolean;
            neq: (other: string | number | Long) => boolean;
            ne: (other: string | number | Long) => boolean;
            or: (other: string | number | Long) => Long;
            shiftLeft: (numBits: number | Long) => Long;
            shl: (numBits: number | Long) => Long;
            shiftRight: (numBits: number | Long) => Long;
            shr: (numBits: number | Long) => Long;
            shiftRightUnsigned: (numBits: number | Long) => Long;
            shru: (numBits: number | Long) => Long;
            shr_u: (numBits: number | Long) => Long;
            rotateLeft: (numBits: number | Long) => Long;
            rotl: (numBits: number | Long) => Long;
            rotateRight: (numBits: number | Long) => Long;
            rotr: (numBits: number | Long) => Long;
            subtract: (subtrahend: string | number | Long) => Long;
            sub: (subtrahend: string | number | Long) => Long;
            toInt: () => number;
            toNumber: () => number;
            toBytes: (le?: boolean | undefined) => number[];
            toBytesLE: () => number[];
            toBytesBE: () => number[];
            toSigned: () => Long;
            toString: (radix?: number | undefined) => string;
            toUnsigned: () => Long;
            xor: (other: string | number | Long) => Long;
        } & { [K_2 in Exclude<keyof I["transactionId"], "$type" | keyof Long>]: never; }) | undefined;
        additionalDataSourceIds?: ((string | number | Long)[] & (string | number | (Long & {
            high: number;
            low: number;
            unsigned: boolean;
            add: (addend: string | number | Long) => Long;
            and: (other: string | number | Long) => Long;
            compare: (other: string | number | Long) => number;
            comp: (other: string | number | Long) => number;
            divide: (divisor: string | number | Long) => Long;
            div: (divisor: string | number | Long) => Long;
            equals: (other: string | number | Long) => boolean;
            eq: (other: string | number | Long) => boolean;
            getHighBits: () => number;
            getHighBitsUnsigned: () => number;
            getLowBits: () => number;
            getLowBitsUnsigned: () => number;
            getNumBitsAbs: () => number;
            greaterThan: (other: string | number | Long) => boolean;
            gt: (other: string | number | Long) => boolean;
            greaterThanOrEqual: (other: string | number | Long) => boolean;
            gte: (other: string | number | Long) => boolean;
            ge: (other: string | number | Long) => boolean;
            isEven: () => boolean;
            isNegative: () => boolean;
            isOdd: () => boolean;
            isPositive: () => boolean;
            isZero: () => boolean;
            eqz: () => boolean;
            lessThan: (other: string | number | Long) => boolean;
            lt: (other: string | number | Long) => boolean;
            lessThanOrEqual: (other: string | number | Long) => boolean;
            lte: (other: string | number | Long) => boolean;
            le: (other: string | number | Long) => boolean;
            modulo: (other: string | number | Long) => Long;
            mod: (other: string | number | Long) => Long;
            rem: (other: string | number | Long) => Long;
            multiply: (multiplier: string | number | Long) => Long;
            mul: (multiplier: string | number | Long) => Long;
            negate: () => Long;
            neg: () => Long;
            not: () => Long;
            countLeadingZeros: () => number;
            clz: () => number;
            countTrailingZeros: () => number;
            ctz: () => number;
            notEquals: (other: string | number | Long) => boolean;
            neq: (other: string | number | Long) => boolean;
            ne: (other: string | number | Long) => boolean;
            or: (other: string | number | Long) => Long;
            shiftLeft: (numBits: number | Long) => Long;
            shl: (numBits: number | Long) => Long;
            shiftRight: (numBits: number | Long) => Long;
            shr: (numBits: number | Long) => Long;
            shiftRightUnsigned: (numBits: number | Long) => Long;
            shru: (numBits: number | Long) => Long;
            shr_u: (numBits: number | Long) => Long;
            rotateLeft: (numBits: number | Long) => Long;
            rotl: (numBits: number | Long) => Long;
            rotateRight: (numBits: number | Long) => Long;
            rotr: (numBits: number | Long) => Long;
            subtract: (subtrahend: string | number | Long) => Long;
            sub: (subtrahend: string | number | Long) => Long;
            toInt: () => number;
            toNumber: () => number;
            toBytes: (le?: boolean | undefined) => number[];
            toBytesLE: () => number[];
            toBytesBE: () => number[];
            toSigned: () => Long;
            toString: (radix?: number | undefined) => string;
            toUnsigned: () => Long;
            xor: (other: string | number | Long) => Long;
        } & { [K_3 in Exclude<keyof I["additionalDataSourceIds"][number], "$type" | keyof Long>]: never; }))[] & { [K_4 in Exclude<keyof I["additionalDataSourceIds"], "$type" | keyof (string | number | Long)[]>]: never; }) | undefined;
        goneSubscriptionIds?: (string[] & string[] & { [K_5 in Exclude<keyof I["goneSubscriptionIds"], "$type" | keyof string[]>]: never; }) | undefined;
    } & { [K_6 in Exclude<keyof I, "$type" | "lsn" | "subscriptionIds" | "ackTimestamp" | "transactionId" | "additionalDataSourceIds" | "goneSubscriptionIds">]: never; }>(base?: I): SatOpLogAck;
    fromPartial<I_1 extends {
        lsn?: Uint8Array | undefined;
        subscriptionIds?: string[] | undefined;
        ackTimestamp?: string | number | Long | undefined;
        transactionId?: string | number | Long | undefined;
        additionalDataSourceIds?: (string | number | Long)[] | undefined;
        goneSubscriptionIds?: string[] | undefined;
    } & {
        lsn?: Uint8Array | undefined;
        subscriptionIds?: (string[] & string[] & { [K_7 in Exclude<keyof I_1["subscriptionIds"], "$type" | keyof string[]>]: never; }) | undefined;
        ackTimestamp?: string | number | (Long & {
            high: number;
            low: number;
            unsigned: boolean;
            add: (addend: string | number | Long) => Long;
            and: (other: string | number | Long) => Long;
            compare: (other: string | number | Long) => number;
            comp: (other: string | number | Long) => number;
            divide: (divisor: string | number | Long) => Long;
            div: (divisor: string | number | Long) => Long;
            equals: (other: string | number | Long) => boolean;
            eq: (other: string | number | Long) => boolean;
            getHighBits: () => number;
            getHighBitsUnsigned: () => number;
            getLowBits: () => number;
            getLowBitsUnsigned: () => number;
            getNumBitsAbs: () => number;
            greaterThan: (other: string | number | Long) => boolean;
            gt: (other: string | number | Long) => boolean;
            greaterThanOrEqual: (other: string | number | Long) => boolean;
            gte: (other: string | number | Long) => boolean;
            ge: (other: string | number | Long) => boolean;
            isEven: () => boolean;
            isNegative: () => boolean;
            isOdd: () => boolean;
            isPositive: () => boolean;
            isZero: () => boolean;
            eqz: () => boolean;
            lessThan: (other: string | number | Long) => boolean;
            lt: (other: string | number | Long) => boolean;
            lessThanOrEqual: (other: string | number | Long) => boolean;
            lte: (other: string | number | Long) => boolean;
            le: (other: string | number | Long) => boolean;
            modulo: (other: string | number | Long) => Long;
            mod: (other: string | number | Long) => Long;
            rem: (other: string | number | Long) => Long;
            multiply: (multiplier: string | number | Long) => Long;
            mul: (multiplier: string | number | Long) => Long;
            negate: () => Long;
            neg: () => Long;
            not: () => Long;
            countLeadingZeros: () => number;
            clz: () => number;
            countTrailingZeros: () => number;
            ctz: () => number;
            notEquals: (other: string | number | Long) => boolean;
            neq: (other: string | number | Long) => boolean;
            ne: (other: string | number | Long) => boolean;
            or: (other: string | number | Long) => Long;
            shiftLeft: (numBits: number | Long) => Long;
            shl: (numBits: number | Long) => Long;
            shiftRight: (numBits: number | Long) => Long;
            shr: (numBits: number | Long) => Long;
            shiftRightUnsigned: (numBits: number | Long) => Long;
            shru: (numBits: number | Long) => Long;
            shr_u: (numBits: number | Long) => Long;
            rotateLeft: (numBits: number | Long) => Long;
            rotl: (numBits: number | Long) => Long;
            rotateRight: (numBits: number | Long) => Long;
            rotr: (numBits: number | Long) => Long;
            subtract: (subtrahend: string | number | Long) => Long;
            sub: (subtrahend: string | number | Long) => Long;
            toInt: () => number;
            toNumber: () => number;
            toBytes: (le?: boolean | undefined) => number[];
            toBytesLE: () => number[];
            toBytesBE: () => number[];
            toSigned: () => Long;
            toString: (radix?: number | undefined) => string;
            toUnsigned: () => Long;
            xor: (other: string | number | Long) => Long;
        } & { [K_8 in Exclude<keyof I_1["ackTimestamp"], "$type" | keyof Long>]: never; }) | undefined;
        transactionId?: string | number | (Long & {
            high: number;
            low: number;
            unsigned: boolean;
            add: (addend: string | number | Long) => Long;
            and: (other: string | number | Long) => Long;
            compare: (other: string | number | Long) => number;
            comp: (other: string | number | Long) => number;
            divide: (divisor: string | number | Long) => Long;
            div: (divisor: string | number | Long) => Long;
            equals: (other: string | number | Long) => boolean;
            eq: (other: string | number | Long) => boolean;
            getHighBits: () => number;
            getHighBitsUnsigned: () => number;
            getLowBits: () => number;
            getLowBitsUnsigned: () => number;
            getNumBitsAbs: () => number;
            greaterThan: (other: string | number | Long) => boolean;
            gt: (other: string | number | Long) => boolean;
            greaterThanOrEqual: (other: string | number | Long) => boolean;
            gte: (other: string | number | Long) => boolean;
            ge: (other: string | number | Long) => boolean;
            isEven: () => boolean;
            isNegative: () => boolean;
            isOdd: () => boolean;
            isPositive: () => boolean;
            isZero: () => boolean;
            eqz: () => boolean;
            lessThan: (other: string | number | Long) => boolean;
            lt: (other: string | number | Long) => boolean;
            lessThanOrEqual: (other: string | number | Long) => boolean;
            lte: (other: string | number | Long) => boolean;
            le: (other: string | number | Long) => boolean;
            modulo: (other: string | number | Long) => Long;
            mod: (other: string | number | Long) => Long;
            rem: (other: string | number | Long) => Long;
            multiply: (multiplier: string | number | Long) => Long;
            mul: (multiplier: string | number | Long) => Long;
            negate: () => Long;
            neg: () => Long;
            not: () => Long;
            countLeadingZeros: () => number;
            clz: () => number;
            countTrailingZeros: () => number;
            ctz: () => number;
            notEquals: (other: string | number | Long) => boolean;
            neq: (other: string | number | Long) => boolean;
            ne: (other: string | number | Long) => boolean;
            or: (other: string | number | Long) => Long;
            shiftLeft: (numBits: number | Long) => Long;
            shl: (numBits: number | Long) => Long;
            shiftRight: (numBits: number | Long) => Long;
            shr: (numBits: number | Long) => Long;
            shiftRightUnsigned: (numBits: number | Long) => Long;
            shru: (numBits: number | Long) => Long;
            shr_u: (numBits: number | Long) => Long;
            rotateLeft: (numBits: number | Long) => Long;
            rotl: (numBits: number | Long) => Long;
            rotateRight: (numBits: number | Long) => Long;
            rotr: (numBits: number | Long) => Long;
            subtract: (subtrahend: string | number | Long) => Long;
            sub: (subtrahend: string | number | Long) => Long;
            toInt: () => number;
            toNumber: () => number;
            toBytes: (le?: boolean | undefined) => number[];
            toBytesLE: () => number[];
            toBytesBE: () => number[];
            toSigned: () => Long;
            toString: (radix?: number | undefined) => string;
            toUnsigned: () => Long;
            xor: (other: string | number | Long) => Long;
        } & { [K_9 in Exclude<keyof I_1["transactionId"], "$type" | keyof Long>]: never; }) | undefined;
        additionalDataSourceIds?: ((string | number | Long)[] & (string | number | (Long & {
            high: number;
            low: number;
            unsigned: boolean;
            add: (addend: string | number | Long) => Long;
            and: (other: string | number | Long) => Long;
            compare: (other: string | number | Long) => number;
            comp: (other: string | number | Long) => number;
            divide: (divisor: string | number | Long) => Long;
            div: (divisor: string | number | Long) => Long;
            equals: (other: string | number | Long) => boolean;
            eq: (other: string | number | Long) => boolean;
            getHighBits: () => number;
            getHighBitsUnsigned: () => number;
            getLowBits: () => number;
            getLowBitsUnsigned: () => number;
            getNumBitsAbs: () => number;
            greaterThan: (other: string | number | Long) => boolean;
            gt: (other: string | number | Long) => boolean;
            greaterThanOrEqual: (other: string | number | Long) => boolean;
            gte: (other: string | number | Long) => boolean;
            ge: (other: string | number | Long) => boolean;
            isEven: () => boolean;
            isNegative: () => boolean;
            isOdd: () => boolean;
            isPositive: () => boolean;
            isZero: () => boolean;
            eqz: () => boolean;
            lessThan: (other: string | number | Long) => boolean;
            lt: (other: string | number | Long) => boolean;
            lessThanOrEqual: (other: string | number | Long) => boolean;
            lte: (other: string | number | Long) => boolean;
            le: (other: string | number | Long) => boolean;
            modulo: (other: string | number | Long) => Long;
            mod: (other: string | number | Long) => Long;
            rem: (other: string | number | Long) => Long;
            multiply: (multiplier: string | number | Long) => Long;
            mul: (multiplier: string | number | Long) => Long;
            negate: () => Long;
            neg: () => Long;
            not: () => Long;
            countLeadingZeros: () => number;
            clz: () => number;
            countTrailingZeros: () => number;
            ctz: () => number;
            notEquals: (other: string | number | Long) => boolean;
            neq: (other: string | number | Long) => boolean;
            ne: (other: string | number | Long) => boolean;
            or: (other: string | number | Long) => Long;
            shiftLeft: (numBits: number | Long) => Long;
            shl: (numBits: number | Long) => Long;
            shiftRight: (numBits: number | Long) => Long;
            shr: (numBits: number | Long) => Long;
            shiftRightUnsigned: (numBits: number | Long) => Long;
            shru: (numBits: number | Long) => Long;
            shr_u: (numBits: number | Long) => Long;
            rotateLeft: (numBits: number | Long) => Long;
            rotl: (numBits: number | Long) => Long;
            rotateRight: (numBits: number | Long) => Long;
            rotr: (numBits: number | Long) => Long;
            subtract: (subtrahend: string | number | Long) => Long;
            sub: (subtrahend: string | number | Long) => Long;
            toInt: () => number;
            toNumber: () => number;
            toBytes: (le?: boolean | undefined) => number[];
            toBytesLE: () => number[];
            toBytesBE: () => number[];
            toSigned: () => Long;
            toString: (radix?: number | undefined) => string;
            toUnsigned: () => Long;
            xor: (other: string | number | Long) => Long;
        } & { [K_10 in Exclude<keyof I_1["additionalDataSourceIds"][number], "$type" | keyof Long>]: never; }))[] & { [K_11 in Exclude<keyof I_1["additionalDataSourceIds"], "$type" | keyof (string | number | Long)[]>]: never; }) | undefined;
        goneSubscriptionIds?: (string[] & string[] & { [K_12 in Exclude<keyof I_1["goneSubscriptionIds"], "$type" | keyof string[]>]: never; }) | undefined;
    } & { [K_13 in Exclude<keyof I_1, "$type" | "lsn" | "subscriptionIds" | "ackTimestamp" | "transactionId" | "additionalDataSourceIds" | "goneSubscriptionIds">]: never; }>(object: I_1): SatOpLogAck;
};
export declare const SatTransOp: {
    $type: "Electric.Satellite.SatTransOp";
    encode(message: SatTransOp, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): SatTransOp;
    create<I extends {
        begin?: {
            lsn?: Uint8Array | undefined;
            transactionId?: string | number | Long | undefined;
            commitTimestamp?: string | number | Long | undefined;
            origin?: string | undefined;
            isMigration?: boolean | undefined;
            additionalDataRef?: string | number | Long | undefined;
        } | undefined;
        commit?: {
            lsn?: Uint8Array | undefined;
            transactionId?: string | number | Long | undefined;
            commitTimestamp?: string | number | Long | undefined;
            additionalDataRef?: string | number | Long | undefined;
        } | undefined;
        update?: {
            relationId?: number | undefined;
            rowData?: {
                values?: Uint8Array[] | undefined;
                nullsBitmask?: Uint8Array | undefined;
            } | undefined;
            oldRowData?: {
                values?: Uint8Array[] | undefined;
                nullsBitmask?: Uint8Array | undefined;
            } | undefined;
            tags?: string[] | undefined;
        } | undefined;
        insert?: {
            relationId?: number | undefined;
            rowData?: {
                values?: Uint8Array[] | undefined;
                nullsBitmask?: Uint8Array | undefined;
            } | undefined;
            tags?: string[] | undefined;
        } | undefined;
        delete?: {
            relationId?: number | undefined;
            oldRowData?: {
                values?: Uint8Array[] | undefined;
                nullsBitmask?: Uint8Array | undefined;
            } | undefined;
            tags?: string[] | undefined;
        } | undefined;
        migrate?: {
            version?: string | undefined;
            stmts?: {
                type?: SatOpMigrate_Type | undefined;
                sql?: string | undefined;
            }[] | undefined;
            table?: {
                name?: string | undefined;
                columns?: {
                    name?: string | undefined;
                    sqliteType?: string | undefined;
                    pgType?: {
                        name?: string | undefined;
                        array?: number[] | undefined;
                        size?: number[] | undefined;
                    } | undefined;
                }[] | undefined;
                fks?: {
                    fkCols?: string[] | undefined;
                    pkTable?: string | undefined;
                    pkCols?: string[] | undefined;
                }[] | undefined;
                pks?: string[] | undefined;
            } | undefined;
            enumType?: {
                values?: string[] | undefined;
                name?: string | undefined;
            } | undefined;
        } | undefined;
        compensation?: {
            relationId?: number | undefined;
            tags?: string[] | undefined;
            pkData?: {
                values?: Uint8Array[] | undefined;
                nullsBitmask?: Uint8Array | undefined;
            } | undefined;
        } | undefined;
        gone?: {
            relationId?: number | undefined;
            pkData?: {
                values?: Uint8Array[] | undefined;
                nullsBitmask?: Uint8Array | undefined;
            } | undefined;
        } | undefined;
        additionalBegin?: {
            ref?: string | number | Long | undefined;
        } | undefined;
        additionalCommit?: {
            ref?: string | number | Long | undefined;
        } | undefined;
    } & {
        begin?: ({
            lsn?: Uint8Array | undefined;
            transactionId?: string | number | Long | undefined;
            commitTimestamp?: string | number | Long | undefined;
            origin?: string | undefined;
            isMigration?: boolean | undefined;
            additionalDataRef?: string | number | Long | undefined;
        } & {
            lsn?: Uint8Array | undefined;
            transactionId?: string | number | (Long & {
                high: number;
                low: number;
                unsigned: boolean;
                add: (addend: string | number | Long) => Long;
                and: (other: string | number | Long) => Long;
                compare: (other: string | number | Long) => number;
                comp: (other: string | number | Long) => number;
                divide: (divisor: string | number | Long) => Long;
                div: (divisor: string | number | Long) => Long;
                equals: (other: string | number | Long) => boolean;
                eq: (other: string | number | Long) => boolean;
                getHighBits: () => number;
                getHighBitsUnsigned: () => number;
                getLowBits: () => number;
                getLowBitsUnsigned: () => number;
                getNumBitsAbs: () => number;
                greaterThan: (other: string | number | Long) => boolean;
                gt: (other: string | number | Long) => boolean;
                greaterThanOrEqual: (other: string | number | Long) => boolean;
                gte: (other: string | number | Long) => boolean;
                ge: (other: string | number | Long) => boolean;
                isEven: () => boolean;
                isNegative: () => boolean;
                isOdd: () => boolean;
                isPositive: () => boolean;
                isZero: () => boolean;
                eqz: () => boolean;
                lessThan: (other: string | number | Long) => boolean;
                lt: (other: string | number | Long) => boolean;
                lessThanOrEqual: (other: string | number | Long) => boolean;
                lte: (other: string | number | Long) => boolean;
                le: (other: string | number | Long) => boolean;
                modulo: (other: string | number | Long) => Long;
                mod: (other: string | number | Long) => Long;
                rem: (other: string | number | Long) => Long;
                multiply: (multiplier: string | number | Long) => Long;
                mul: (multiplier: string | number | Long) => Long;
                negate: () => Long;
                neg: () => Long;
                not: () => Long;
                countLeadingZeros: () => number;
                clz: () => number;
                countTrailingZeros: () => number;
                ctz: () => number;
                notEquals: (other: string | number | Long) => boolean;
                neq: (other: string | number | Long) => boolean;
                ne: (other: string | number | Long) => boolean;
                or: (other: string | number | Long) => Long;
                shiftLeft: (numBits: number | Long) => Long;
                shl: (numBits: number | Long) => Long;
                shiftRight: (numBits: number | Long) => Long;
                shr: (numBits: number | Long) => Long;
                shiftRightUnsigned: (numBits: number | Long) => Long;
                shru: (numBits: number | Long) => Long;
                shr_u: (numBits: number | Long) => Long;
                rotateLeft: (numBits: number | Long) => Long;
                rotl: (numBits: number | Long) => Long;
                rotateRight: (numBits: number | Long) => Long;
                rotr: (numBits: number | Long) => Long;
                subtract: (subtrahend: string | number | Long) => Long;
                sub: (subtrahend: string | number | Long) => Long;
                toInt: () => number;
                toNumber: () => number;
                toBytes: (le?: boolean | undefined) => number[];
                toBytesLE: () => number[];
                toBytesBE: () => number[];
                toSigned: () => Long;
                toString: (radix?: number | undefined) => string;
                toUnsigned: () => Long;
                xor: (other: string | number | Long) => Long;
            } & { [K in Exclude<keyof I["begin"]["transactionId"], "$type" | keyof Long>]: never; }) | undefined;
            commitTimestamp?: string | number | (Long & {
                high: number;
                low: number;
                unsigned: boolean;
                add: (addend: string | number | Long) => Long;
                and: (other: string | number | Long) => Long;
                compare: (other: string | number | Long) => number;
                comp: (other: string | number | Long) => number;
                divide: (divisor: string | number | Long) => Long;
                div: (divisor: string | number | Long) => Long;
                equals: (other: string | number | Long) => boolean;
                eq: (other: string | number | Long) => boolean;
                getHighBits: () => number;
                getHighBitsUnsigned: () => number;
                getLowBits: () => number;
                getLowBitsUnsigned: () => number;
                getNumBitsAbs: () => number;
                greaterThan: (other: string | number | Long) => boolean;
                gt: (other: string | number | Long) => boolean;
                greaterThanOrEqual: (other: string | number | Long) => boolean;
                gte: (other: string | number | Long) => boolean;
                ge: (other: string | number | Long) => boolean;
                isEven: () => boolean;
                isNegative: () => boolean;
                isOdd: () => boolean;
                isPositive: () => boolean;
                isZero: () => boolean;
                eqz: () => boolean;
                lessThan: (other: string | number | Long) => boolean;
                lt: (other: string | number | Long) => boolean;
                lessThanOrEqual: (other: string | number | Long) => boolean;
                lte: (other: string | number | Long) => boolean;
                le: (other: string | number | Long) => boolean;
                modulo: (other: string | number | Long) => Long;
                mod: (other: string | number | Long) => Long;
                rem: (other: string | number | Long) => Long;
                multiply: (multiplier: string | number | Long) => Long;
                mul: (multiplier: string | number | Long) => Long;
                negate: () => Long;
                neg: () => Long;
                not: () => Long;
                countLeadingZeros: () => number;
                clz: () => number;
                countTrailingZeros: () => number;
                ctz: () => number;
                notEquals: (other: string | number | Long) => boolean;
                neq: (other: string | number | Long) => boolean;
                ne: (other: string | number | Long) => boolean;
                or: (other: string | number | Long) => Long;
                shiftLeft: (numBits: number | Long) => Long;
                shl: (numBits: number | Long) => Long;
                shiftRight: (numBits: number | Long) => Long;
                shr: (numBits: number | Long) => Long;
                shiftRightUnsigned: (numBits: number | Long) => Long;
                shru: (numBits: number | Long) => Long;
                shr_u: (numBits: number | Long) => Long;
                rotateLeft: (numBits: number | Long) => Long;
                rotl: (numBits: number | Long) => Long;
                rotateRight: (numBits: number | Long) => Long;
                rotr: (numBits: number | Long) => Long;
                subtract: (subtrahend: string | number | Long) => Long;
                sub: (subtrahend: string | number | Long) => Long;
                toInt: () => number;
                toNumber: () => number;
                toBytes: (le?: boolean | undefined) => number[];
                toBytesLE: () => number[];
                toBytesBE: () => number[];
                toSigned: () => Long;
                toString: (radix?: number | undefined) => string;
                toUnsigned: () => Long;
                xor: (other: string | number | Long) => Long;
            } & { [K_1 in Exclude<keyof I["begin"]["commitTimestamp"], "$type" | keyof Long>]: never; }) | undefined;
            origin?: string | undefined;
            isMigration?: boolean | undefined;
            additionalDataRef?: string | number | (Long & {
                high: number;
                low: number;
                unsigned: boolean;
                add: (addend: string | number | Long) => Long;
                and: (other: string | number | Long) => Long;
                compare: (other: string | number | Long) => number;
                comp: (other: string | number | Long) => number;
                divide: (divisor: string | number | Long) => Long;
                div: (divisor: string | number | Long) => Long;
                equals: (other: string | number | Long) => boolean;
                eq: (other: string | number | Long) => boolean;
                getHighBits: () => number;
                getHighBitsUnsigned: () => number;
                getLowBits: () => number;
                getLowBitsUnsigned: () => number;
                getNumBitsAbs: () => number;
                greaterThan: (other: string | number | Long) => boolean;
                gt: (other: string | number | Long) => boolean;
                greaterThanOrEqual: (other: string | number | Long) => boolean;
                gte: (other: string | number | Long) => boolean;
                ge: (other: string | number | Long) => boolean;
                isEven: () => boolean;
                isNegative: () => boolean;
                isOdd: () => boolean;
                isPositive: () => boolean;
                isZero: () => boolean;
                eqz: () => boolean;
                lessThan: (other: string | number | Long) => boolean;
                lt: (other: string | number | Long) => boolean;
                lessThanOrEqual: (other: string | number | Long) => boolean;
                lte: (other: string | number | Long) => boolean;
                le: (other: string | number | Long) => boolean;
                modulo: (other: string | number | Long) => Long;
                mod: (other: string | number | Long) => Long;
                rem: (other: string | number | Long) => Long;
                multiply: (multiplier: string | number | Long) => Long;
                mul: (multiplier: string | number | Long) => Long;
                negate: () => Long;
                neg: () => Long;
                not: () => Long;
                countLeadingZeros: () => number;
                clz: () => number;
                countTrailingZeros: () => number;
                ctz: () => number;
                notEquals: (other: string | number | Long) => boolean;
                neq: (other: string | number | Long) => boolean;
                ne: (other: string | number | Long) => boolean;
                or: (other: string | number | Long) => Long;
                shiftLeft: (numBits: number | Long) => Long;
                shl: (numBits: number | Long) => Long;
                shiftRight: (numBits: number | Long) => Long;
                shr: (numBits: number | Long) => Long;
                shiftRightUnsigned: (numBits: number | Long) => Long;
                shru: (numBits: number | Long) => Long;
                shr_u: (numBits: number | Long) => Long;
                rotateLeft: (numBits: number | Long) => Long;
                rotl: (numBits: number | Long) => Long;
                rotateRight: (numBits: number | Long) => Long;
                rotr: (numBits: number | Long) => Long;
                subtract: (subtrahend: string | number | Long) => Long;
                sub: (subtrahend: string | number | Long) => Long;
                toInt: () => number;
                toNumber: () => number;
                toBytes: (le?: boolean | undefined) => number[];
                toBytesLE: () => number[];
                toBytesBE: () => number[];
                toSigned: () => Long;
                toString: (radix?: number | undefined) => string;
                toUnsigned: () => Long;
                xor: (other: string | number | Long) => Long;
            } & { [K_2 in Exclude<keyof I["begin"]["additionalDataRef"], "$type" | keyof Long>]: never; }) | undefined;
        } & { [K_3 in Exclude<keyof I["begin"], "$type" | "lsn" | "transactionId" | "commitTimestamp" | "origin" | "isMigration" | "additionalDataRef">]: never; }) | undefined;
        commit?: ({
            lsn?: Uint8Array | undefined;
            transactionId?: string | number | Long | undefined;
            commitTimestamp?: string | number | Long | undefined;
            additionalDataRef?: string | number | Long | undefined;
        } & {
            lsn?: Uint8Array | undefined;
            transactionId?: string | number | (Long & {
                high: number;
                low: number;
                unsigned: boolean;
                add: (addend: string | number | Long) => Long;
                and: (other: string | number | Long) => Long;
                compare: (other: string | number | Long) => number;
                comp: (other: string | number | Long) => number;
                divide: (divisor: string | number | Long) => Long;
                div: (divisor: string | number | Long) => Long;
                equals: (other: string | number | Long) => boolean;
                eq: (other: string | number | Long) => boolean;
                getHighBits: () => number;
                getHighBitsUnsigned: () => number;
                getLowBits: () => number;
                getLowBitsUnsigned: () => number;
                getNumBitsAbs: () => number;
                greaterThan: (other: string | number | Long) => boolean;
                gt: (other: string | number | Long) => boolean;
                greaterThanOrEqual: (other: string | number | Long) => boolean;
                gte: (other: string | number | Long) => boolean;
                ge: (other: string | number | Long) => boolean;
                isEven: () => boolean;
                isNegative: () => boolean;
                isOdd: () => boolean;
                isPositive: () => boolean;
                isZero: () => boolean;
                eqz: () => boolean;
                lessThan: (other: string | number | Long) => boolean;
                lt: (other: string | number | Long) => boolean;
                lessThanOrEqual: (other: string | number | Long) => boolean;
                lte: (other: string | number | Long) => boolean;
                le: (other: string | number | Long) => boolean;
                modulo: (other: string | number | Long) => Long;
                mod: (other: string | number | Long) => Long;
                rem: (other: string | number | Long) => Long;
                multiply: (multiplier: string | number | Long) => Long;
                mul: (multiplier: string | number | Long) => Long;
                negate: () => Long;
                neg: () => Long;
                not: () => Long;
                countLeadingZeros: () => number;
                clz: () => number;
                countTrailingZeros: () => number;
                ctz: () => number;
                notEquals: (other: string | number | Long) => boolean;
                neq: (other: string | number | Long) => boolean;
                ne: (other: string | number | Long) => boolean;
                or: (other: string | number | Long) => Long;
                shiftLeft: (numBits: number | Long) => Long;
                shl: (numBits: number | Long) => Long;
                shiftRight: (numBits: number | Long) => Long;
                shr: (numBits: number | Long) => Long;
                shiftRightUnsigned: (numBits: number | Long) => Long;
                shru: (numBits: number | Long) => Long;
                shr_u: (numBits: number | Long) => Long;
                rotateLeft: (numBits: number | Long) => Long;
                rotl: (numBits: number | Long) => Long;
                rotateRight: (numBits: number | Long) => Long;
                rotr: (numBits: number | Long) => Long;
                subtract: (subtrahend: string | number | Long) => Long;
                sub: (subtrahend: string | number | Long) => Long;
                toInt: () => number;
                toNumber: () => number;
                toBytes: (le?: boolean | undefined) => number[];
                toBytesLE: () => number[];
                toBytesBE: () => number[];
                toSigned: () => Long;
                toString: (radix?: number | undefined) => string;
                toUnsigned: () => Long;
                xor: (other: string | number | Long) => Long;
            } & { [K_4 in Exclude<keyof I["commit"]["transactionId"], "$type" | keyof Long>]: never; }) | undefined;
            commitTimestamp?: string | number | (Long & {
                high: number;
                low: number;
                unsigned: boolean;
                add: (addend: string | number | Long) => Long;
                and: (other: string | number | Long) => Long;
                compare: (other: string | number | Long) => number;
                comp: (other: string | number | Long) => number;
                divide: (divisor: string | number | Long) => Long;
                div: (divisor: string | number | Long) => Long;
                equals: (other: string | number | Long) => boolean;
                eq: (other: string | number | Long) => boolean;
                getHighBits: () => number;
                getHighBitsUnsigned: () => number;
                getLowBits: () => number;
                getLowBitsUnsigned: () => number;
                getNumBitsAbs: () => number;
                greaterThan: (other: string | number | Long) => boolean;
                gt: (other: string | number | Long) => boolean;
                greaterThanOrEqual: (other: string | number | Long) => boolean;
                gte: (other: string | number | Long) => boolean;
                ge: (other: string | number | Long) => boolean;
                isEven: () => boolean;
                isNegative: () => boolean;
                isOdd: () => boolean;
                isPositive: () => boolean;
                isZero: () => boolean;
                eqz: () => boolean;
                lessThan: (other: string | number | Long) => boolean;
                lt: (other: string | number | Long) => boolean;
                lessThanOrEqual: (other: string | number | Long) => boolean;
                lte: (other: string | number | Long) => boolean;
                le: (other: string | number | Long) => boolean;
                modulo: (other: string | number | Long) => Long;
                mod: (other: string | number | Long) => Long;
                rem: (other: string | number | Long) => Long;
                multiply: (multiplier: string | number | Long) => Long;
                mul: (multiplier: string | number | Long) => Long;
                negate: () => Long;
                neg: () => Long;
                not: () => Long;
                countLeadingZeros: () => number;
                clz: () => number;
                countTrailingZeros: () => number;
                ctz: () => number;
                notEquals: (other: string | number | Long) => boolean;
                neq: (other: string | number | Long) => boolean;
                ne: (other: string | number | Long) => boolean;
                or: (other: string | number | Long) => Long;
                shiftLeft: (numBits: number | Long) => Long;
                shl: (numBits: number | Long) => Long;
                shiftRight: (numBits: number | Long) => Long;
                shr: (numBits: number | Long) => Long;
                shiftRightUnsigned: (numBits: number | Long) => Long;
                shru: (numBits: number | Long) => Long;
                shr_u: (numBits: number | Long) => Long;
                rotateLeft: (numBits: number | Long) => Long;
                rotl: (numBits: number | Long) => Long;
                rotateRight: (numBits: number | Long) => Long;
                rotr: (numBits: number | Long) => Long;
                subtract: (subtrahend: string | number | Long) => Long;
                sub: (subtrahend: string | number | Long) => Long;
                toInt: () => number;
                toNumber: () => number;
                toBytes: (le?: boolean | undefined) => number[];
                toBytesLE: () => number[];
                toBytesBE: () => number[];
                toSigned: () => Long;
                toString: (radix?: number | undefined) => string;
                toUnsigned: () => Long;
                xor: (other: string | number | Long) => Long;
            } & { [K_5 in Exclude<keyof I["commit"]["commitTimestamp"], "$type" | keyof Long>]: never; }) | undefined;
            additionalDataRef?: string | number | (Long & {
                high: number;
                low: number;
                unsigned: boolean;
                add: (addend: string | number | Long) => Long;
                and: (other: string | number | Long) => Long;
                compare: (other: string | number | Long) => number;
                comp: (other: string | number | Long) => number;
                divide: (divisor: string | number | Long) => Long;
                div: (divisor: string | number | Long) => Long;
                equals: (other: string | number | Long) => boolean;
                eq: (other: string | number | Long) => boolean;
                getHighBits: () => number;
                getHighBitsUnsigned: () => number;
                getLowBits: () => number;
                getLowBitsUnsigned: () => number;
                getNumBitsAbs: () => number;
                greaterThan: (other: string | number | Long) => boolean;
                gt: (other: string | number | Long) => boolean;
                greaterThanOrEqual: (other: string | number | Long) => boolean;
                gte: (other: string | number | Long) => boolean;
                ge: (other: string | number | Long) => boolean;
                isEven: () => boolean;
                isNegative: () => boolean;
                isOdd: () => boolean;
                isPositive: () => boolean;
                isZero: () => boolean;
                eqz: () => boolean;
                lessThan: (other: string | number | Long) => boolean;
                lt: (other: string | number | Long) => boolean;
                lessThanOrEqual: (other: string | number | Long) => boolean;
                lte: (other: string | number | Long) => boolean;
                le: (other: string | number | Long) => boolean;
                modulo: (other: string | number | Long) => Long;
                mod: (other: string | number | Long) => Long;
                rem: (other: string | number | Long) => Long;
                multiply: (multiplier: string | number | Long) => Long;
                mul: (multiplier: string | number | Long) => Long;
                negate: () => Long;
                neg: () => Long;
                not: () => Long;
                countLeadingZeros: () => number;
                clz: () => number;
                countTrailingZeros: () => number;
                ctz: () => number;
                notEquals: (other: string | number | Long) => boolean;
                neq: (other: string | number | Long) => boolean;
                ne: (other: string | number | Long) => boolean;
                or: (other: string | number | Long) => Long;
                shiftLeft: (numBits: number | Long) => Long;
                shl: (numBits: number | Long) => Long;
                shiftRight: (numBits: number | Long) => Long;
                shr: (numBits: number | Long) => Long;
                shiftRightUnsigned: (numBits: number | Long) => Long;
                shru: (numBits: number | Long) => Long;
                shr_u: (numBits: number | Long) => Long;
                rotateLeft: (numBits: number | Long) => Long;
                rotl: (numBits: number | Long) => Long;
                rotateRight: (numBits: number | Long) => Long;
                rotr: (numBits: number | Long) => Long;
                subtract: (subtrahend: string | number | Long) => Long;
                sub: (subtrahend: string | number | Long) => Long;
                toInt: () => number;
                toNumber: () => number;
                toBytes: (le?: boolean | undefined) => number[];
                toBytesLE: () => number[];
                toBytesBE: () => number[];
                toSigned: () => Long;
                toString: (radix?: number | undefined) => string;
                toUnsigned: () => Long;
                xor: (other: string | number | Long) => Long;
            } & { [K_6 in Exclude<keyof I["commit"]["additionalDataRef"], "$type" | keyof Long>]: never; }) | undefined;
        } & { [K_7 in Exclude<keyof I["commit"], "$type" | "lsn" | "transactionId" | "commitTimestamp" | "additionalDataRef">]: never; }) | undefined;
        update?: ({
            relationId?: number | undefined;
            rowData?: {
                values?: Uint8Array[] | undefined;
                nullsBitmask?: Uint8Array | undefined;
            } | undefined;
            oldRowData?: {
                values?: Uint8Array[] | undefined;
                nullsBitmask?: Uint8Array | undefined;
            } | undefined;
            tags?: string[] | undefined;
        } & {
            relationId?: number | undefined;
            rowData?: ({
                values?: Uint8Array[] | undefined;
                nullsBitmask?: Uint8Array | undefined;
            } & {
                values?: (Uint8Array[] & Uint8Array[] & { [K_8 in Exclude<keyof I["update"]["rowData"]["values"], "$type" | keyof Uint8Array[]>]: never; }) | undefined;
                nullsBitmask?: Uint8Array | undefined;
            } & { [K_9 in Exclude<keyof I["update"]["rowData"], "$type" | "values" | "nullsBitmask">]: never; }) | undefined;
            oldRowData?: ({
                values?: Uint8Array[] | undefined;
                nullsBitmask?: Uint8Array | undefined;
            } & {
                values?: (Uint8Array[] & Uint8Array[] & { [K_10 in Exclude<keyof I["update"]["oldRowData"]["values"], "$type" | keyof Uint8Array[]>]: never; }) | undefined;
                nullsBitmask?: Uint8Array | undefined;
            } & { [K_11 in Exclude<keyof I["update"]["oldRowData"], "$type" | "values" | "nullsBitmask">]: never; }) | undefined;
            tags?: (string[] & string[] & { [K_12 in Exclude<keyof I["update"]["tags"], "$type" | keyof string[]>]: never; }) | undefined;
        } & { [K_13 in Exclude<keyof I["update"], "$type" | "relationId" | "rowData" | "oldRowData" | "tags">]: never; }) | undefined;
        insert?: ({
            relationId?: number | undefined;
            rowData?: {
                values?: Uint8Array[] | undefined;
                nullsBitmask?: Uint8Array | undefined;
            } | undefined;
            tags?: string[] | undefined;
        } & {
            relationId?: number | undefined;
            rowData?: ({
                values?: Uint8Array[] | undefined;
                nullsBitmask?: Uint8Array | undefined;
            } & {
                values?: (Uint8Array[] & Uint8Array[] & { [K_14 in Exclude<keyof I["insert"]["rowData"]["values"], "$type" | keyof Uint8Array[]>]: never; }) | undefined;
                nullsBitmask?: Uint8Array | undefined;
            } & { [K_15 in Exclude<keyof I["insert"]["rowData"], "$type" | "values" | "nullsBitmask">]: never; }) | undefined;
            tags?: (string[] & string[] & { [K_16 in Exclude<keyof I["insert"]["tags"], "$type" | keyof string[]>]: never; }) | undefined;
        } & { [K_17 in Exclude<keyof I["insert"], "$type" | "relationId" | "rowData" | "tags">]: never; }) | undefined;
        delete?: ({
            relationId?: number | undefined;
            oldRowData?: {
                values?: Uint8Array[] | undefined;
                nullsBitmask?: Uint8Array | undefined;
            } | undefined;
            tags?: string[] | undefined;
        } & {
            relationId?: number | undefined;
            oldRowData?: ({
                values?: Uint8Array[] | undefined;
                nullsBitmask?: Uint8Array | undefined;
            } & {
                values?: (Uint8Array[] & Uint8Array[] & { [K_18 in Exclude<keyof I["delete"]["oldRowData"]["values"], "$type" | keyof Uint8Array[]>]: never; }) | undefined;
                nullsBitmask?: Uint8Array | undefined;
            } & { [K_19 in Exclude<keyof I["delete"]["oldRowData"], "$type" | "values" | "nullsBitmask">]: never; }) | undefined;
            tags?: (string[] & string[] & { [K_20 in Exclude<keyof I["delete"]["tags"], "$type" | keyof string[]>]: never; }) | undefined;
        } & { [K_21 in Exclude<keyof I["delete"], "$type" | "relationId" | "oldRowData" | "tags">]: never; }) | undefined;
        migrate?: ({
            version?: string | undefined;
            stmts?: {
                type?: SatOpMigrate_Type | undefined;
                sql?: string | undefined;
            }[] | undefined;
            table?: {
                name?: string | undefined;
                columns?: {
                    name?: string | undefined;
                    sqliteType?: string | undefined;
                    pgType?: {
                        name?: string | undefined;
                        array?: number[] | undefined;
                        size?: number[] | undefined;
                    } | undefined;
                }[] | undefined;
                fks?: {
                    fkCols?: string[] | undefined;
                    pkTable?: string | undefined;
                    pkCols?: string[] | undefined;
                }[] | undefined;
                pks?: string[] | undefined;
            } | undefined;
            enumType?: {
                values?: string[] | undefined;
                name?: string | undefined;
            } | undefined;
        } & {
            version?: string | undefined;
            stmts?: ({
                type?: SatOpMigrate_Type | undefined;
                sql?: string | undefined;
            }[] & ({
                type?: SatOpMigrate_Type | undefined;
                sql?: string | undefined;
            } & {
                type?: SatOpMigrate_Type | undefined;
                sql?: string | undefined;
            } & { [K_22 in Exclude<keyof I["migrate"]["stmts"][number], "$type" | "type" | "sql">]: never; })[] & { [K_23 in Exclude<keyof I["migrate"]["stmts"], "$type" | keyof {
                type?: SatOpMigrate_Type | undefined;
                sql?: string | undefined;
            }[]>]: never; }) | undefined;
            table?: ({
                name?: string | undefined;
                columns?: {
                    name?: string | undefined;
                    sqliteType?: string | undefined;
                    pgType?: {
                        name?: string | undefined;
                        array?: number[] | undefined;
                        size?: number[] | undefined;
                    } | undefined;
                }[] | undefined;
                fks?: {
                    fkCols?: string[] | undefined;
                    pkTable?: string | undefined;
                    pkCols?: string[] | undefined;
                }[] | undefined;
                pks?: string[] | undefined;
            } & {
                name?: string | undefined;
                columns?: ({
                    name?: string | undefined;
                    sqliteType?: string | undefined;
                    pgType?: {
                        name?: string | undefined;
                        array?: number[] | undefined;
                        size?: number[] | undefined;
                    } | undefined;
                }[] & ({
                    name?: string | undefined;
                    sqliteType?: string | undefined;
                    pgType?: {
                        name?: string | undefined;
                        array?: number[] | undefined;
                        size?: number[] | undefined;
                    } | undefined;
                } & {
                    name?: string | undefined;
                    sqliteType?: string | undefined;
                    pgType?: ({
                        name?: string | undefined;
                        array?: number[] | undefined;
                        size?: number[] | undefined;
                    } & {
                        name?: string | undefined;
                        array?: (number[] & number[] & { [K_24 in Exclude<keyof I["migrate"]["table"]["columns"][number]["pgType"]["array"], "$type" | keyof number[]>]: never; }) | undefined;
                        size?: (number[] & number[] & { [K_25 in Exclude<keyof I["migrate"]["table"]["columns"][number]["pgType"]["size"], "$type" | keyof number[]>]: never; }) | undefined;
                    } & { [K_26 in Exclude<keyof I["migrate"]["table"]["columns"][number]["pgType"], "$type" | "name" | "array" | "size">]: never; }) | undefined;
                } & { [K_27 in Exclude<keyof I["migrate"]["table"]["columns"][number], "$type" | "name" | "sqliteType" | "pgType">]: never; })[] & { [K_28 in Exclude<keyof I["migrate"]["table"]["columns"], "$type" | keyof {
                    name?: string | undefined;
                    sqliteType?: string | undefined;
                    pgType?: {
                        name?: string | undefined;
                        array?: number[] | undefined;
                        size?: number[] | undefined;
                    } | undefined;
                }[]>]: never; }) | undefined;
                fks?: ({
                    fkCols?: string[] | undefined;
                    pkTable?: string | undefined;
                    pkCols?: string[] | undefined;
                }[] & ({
                    fkCols?: string[] | undefined;
                    pkTable?: string | undefined;
                    pkCols?: string[] | undefined;
                } & {
                    fkCols?: (string[] & string[] & { [K_29 in Exclude<keyof I["migrate"]["table"]["fks"][number]["fkCols"], "$type" | keyof string[]>]: never; }) | undefined;
                    pkTable?: string | undefined;
                    pkCols?: (string[] & string[] & { [K_30 in Exclude<keyof I["migrate"]["table"]["fks"][number]["pkCols"], "$type" | keyof string[]>]: never; }) | undefined;
                } & { [K_31 in Exclude<keyof I["migrate"]["table"]["fks"][number], "$type" | "fkCols" | "pkTable" | "pkCols">]: never; })[] & { [K_32 in Exclude<keyof I["migrate"]["table"]["fks"], "$type" | keyof {
                    fkCols?: string[] | undefined;
                    pkTable?: string | undefined;
                    pkCols?: string[] | undefined;
                }[]>]: never; }) | undefined;
                pks?: (string[] & string[] & { [K_33 in Exclude<keyof I["migrate"]["table"]["pks"], "$type" | keyof string[]>]: never; }) | undefined;
            } & { [K_34 in Exclude<keyof I["migrate"]["table"], "$type" | "name" | "columns" | "fks" | "pks">]: never; }) | undefined;
            enumType?: ({
                values?: string[] | undefined;
                name?: string | undefined;
            } & {
                values?: (string[] & string[] & { [K_35 in Exclude<keyof I["migrate"]["enumType"]["values"], "$type" | keyof string[]>]: never; }) | undefined;
                name?: string | undefined;
            } & { [K_36 in Exclude<keyof I["migrate"]["enumType"], "$type" | "values" | "name">]: never; }) | undefined;
        } & { [K_37 in Exclude<keyof I["migrate"], "$type" | "version" | "stmts" | "table" | "enumType">]: never; }) | undefined;
        compensation?: ({
            relationId?: number | undefined;
            tags?: string[] | undefined;
            pkData?: {
                values?: Uint8Array[] | undefined;
                nullsBitmask?: Uint8Array | undefined;
            } | undefined;
        } & {
            relationId?: number | undefined;
            tags?: (string[] & string[] & { [K_38 in Exclude<keyof I["compensation"]["tags"], "$type" | keyof string[]>]: never; }) | undefined;
            pkData?: ({
                values?: Uint8Array[] | undefined;
                nullsBitmask?: Uint8Array | undefined;
            } & {
                values?: (Uint8Array[] & Uint8Array[] & { [K_39 in Exclude<keyof I["compensation"]["pkData"]["values"], "$type" | keyof Uint8Array[]>]: never; }) | undefined;
                nullsBitmask?: Uint8Array | undefined;
            } & { [K_40 in Exclude<keyof I["compensation"]["pkData"], "$type" | "values" | "nullsBitmask">]: never; }) | undefined;
        } & { [K_41 in Exclude<keyof I["compensation"], "$type" | "relationId" | "tags" | "pkData">]: never; }) | undefined;
        gone?: ({
            relationId?: number | undefined;
            pkData?: {
                values?: Uint8Array[] | undefined;
                nullsBitmask?: Uint8Array | undefined;
            } | undefined;
        } & {
            relationId?: number | undefined;
            pkData?: ({
                values?: Uint8Array[] | undefined;
                nullsBitmask?: Uint8Array | undefined;
            } & {
                values?: (Uint8Array[] & Uint8Array[] & { [K_42 in Exclude<keyof I["gone"]["pkData"]["values"], "$type" | keyof Uint8Array[]>]: never; }) | undefined;
                nullsBitmask?: Uint8Array | undefined;
            } & { [K_43 in Exclude<keyof I["gone"]["pkData"], "$type" | "values" | "nullsBitmask">]: never; }) | undefined;
        } & { [K_44 in Exclude<keyof I["gone"], "$type" | "relationId" | "pkData">]: never; }) | undefined;
        additionalBegin?: ({
            ref?: string | number | Long | undefined;
        } & {
            ref?: string | number | (Long & {
                high: number;
                low: number;
                unsigned: boolean;
                add: (addend: string | number | Long) => Long;
                and: (other: string | number | Long) => Long;
                compare: (other: string | number | Long) => number;
                comp: (other: string | number | Long) => number;
                divide: (divisor: string | number | Long) => Long;
                div: (divisor: string | number | Long) => Long;
                equals: (other: string | number | Long) => boolean;
                eq: (other: string | number | Long) => boolean;
                getHighBits: () => number;
                getHighBitsUnsigned: () => number;
                getLowBits: () => number;
                getLowBitsUnsigned: () => number;
                getNumBitsAbs: () => number;
                greaterThan: (other: string | number | Long) => boolean;
                gt: (other: string | number | Long) => boolean;
                greaterThanOrEqual: (other: string | number | Long) => boolean;
                gte: (other: string | number | Long) => boolean;
                ge: (other: string | number | Long) => boolean;
                isEven: () => boolean;
                isNegative: () => boolean;
                isOdd: () => boolean;
                isPositive: () => boolean;
                isZero: () => boolean;
                eqz: () => boolean;
                lessThan: (other: string | number | Long) => boolean;
                lt: (other: string | number | Long) => boolean;
                lessThanOrEqual: (other: string | number | Long) => boolean;
                lte: (other: string | number | Long) => boolean;
                le: (other: string | number | Long) => boolean;
                modulo: (other: string | number | Long) => Long;
                mod: (other: string | number | Long) => Long;
                rem: (other: string | number | Long) => Long;
                multiply: (multiplier: string | number | Long) => Long;
                mul: (multiplier: string | number | Long) => Long;
                negate: () => Long;
                neg: () => Long;
                not: () => Long;
                countLeadingZeros: () => number;
                clz: () => number;
                countTrailingZeros: () => number;
                ctz: () => number;
                notEquals: (other: string | number | Long) => boolean;
                neq: (other: string | number | Long) => boolean;
                ne: (other: string | number | Long) => boolean;
                or: (other: string | number | Long) => Long;
                shiftLeft: (numBits: number | Long) => Long;
                shl: (numBits: number | Long) => Long;
                shiftRight: (numBits: number | Long) => Long;
                shr: (numBits: number | Long) => Long;
                shiftRightUnsigned: (numBits: number | Long) => Long;
                shru: (numBits: number | Long) => Long;
                shr_u: (numBits: number | Long) => Long;
                rotateLeft: (numBits: number | Long) => Long;
                rotl: (numBits: number | Long) => Long;
                rotateRight: (numBits: number | Long) => Long;
                rotr: (numBits: number | Long) => Long;
                subtract: (subtrahend: string | number | Long) => Long;
                sub: (subtrahend: string | number | Long) => Long;
                toInt: () => number;
                toNumber: () => number;
                toBytes: (le?: boolean | undefined) => number[];
                toBytesLE: () => number[];
                toBytesBE: () => number[];
                toSigned: () => Long;
                toString: (radix?: number | undefined) => string;
                toUnsigned: () => Long;
                xor: (other: string | number | Long) => Long;
            } & { [K_45 in Exclude<keyof I["additionalBegin"]["ref"], "$type" | keyof Long>]: never; }) | undefined;
        } & { [K_46 in Exclude<keyof I["additionalBegin"], "$type" | "ref">]: never; }) | undefined;
        additionalCommit?: ({
            ref?: string | number | Long | undefined;
        } & {
            ref?: string | number | (Long & {
                high: number;
                low: number;
                unsigned: boolean;
                add: (addend: string | number | Long) => Long;
                and: (other: string | number | Long) => Long;
                compare: (other: string | number | Long) => number;
                comp: (other: string | number | Long) => number;
                divide: (divisor: string | number | Long) => Long;
                div: (divisor: string | number | Long) => Long;
                equals: (other: string | number | Long) => boolean;
                eq: (other: string | number | Long) => boolean;
                getHighBits: () => number;
                getHighBitsUnsigned: () => number;
                getLowBits: () => number;
                getLowBitsUnsigned: () => number;
                getNumBitsAbs: () => number;
                greaterThan: (other: string | number | Long) => boolean;
                gt: (other: string | number | Long) => boolean;
                greaterThanOrEqual: (other: string | number | Long) => boolean;
                gte: (other: string | number | Long) => boolean;
                ge: (other: string | number | Long) => boolean;
                isEven: () => boolean;
                isNegative: () => boolean;
                isOdd: () => boolean;
                isPositive: () => boolean;
                isZero: () => boolean;
                eqz: () => boolean;
                lessThan: (other: string | number | Long) => boolean;
                lt: (other: string | number | Long) => boolean;
                lessThanOrEqual: (other: string | number | Long) => boolean;
                lte: (other: string | number | Long) => boolean;
                le: (other: string | number | Long) => boolean;
                modulo: (other: string | number | Long) => Long;
                mod: (other: string | number | Long) => Long;
                rem: (other: string | number | Long) => Long;
                multiply: (multiplier: string | number | Long) => Long;
                mul: (multiplier: string | number | Long) => Long;
                negate: () => Long;
                neg: () => Long;
                not: () => Long;
                countLeadingZeros: () => number;
                clz: () => number;
                countTrailingZeros: () => number;
                ctz: () => number;
                notEquals: (other: string | number | Long) => boolean;
                neq: (other: string | number | Long) => boolean;
                ne: (other: string | number | Long) => boolean;
                or: (other: string | number | Long) => Long;
                shiftLeft: (numBits: number | Long) => Long;
                shl: (numBits: number | Long) => Long;
                shiftRight: (numBits: number | Long) => Long;
                shr: (numBits: number | Long) => Long;
                shiftRightUnsigned: (numBits: number | Long) => Long;
                shru: (numBits: number | Long) => Long;
                shr_u: (numBits: number | Long) => Long;
                rotateLeft: (numBits: number | Long) => Long;
                rotl: (numBits: number | Long) => Long;
                rotateRight: (numBits: number | Long) => Long;
                rotr: (numBits: number | Long) => Long;
                subtract: (subtrahend: string | number | Long) => Long;
                sub: (subtrahend: string | number | Long) => Long;
                toInt: () => number;
                toNumber: () => number;
                toBytes: (le?: boolean | undefined) => number[];
                toBytesLE: () => number[];
                toBytesBE: () => number[];
                toSigned: () => Long;
                toString: (radix?: number | undefined) => string;
                toUnsigned: () => Long;
                xor: (other: string | number | Long) => Long;
            } & { [K_47 in Exclude<keyof I["additionalCommit"]["ref"], "$type" | keyof Long>]: never; }) | undefined;
        } & { [K_48 in Exclude<keyof I["additionalCommit"], "$type" | "ref">]: never; }) | undefined;
    } & { [K_49 in Exclude<keyof I, "$type" | "begin" | "commit" | "update" | "insert" | "delete" | "migrate" | "compensation" | "gone" | "additionalBegin" | "additionalCommit">]: never; }>(base?: I): SatTransOp;
    fromPartial<I_1 extends {
        begin?: {
            lsn?: Uint8Array | undefined;
            transactionId?: string | number | Long | undefined;
            commitTimestamp?: string | number | Long | undefined;
            origin?: string | undefined;
            isMigration?: boolean | undefined;
            additionalDataRef?: string | number | Long | undefined;
        } | undefined;
        commit?: {
            lsn?: Uint8Array | undefined;
            transactionId?: string | number | Long | undefined;
            commitTimestamp?: string | number | Long | undefined;
            additionalDataRef?: string | number | Long | undefined;
        } | undefined;
        update?: {
            relationId?: number | undefined;
            rowData?: {
                values?: Uint8Array[] | undefined;
                nullsBitmask?: Uint8Array | undefined;
            } | undefined;
            oldRowData?: {
                values?: Uint8Array[] | undefined;
                nullsBitmask?: Uint8Array | undefined;
            } | undefined;
            tags?: string[] | undefined;
        } | undefined;
        insert?: {
            relationId?: number | undefined;
            rowData?: {
                values?: Uint8Array[] | undefined;
                nullsBitmask?: Uint8Array | undefined;
            } | undefined;
            tags?: string[] | undefined;
        } | undefined;
        delete?: {
            relationId?: number | undefined;
            oldRowData?: {
                values?: Uint8Array[] | undefined;
                nullsBitmask?: Uint8Array | undefined;
            } | undefined;
            tags?: string[] | undefined;
        } | undefined;
        migrate?: {
            version?: string | undefined;
            stmts?: {
                type?: SatOpMigrate_Type | undefined;
                sql?: string | undefined;
            }[] | undefined;
            table?: {
                name?: string | undefined;
                columns?: {
                    name?: string | undefined;
                    sqliteType?: string | undefined;
                    pgType?: {
                        name?: string | undefined;
                        array?: number[] | undefined;
                        size?: number[] | undefined;
                    } | undefined;
                }[] | undefined;
                fks?: {
                    fkCols?: string[] | undefined;
                    pkTable?: string | undefined;
                    pkCols?: string[] | undefined;
                }[] | undefined;
                pks?: string[] | undefined;
            } | undefined;
            enumType?: {
                values?: string[] | undefined;
                name?: string | undefined;
            } | undefined;
        } | undefined;
        compensation?: {
            relationId?: number | undefined;
            tags?: string[] | undefined;
            pkData?: {
                values?: Uint8Array[] | undefined;
                nullsBitmask?: Uint8Array | undefined;
            } | undefined;
        } | undefined;
        gone?: {
            relationId?: number | undefined;
            pkData?: {
                values?: Uint8Array[] | undefined;
                nullsBitmask?: Uint8Array | undefined;
            } | undefined;
        } | undefined;
        additionalBegin?: {
            ref?: string | number | Long | undefined;
        } | undefined;
        additionalCommit?: {
            ref?: string | number | Long | undefined;
        } | undefined;
    } & {
        begin?: ({
            lsn?: Uint8Array | undefined;
            transactionId?: string | number | Long | undefined;
            commitTimestamp?: string | number | Long | undefined;
            origin?: string | undefined;
            isMigration?: boolean | undefined;
            additionalDataRef?: string | number | Long | undefined;
        } & {
            lsn?: Uint8Array | undefined;
            transactionId?: string | number | (Long & {
                high: number;
                low: number;
                unsigned: boolean;
                add: (addend: string | number | Long) => Long;
                and: (other: string | number | Long) => Long;
                compare: (other: string | number | Long) => number;
                comp: (other: string | number | Long) => number;
                divide: (divisor: string | number | Long) => Long;
                div: (divisor: string | number | Long) => Long;
                equals: (other: string | number | Long) => boolean;
                eq: (other: string | number | Long) => boolean;
                getHighBits: () => number;
                getHighBitsUnsigned: () => number;
                getLowBits: () => number;
                getLowBitsUnsigned: () => number;
                getNumBitsAbs: () => number;
                greaterThan: (other: string | number | Long) => boolean;
                gt: (other: string | number | Long) => boolean;
                greaterThanOrEqual: (other: string | number | Long) => boolean;
                gte: (other: string | number | Long) => boolean;
                ge: (other: string | number | Long) => boolean;
                isEven: () => boolean;
                isNegative: () => boolean;
                isOdd: () => boolean;
                isPositive: () => boolean;
                isZero: () => boolean;
                eqz: () => boolean;
                lessThan: (other: string | number | Long) => boolean;
                lt: (other: string | number | Long) => boolean;
                lessThanOrEqual: (other: string | number | Long) => boolean;
                lte: (other: string | number | Long) => boolean;
                le: (other: string | number | Long) => boolean;
                modulo: (other: string | number | Long) => Long;
                mod: (other: string | number | Long) => Long;
                rem: (other: string | number | Long) => Long;
                multiply: (multiplier: string | number | Long) => Long;
                mul: (multiplier: string | number | Long) => Long;
                negate: () => Long;
                neg: () => Long;
                not: () => Long;
                countLeadingZeros: () => number;
                clz: () => number;
                countTrailingZeros: () => number;
                ctz: () => number;
                notEquals: (other: string | number | Long) => boolean;
                neq: (other: string | number | Long) => boolean;
                ne: (other: string | number | Long) => boolean;
                or: (other: string | number | Long) => Long;
                shiftLeft: (numBits: number | Long) => Long;
                shl: (numBits: number | Long) => Long;
                shiftRight: (numBits: number | Long) => Long;
                shr: (numBits: number | Long) => Long;
                shiftRightUnsigned: (numBits: number | Long) => Long;
                shru: (numBits: number | Long) => Long;
                shr_u: (numBits: number | Long) => Long;
                rotateLeft: (numBits: number | Long) => Long;
                rotl: (numBits: number | Long) => Long;
                rotateRight: (numBits: number | Long) => Long;
                rotr: (numBits: number | Long) => Long;
                subtract: (subtrahend: string | number | Long) => Long;
                sub: (subtrahend: string | number | Long) => Long;
                toInt: () => number;
                toNumber: () => number;
                toBytes: (le?: boolean | undefined) => number[];
                toBytesLE: () => number[];
                toBytesBE: () => number[];
                toSigned: () => Long;
                toString: (radix?: number | undefined) => string;
                toUnsigned: () => Long;
                xor: (other: string | number | Long) => Long;
            } & { [K_50 in Exclude<keyof I_1["begin"]["transactionId"], "$type" | keyof Long>]: never; }) | undefined;
            commitTimestamp?: string | number | (Long & {
                high: number;
                low: number;
                unsigned: boolean;
                add: (addend: string | number | Long) => Long;
                and: (other: string | number | Long) => Long;
                compare: (other: string | number | Long) => number;
                comp: (other: string | number | Long) => number;
                divide: (divisor: string | number | Long) => Long;
                div: (divisor: string | number | Long) => Long;
                equals: (other: string | number | Long) => boolean;
                eq: (other: string | number | Long) => boolean;
                getHighBits: () => number;
                getHighBitsUnsigned: () => number;
                getLowBits: () => number;
                getLowBitsUnsigned: () => number;
                getNumBitsAbs: () => number;
                greaterThan: (other: string | number | Long) => boolean;
                gt: (other: string | number | Long) => boolean;
                greaterThanOrEqual: (other: string | number | Long) => boolean;
                gte: (other: string | number | Long) => boolean;
                ge: (other: string | number | Long) => boolean;
                isEven: () => boolean;
                isNegative: () => boolean;
                isOdd: () => boolean;
                isPositive: () => boolean;
                isZero: () => boolean;
                eqz: () => boolean;
                lessThan: (other: string | number | Long) => boolean;
                lt: (other: string | number | Long) => boolean;
                lessThanOrEqual: (other: string | number | Long) => boolean;
                lte: (other: string | number | Long) => boolean;
                le: (other: string | number | Long) => boolean;
                modulo: (other: string | number | Long) => Long;
                mod: (other: string | number | Long) => Long;
                rem: (other: string | number | Long) => Long;
                multiply: (multiplier: string | number | Long) => Long;
                mul: (multiplier: string | number | Long) => Long;
                negate: () => Long;
                neg: () => Long;
                not: () => Long;
                countLeadingZeros: () => number;
                clz: () => number;
                countTrailingZeros: () => number;
                ctz: () => number;
                notEquals: (other: string | number | Long) => boolean;
                neq: (other: string | number | Long) => boolean;
                ne: (other: string | number | Long) => boolean;
                or: (other: string | number | Long) => Long;
                shiftLeft: (numBits: number | Long) => Long;
                shl: (numBits: number | Long) => Long;
                shiftRight: (numBits: number | Long) => Long;
                shr: (numBits: number | Long) => Long;
                shiftRightUnsigned: (numBits: number | Long) => Long;
                shru: (numBits: number | Long) => Long;
                shr_u: (numBits: number | Long) => Long;
                rotateLeft: (numBits: number | Long) => Long;
                rotl: (numBits: number | Long) => Long;
                rotateRight: (numBits: number | Long) => Long;
                rotr: (numBits: number | Long) => Long;
                subtract: (subtrahend: string | number | Long) => Long;
                sub: (subtrahend: string | number | Long) => Long;
                toInt: () => number;
                toNumber: () => number;
                toBytes: (le?: boolean | undefined) => number[];
                toBytesLE: () => number[];
                toBytesBE: () => number[];
                toSigned: () => Long;
                toString: (radix?: number | undefined) => string;
                toUnsigned: () => Long;
                xor: (other: string | number | Long) => Long;
            } & { [K_51 in Exclude<keyof I_1["begin"]["commitTimestamp"], "$type" | keyof Long>]: never; }) | undefined;
            origin?: string | undefined;
            isMigration?: boolean | undefined;
            additionalDataRef?: string | number | (Long & {
                high: number;
                low: number;
                unsigned: boolean;
                add: (addend: string | number | Long) => Long;
                and: (other: string | number | Long) => Long;
                compare: (other: string | number | Long) => number;
                comp: (other: string | number | Long) => number;
                divide: (divisor: string | number | Long) => Long;
                div: (divisor: string | number | Long) => Long;
                equals: (other: string | number | Long) => boolean;
                eq: (other: string | number | Long) => boolean;
                getHighBits: () => number;
                getHighBitsUnsigned: () => number;
                getLowBits: () => number;
                getLowBitsUnsigned: () => number;
                getNumBitsAbs: () => number;
                greaterThan: (other: string | number | Long) => boolean;
                gt: (other: string | number | Long) => boolean;
                greaterThanOrEqual: (other: string | number | Long) => boolean;
                gte: (other: string | number | Long) => boolean;
                ge: (other: string | number | Long) => boolean;
                isEven: () => boolean;
                isNegative: () => boolean;
                isOdd: () => boolean;
                isPositive: () => boolean;
                isZero: () => boolean;
                eqz: () => boolean;
                lessThan: (other: string | number | Long) => boolean;
                lt: (other: string | number | Long) => boolean;
                lessThanOrEqual: (other: string | number | Long) => boolean;
                lte: (other: string | number | Long) => boolean;
                le: (other: string | number | Long) => boolean;
                modulo: (other: string | number | Long) => Long;
                mod: (other: string | number | Long) => Long;
                rem: (other: string | number | Long) => Long;
                multiply: (multiplier: string | number | Long) => Long;
                mul: (multiplier: string | number | Long) => Long;
                negate: () => Long;
                neg: () => Long;
                not: () => Long;
                countLeadingZeros: () => number;
                clz: () => number;
                countTrailingZeros: () => number;
                ctz: () => number;
                notEquals: (other: string | number | Long) => boolean;
                neq: (other: string | number | Long) => boolean;
                ne: (other: string | number | Long) => boolean;
                or: (other: string | number | Long) => Long;
                shiftLeft: (numBits: number | Long) => Long;
                shl: (numBits: number | Long) => Long;
                shiftRight: (numBits: number | Long) => Long;
                shr: (numBits: number | Long) => Long;
                shiftRightUnsigned: (numBits: number | Long) => Long;
                shru: (numBits: number | Long) => Long;
                shr_u: (numBits: number | Long) => Long;
                rotateLeft: (numBits: number | Long) => Long;
                rotl: (numBits: number | Long) => Long;
                rotateRight: (numBits: number | Long) => Long;
                rotr: (numBits: number | Long) => Long;
                subtract: (subtrahend: string | number | Long) => Long;
                sub: (subtrahend: string | number | Long) => Long;
                toInt: () => number;
                toNumber: () => number;
                toBytes: (le?: boolean | undefined) => number[];
                toBytesLE: () => number[];
                toBytesBE: () => number[];
                toSigned: () => Long;
                toString: (radix?: number | undefined) => string;
                toUnsigned: () => Long;
                xor: (other: string | number | Long) => Long;
            } & { [K_52 in Exclude<keyof I_1["begin"]["additionalDataRef"], "$type" | keyof Long>]: never; }) | undefined;
        } & { [K_53 in Exclude<keyof I_1["begin"], "$type" | "lsn" | "transactionId" | "commitTimestamp" | "origin" | "isMigration" | "additionalDataRef">]: never; }) | undefined;
        commit?: ({
            lsn?: Uint8Array | undefined;
            transactionId?: string | number | Long | undefined;
            commitTimestamp?: string | number | Long | undefined;
            additionalDataRef?: string | number | Long | undefined;
        } & {
            lsn?: Uint8Array | undefined;
            transactionId?: string | number | (Long & {
                high: number;
                low: number;
                unsigned: boolean;
                add: (addend: string | number | Long) => Long;
                and: (other: string | number | Long) => Long;
                compare: (other: string | number | Long) => number;
                comp: (other: string | number | Long) => number;
                divide: (divisor: string | number | Long) => Long;
                div: (divisor: string | number | Long) => Long;
                equals: (other: string | number | Long) => boolean;
                eq: (other: string | number | Long) => boolean;
                getHighBits: () => number;
                getHighBitsUnsigned: () => number;
                getLowBits: () => number;
                getLowBitsUnsigned: () => number;
                getNumBitsAbs: () => number;
                greaterThan: (other: string | number | Long) => boolean;
                gt: (other: string | number | Long) => boolean;
                greaterThanOrEqual: (other: string | number | Long) => boolean;
                gte: (other: string | number | Long) => boolean;
                ge: (other: string | number | Long) => boolean;
                isEven: () => boolean;
                isNegative: () => boolean;
                isOdd: () => boolean;
                isPositive: () => boolean;
                isZero: () => boolean;
                eqz: () => boolean;
                lessThan: (other: string | number | Long) => boolean;
                lt: (other: string | number | Long) => boolean;
                lessThanOrEqual: (other: string | number | Long) => boolean;
                lte: (other: string | number | Long) => boolean;
                le: (other: string | number | Long) => boolean;
                modulo: (other: string | number | Long) => Long;
                mod: (other: string | number | Long) => Long;
                rem: (other: string | number | Long) => Long;
                multiply: (multiplier: string | number | Long) => Long;
                mul: (multiplier: string | number | Long) => Long;
                negate: () => Long;
                neg: () => Long;
                not: () => Long;
                countLeadingZeros: () => number;
                clz: () => number;
                countTrailingZeros: () => number;
                ctz: () => number;
                notEquals: (other: string | number | Long) => boolean;
                neq: (other: string | number | Long) => boolean;
                ne: (other: string | number | Long) => boolean;
                or: (other: string | number | Long) => Long;
                shiftLeft: (numBits: number | Long) => Long;
                shl: (numBits: number | Long) => Long;
                shiftRight: (numBits: number | Long) => Long;
                shr: (numBits: number | Long) => Long;
                shiftRightUnsigned: (numBits: number | Long) => Long;
                shru: (numBits: number | Long) => Long;
                shr_u: (numBits: number | Long) => Long;
                rotateLeft: (numBits: number | Long) => Long;
                rotl: (numBits: number | Long) => Long;
                rotateRight: (numBits: number | Long) => Long;
                rotr: (numBits: number | Long) => Long;
                subtract: (subtrahend: string | number | Long) => Long;
                sub: (subtrahend: string | number | Long) => Long;
                toInt: () => number;
                toNumber: () => number;
                toBytes: (le?: boolean | undefined) => number[];
                toBytesLE: () => number[];
                toBytesBE: () => number[];
                toSigned: () => Long;
                toString: (radix?: number | undefined) => string;
                toUnsigned: () => Long;
                xor: (other: string | number | Long) => Long;
            } & { [K_54 in Exclude<keyof I_1["commit"]["transactionId"], "$type" | keyof Long>]: never; }) | undefined;
            commitTimestamp?: string | number | (Long & {
                high: number;
                low: number;
                unsigned: boolean;
                add: (addend: string | number | Long) => Long;
                and: (other: string | number | Long) => Long;
                compare: (other: string | number | Long) => number;
                comp: (other: string | number | Long) => number;
                divide: (divisor: string | number | Long) => Long;
                div: (divisor: string | number | Long) => Long;
                equals: (other: string | number | Long) => boolean;
                eq: (other: string | number | Long) => boolean;
                getHighBits: () => number;
                getHighBitsUnsigned: () => number;
                getLowBits: () => number;
                getLowBitsUnsigned: () => number;
                getNumBitsAbs: () => number;
                greaterThan: (other: string | number | Long) => boolean;
                gt: (other: string | number | Long) => boolean;
                greaterThanOrEqual: (other: string | number | Long) => boolean;
                gte: (other: string | number | Long) => boolean;
                ge: (other: string | number | Long) => boolean;
                isEven: () => boolean;
                isNegative: () => boolean;
                isOdd: () => boolean;
                isPositive: () => boolean;
                isZero: () => boolean;
                eqz: () => boolean;
                lessThan: (other: string | number | Long) => boolean;
                lt: (other: string | number | Long) => boolean;
                lessThanOrEqual: (other: string | number | Long) => boolean;
                lte: (other: string | number | Long) => boolean;
                le: (other: string | number | Long) => boolean;
                modulo: (other: string | number | Long) => Long;
                mod: (other: string | number | Long) => Long;
                rem: (other: string | number | Long) => Long;
                multiply: (multiplier: string | number | Long) => Long;
                mul: (multiplier: string | number | Long) => Long;
                negate: () => Long;
                neg: () => Long;
                not: () => Long;
                countLeadingZeros: () => number;
                clz: () => number;
                countTrailingZeros: () => number;
                ctz: () => number;
                notEquals: (other: string | number | Long) => boolean;
                neq: (other: string | number | Long) => boolean;
                ne: (other: string | number | Long) => boolean;
                or: (other: string | number | Long) => Long;
                shiftLeft: (numBits: number | Long) => Long;
                shl: (numBits: number | Long) => Long;
                shiftRight: (numBits: number | Long) => Long;
                shr: (numBits: number | Long) => Long;
                shiftRightUnsigned: (numBits: number | Long) => Long;
                shru: (numBits: number | Long) => Long;
                shr_u: (numBits: number | Long) => Long;
                rotateLeft: (numBits: number | Long) => Long;
                rotl: (numBits: number | Long) => Long;
                rotateRight: (numBits: number | Long) => Long;
                rotr: (numBits: number | Long) => Long;
                subtract: (subtrahend: string | number | Long) => Long;
                sub: (subtrahend: string | number | Long) => Long;
                toInt: () => number;
                toNumber: () => number;
                toBytes: (le?: boolean | undefined) => number[];
                toBytesLE: () => number[];
                toBytesBE: () => number[];
                toSigned: () => Long;
                toString: (radix?: number | undefined) => string;
                toUnsigned: () => Long;
                xor: (other: string | number | Long) => Long;
            } & { [K_55 in Exclude<keyof I_1["commit"]["commitTimestamp"], "$type" | keyof Long>]: never; }) | undefined;
            additionalDataRef?: string | number | (Long & {
                high: number;
                low: number;
                unsigned: boolean;
                add: (addend: string | number | Long) => Long;
                and: (other: string | number | Long) => Long;
                compare: (other: string | number | Long) => number;
                comp: (other: string | number | Long) => number;
                divide: (divisor: string | number | Long) => Long;
                div: (divisor: string | number | Long) => Long;
                equals: (other: string | number | Long) => boolean;
                eq: (other: string | number | Long) => boolean;
                getHighBits: () => number;
                getHighBitsUnsigned: () => number;
                getLowBits: () => number;
                getLowBitsUnsigned: () => number;
                getNumBitsAbs: () => number;
                greaterThan: (other: string | number | Long) => boolean;
                gt: (other: string | number | Long) => boolean;
                greaterThanOrEqual: (other: string | number | Long) => boolean;
                gte: (other: string | number | Long) => boolean;
                ge: (other: string | number | Long) => boolean;
                isEven: () => boolean;
                isNegative: () => boolean;
                isOdd: () => boolean;
                isPositive: () => boolean;
                isZero: () => boolean;
                eqz: () => boolean;
                lessThan: (other: string | number | Long) => boolean;
                lt: (other: string | number | Long) => boolean;
                lessThanOrEqual: (other: string | number | Long) => boolean;
                lte: (other: string | number | Long) => boolean;
                le: (other: string | number | Long) => boolean;
                modulo: (other: string | number | Long) => Long;
                mod: (other: string | number | Long) => Long;
                rem: (other: string | number | Long) => Long;
                multiply: (multiplier: string | number | Long) => Long;
                mul: (multiplier: string | number | Long) => Long;
                negate: () => Long;
                neg: () => Long;
                not: () => Long;
                countLeadingZeros: () => number;
                clz: () => number;
                countTrailingZeros: () => number;
                ctz: () => number;
                notEquals: (other: string | number | Long) => boolean;
                neq: (other: string | number | Long) => boolean;
                ne: (other: string | number | Long) => boolean;
                or: (other: string | number | Long) => Long;
                shiftLeft: (numBits: number | Long) => Long;
                shl: (numBits: number | Long) => Long;
                shiftRight: (numBits: number | Long) => Long;
                shr: (numBits: number | Long) => Long;
                shiftRightUnsigned: (numBits: number | Long) => Long;
                shru: (numBits: number | Long) => Long;
                shr_u: (numBits: number | Long) => Long;
                rotateLeft: (numBits: number | Long) => Long;
                rotl: (numBits: number | Long) => Long;
                rotateRight: (numBits: number | Long) => Long;
                rotr: (numBits: number | Long) => Long;
                subtract: (subtrahend: string | number | Long) => Long;
                sub: (subtrahend: string | number | Long) => Long;
                toInt: () => number;
                toNumber: () => number;
                toBytes: (le?: boolean | undefined) => number[];
                toBytesLE: () => number[];
                toBytesBE: () => number[];
                toSigned: () => Long;
                toString: (radix?: number | undefined) => string;
                toUnsigned: () => Long;
                xor: (other: string | number | Long) => Long;
            } & { [K_56 in Exclude<keyof I_1["commit"]["additionalDataRef"], "$type" | keyof Long>]: never; }) | undefined;
        } & { [K_57 in Exclude<keyof I_1["commit"], "$type" | "lsn" | "transactionId" | "commitTimestamp" | "additionalDataRef">]: never; }) | undefined;
        update?: ({
            relationId?: number | undefined;
            rowData?: {
                values?: Uint8Array[] | undefined;
                nullsBitmask?: Uint8Array | undefined;
            } | undefined;
            oldRowData?: {
                values?: Uint8Array[] | undefined;
                nullsBitmask?: Uint8Array | undefined;
            } | undefined;
            tags?: string[] | undefined;
        } & {
            relationId?: number | undefined;
            rowData?: ({
                values?: Uint8Array[] | undefined;
                nullsBitmask?: Uint8Array | undefined;
            } & {
                values?: (Uint8Array[] & Uint8Array[] & { [K_58 in Exclude<keyof I_1["update"]["rowData"]["values"], "$type" | keyof Uint8Array[]>]: never; }) | undefined;
                nullsBitmask?: Uint8Array | undefined;
            } & { [K_59 in Exclude<keyof I_1["update"]["rowData"], "$type" | "values" | "nullsBitmask">]: never; }) | undefined;
            oldRowData?: ({
                values?: Uint8Array[] | undefined;
                nullsBitmask?: Uint8Array | undefined;
            } & {
                values?: (Uint8Array[] & Uint8Array[] & { [K_60 in Exclude<keyof I_1["update"]["oldRowData"]["values"], "$type" | keyof Uint8Array[]>]: never; }) | undefined;
                nullsBitmask?: Uint8Array | undefined;
            } & { [K_61 in Exclude<keyof I_1["update"]["oldRowData"], "$type" | "values" | "nullsBitmask">]: never; }) | undefined;
            tags?: (string[] & string[] & { [K_62 in Exclude<keyof I_1["update"]["tags"], "$type" | keyof string[]>]: never; }) | undefined;
        } & { [K_63 in Exclude<keyof I_1["update"], "$type" | "relationId" | "rowData" | "oldRowData" | "tags">]: never; }) | undefined;
        insert?: ({
            relationId?: number | undefined;
            rowData?: {
                values?: Uint8Array[] | undefined;
                nullsBitmask?: Uint8Array | undefined;
            } | undefined;
            tags?: string[] | undefined;
        } & {
            relationId?: number | undefined;
            rowData?: ({
                values?: Uint8Array[] | undefined;
                nullsBitmask?: Uint8Array | undefined;
            } & {
                values?: (Uint8Array[] & Uint8Array[] & { [K_64 in Exclude<keyof I_1["insert"]["rowData"]["values"], "$type" | keyof Uint8Array[]>]: never; }) | undefined;
                nullsBitmask?: Uint8Array | undefined;
            } & { [K_65 in Exclude<keyof I_1["insert"]["rowData"], "$type" | "values" | "nullsBitmask">]: never; }) | undefined;
            tags?: (string[] & string[] & { [K_66 in Exclude<keyof I_1["insert"]["tags"], "$type" | keyof string[]>]: never; }) | undefined;
        } & { [K_67 in Exclude<keyof I_1["insert"], "$type" | "relationId" | "rowData" | "tags">]: never; }) | undefined;
        delete?: ({
            relationId?: number | undefined;
            oldRowData?: {
                values?: Uint8Array[] | undefined;
                nullsBitmask?: Uint8Array | undefined;
            } | undefined;
            tags?: string[] | undefined;
        } & {
            relationId?: number | undefined;
            oldRowData?: ({
                values?: Uint8Array[] | undefined;
                nullsBitmask?: Uint8Array | undefined;
            } & {
                values?: (Uint8Array[] & Uint8Array[] & { [K_68 in Exclude<keyof I_1["delete"]["oldRowData"]["values"], "$type" | keyof Uint8Array[]>]: never; }) | undefined;
                nullsBitmask?: Uint8Array | undefined;
            } & { [K_69 in Exclude<keyof I_1["delete"]["oldRowData"], "$type" | "values" | "nullsBitmask">]: never; }) | undefined;
            tags?: (string[] & string[] & { [K_70 in Exclude<keyof I_1["delete"]["tags"], "$type" | keyof string[]>]: never; }) | undefined;
        } & { [K_71 in Exclude<keyof I_1["delete"], "$type" | "relationId" | "oldRowData" | "tags">]: never; }) | undefined;
        migrate?: ({
            version?: string | undefined;
            stmts?: {
                type?: SatOpMigrate_Type | undefined;
                sql?: string | undefined;
            }[] | undefined;
            table?: {
                name?: string | undefined;
                columns?: {
                    name?: string | undefined;
                    sqliteType?: string | undefined;
                    pgType?: {
                        name?: string | undefined;
                        array?: number[] | undefined;
                        size?: number[] | undefined;
                    } | undefined;
                }[] | undefined;
                fks?: {
                    fkCols?: string[] | undefined;
                    pkTable?: string | undefined;
                    pkCols?: string[] | undefined;
                }[] | undefined;
                pks?: string[] | undefined;
            } | undefined;
            enumType?: {
                values?: string[] | undefined;
                name?: string | undefined;
            } | undefined;
        } & {
            version?: string | undefined;
            stmts?: ({
                type?: SatOpMigrate_Type | undefined;
                sql?: string | undefined;
            }[] & ({
                type?: SatOpMigrate_Type | undefined;
                sql?: string | undefined;
            } & {
                type?: SatOpMigrate_Type | undefined;
                sql?: string | undefined;
            } & { [K_72 in Exclude<keyof I_1["migrate"]["stmts"][number], "$type" | "type" | "sql">]: never; })[] & { [K_73 in Exclude<keyof I_1["migrate"]["stmts"], "$type" | keyof {
                type?: SatOpMigrate_Type | undefined;
                sql?: string | undefined;
            }[]>]: never; }) | undefined;
            table?: ({
                name?: string | undefined;
                columns?: {
                    name?: string | undefined;
                    sqliteType?: string | undefined;
                    pgType?: {
                        name?: string | undefined;
                        array?: number[] | undefined;
                        size?: number[] | undefined;
                    } | undefined;
                }[] | undefined;
                fks?: {
                    fkCols?: string[] | undefined;
                    pkTable?: string | undefined;
                    pkCols?: string[] | undefined;
                }[] | undefined;
                pks?: string[] | undefined;
            } & {
                name?: string | undefined;
                columns?: ({
                    name?: string | undefined;
                    sqliteType?: string | undefined;
                    pgType?: {
                        name?: string | undefined;
                        array?: number[] | undefined;
                        size?: number[] | undefined;
                    } | undefined;
                }[] & ({
                    name?: string | undefined;
                    sqliteType?: string | undefined;
                    pgType?: {
                        name?: string | undefined;
                        array?: number[] | undefined;
                        size?: number[] | undefined;
                    } | undefined;
                } & {
                    name?: string | undefined;
                    sqliteType?: string | undefined;
                    pgType?: ({
                        name?: string | undefined;
                        array?: number[] | undefined;
                        size?: number[] | undefined;
                    } & {
                        name?: string | undefined;
                        array?: (number[] & number[] & { [K_74 in Exclude<keyof I_1["migrate"]["table"]["columns"][number]["pgType"]["array"], "$type" | keyof number[]>]: never; }) | undefined;
                        size?: (number[] & number[] & { [K_75 in Exclude<keyof I_1["migrate"]["table"]["columns"][number]["pgType"]["size"], "$type" | keyof number[]>]: never; }) | undefined;
                    } & { [K_76 in Exclude<keyof I_1["migrate"]["table"]["columns"][number]["pgType"], "$type" | "name" | "array" | "size">]: never; }) | undefined;
                } & { [K_77 in Exclude<keyof I_1["migrate"]["table"]["columns"][number], "$type" | "name" | "sqliteType" | "pgType">]: never; })[] & { [K_78 in Exclude<keyof I_1["migrate"]["table"]["columns"], "$type" | keyof {
                    name?: string | undefined;
                    sqliteType?: string | undefined;
                    pgType?: {
                        name?: string | undefined;
                        array?: number[] | undefined;
                        size?: number[] | undefined;
                    } | undefined;
                }[]>]: never; }) | undefined;
                fks?: ({
                    fkCols?: string[] | undefined;
                    pkTable?: string | undefined;
                    pkCols?: string[] | undefined;
                }[] & ({
                    fkCols?: string[] | undefined;
                    pkTable?: string | undefined;
                    pkCols?: string[] | undefined;
                } & {
                    fkCols?: (string[] & string[] & { [K_79 in Exclude<keyof I_1["migrate"]["table"]["fks"][number]["fkCols"], "$type" | keyof string[]>]: never; }) | undefined;
                    pkTable?: string | undefined;
                    pkCols?: (string[] & string[] & { [K_80 in Exclude<keyof I_1["migrate"]["table"]["fks"][number]["pkCols"], "$type" | keyof string[]>]: never; }) | undefined;
                } & { [K_81 in Exclude<keyof I_1["migrate"]["table"]["fks"][number], "$type" | "fkCols" | "pkTable" | "pkCols">]: never; })[] & { [K_82 in Exclude<keyof I_1["migrate"]["table"]["fks"], "$type" | keyof {
                    fkCols?: string[] | undefined;
                    pkTable?: string | undefined;
                    pkCols?: string[] | undefined;
                }[]>]: never; }) | undefined;
                pks?: (string[] & string[] & { [K_83 in Exclude<keyof I_1["migrate"]["table"]["pks"], "$type" | keyof string[]>]: never; }) | undefined;
            } & { [K_84 in Exclude<keyof I_1["migrate"]["table"], "$type" | "name" | "columns" | "fks" | "pks">]: never; }) | undefined;
            enumType?: ({
                values?: string[] | undefined;
                name?: string | undefined;
            } & {
                values?: (string[] & string[] & { [K_85 in Exclude<keyof I_1["migrate"]["enumType"]["values"], "$type" | keyof string[]>]: never; }) | undefined;
                name?: string | undefined;
            } & { [K_86 in Exclude<keyof I_1["migrate"]["enumType"], "$type" | "values" | "name">]: never; }) | undefined;
        } & { [K_87 in Exclude<keyof I_1["migrate"], "$type" | "version" | "stmts" | "table" | "enumType">]: never; }) | undefined;
        compensation?: ({
            relationId?: number | undefined;
            tags?: string[] | undefined;
            pkData?: {
                values?: Uint8Array[] | undefined;
                nullsBitmask?: Uint8Array | undefined;
            } | undefined;
        } & {
            relationId?: number | undefined;
            tags?: (string[] & string[] & { [K_88 in Exclude<keyof I_1["compensation"]["tags"], "$type" | keyof string[]>]: never; }) | undefined;
            pkData?: ({
                values?: Uint8Array[] | undefined;
                nullsBitmask?: Uint8Array | undefined;
            } & {
                values?: (Uint8Array[] & Uint8Array[] & { [K_89 in Exclude<keyof I_1["compensation"]["pkData"]["values"], "$type" | keyof Uint8Array[]>]: never; }) | undefined;
                nullsBitmask?: Uint8Array | undefined;
            } & { [K_90 in Exclude<keyof I_1["compensation"]["pkData"], "$type" | "values" | "nullsBitmask">]: never; }) | undefined;
        } & { [K_91 in Exclude<keyof I_1["compensation"], "$type" | "relationId" | "tags" | "pkData">]: never; }) | undefined;
        gone?: ({
            relationId?: number | undefined;
            pkData?: {
                values?: Uint8Array[] | undefined;
                nullsBitmask?: Uint8Array | undefined;
            } | undefined;
        } & {
            relationId?: number | undefined;
            pkData?: ({
                values?: Uint8Array[] | undefined;
                nullsBitmask?: Uint8Array | undefined;
            } & {
                values?: (Uint8Array[] & Uint8Array[] & { [K_92 in Exclude<keyof I_1["gone"]["pkData"]["values"], "$type" | keyof Uint8Array[]>]: never; }) | undefined;
                nullsBitmask?: Uint8Array | undefined;
            } & { [K_93 in Exclude<keyof I_1["gone"]["pkData"], "$type" | "values" | "nullsBitmask">]: never; }) | undefined;
        } & { [K_94 in Exclude<keyof I_1["gone"], "$type" | "relationId" | "pkData">]: never; }) | undefined;
        additionalBegin?: ({
            ref?: string | number | Long | undefined;
        } & {
            ref?: string | number | (Long & {
                high: number;
                low: number;
                unsigned: boolean;
                add: (addend: string | number | Long) => Long;
                and: (other: string | number | Long) => Long;
                compare: (other: string | number | Long) => number;
                comp: (other: string | number | Long) => number;
                divide: (divisor: string | number | Long) => Long;
                div: (divisor: string | number | Long) => Long;
                equals: (other: string | number | Long) => boolean;
                eq: (other: string | number | Long) => boolean;
                getHighBits: () => number;
                getHighBitsUnsigned: () => number;
                getLowBits: () => number;
                getLowBitsUnsigned: () => number;
                getNumBitsAbs: () => number;
                greaterThan: (other: string | number | Long) => boolean;
                gt: (other: string | number | Long) => boolean;
                greaterThanOrEqual: (other: string | number | Long) => boolean;
                gte: (other: string | number | Long) => boolean;
                ge: (other: string | number | Long) => boolean;
                isEven: () => boolean;
                isNegative: () => boolean;
                isOdd: () => boolean;
                isPositive: () => boolean;
                isZero: () => boolean;
                eqz: () => boolean;
                lessThan: (other: string | number | Long) => boolean;
                lt: (other: string | number | Long) => boolean;
                lessThanOrEqual: (other: string | number | Long) => boolean;
                lte: (other: string | number | Long) => boolean;
                le: (other: string | number | Long) => boolean;
                modulo: (other: string | number | Long) => Long;
                mod: (other: string | number | Long) => Long;
                rem: (other: string | number | Long) => Long;
                multiply: (multiplier: string | number | Long) => Long;
                mul: (multiplier: string | number | Long) => Long;
                negate: () => Long;
                neg: () => Long;
                not: () => Long;
                countLeadingZeros: () => number;
                clz: () => number;
                countTrailingZeros: () => number;
                ctz: () => number;
                notEquals: (other: string | number | Long) => boolean;
                neq: (other: string | number | Long) => boolean;
                ne: (other: string | number | Long) => boolean;
                or: (other: string | number | Long) => Long;
                shiftLeft: (numBits: number | Long) => Long;
                shl: (numBits: number | Long) => Long;
                shiftRight: (numBits: number | Long) => Long;
                shr: (numBits: number | Long) => Long;
                shiftRightUnsigned: (numBits: number | Long) => Long;
                shru: (numBits: number | Long) => Long;
                shr_u: (numBits: number | Long) => Long;
                rotateLeft: (numBits: number | Long) => Long;
                rotl: (numBits: number | Long) => Long;
                rotateRight: (numBits: number | Long) => Long;
                rotr: (numBits: number | Long) => Long;
                subtract: (subtrahend: string | number | Long) => Long;
                sub: (subtrahend: string | number | Long) => Long;
                toInt: () => number;
                toNumber: () => number;
                toBytes: (le?: boolean | undefined) => number[];
                toBytesLE: () => number[];
                toBytesBE: () => number[];
                toSigned: () => Long;
                toString: (radix?: number | undefined) => string;
                toUnsigned: () => Long;
                xor: (other: string | number | Long) => Long;
            } & { [K_95 in Exclude<keyof I_1["additionalBegin"]["ref"], "$type" | keyof Long>]: never; }) | undefined;
        } & { [K_96 in Exclude<keyof I_1["additionalBegin"], "$type" | "ref">]: never; }) | undefined;
        additionalCommit?: ({
            ref?: string | number | Long | undefined;
        } & {
            ref?: string | number | (Long & {
                high: number;
                low: number;
                unsigned: boolean;
                add: (addend: string | number | Long) => Long;
                and: (other: string | number | Long) => Long;
                compare: (other: string | number | Long) => number;
                comp: (other: string | number | Long) => number;
                divide: (divisor: string | number | Long) => Long;
                div: (divisor: string | number | Long) => Long;
                equals: (other: string | number | Long) => boolean;
                eq: (other: string | number | Long) => boolean;
                getHighBits: () => number;
                getHighBitsUnsigned: () => number;
                getLowBits: () => number;
                getLowBitsUnsigned: () => number;
                getNumBitsAbs: () => number;
                greaterThan: (other: string | number | Long) => boolean;
                gt: (other: string | number | Long) => boolean;
                greaterThanOrEqual: (other: string | number | Long) => boolean;
                gte: (other: string | number | Long) => boolean;
                ge: (other: string | number | Long) => boolean;
                isEven: () => boolean;
                isNegative: () => boolean;
                isOdd: () => boolean;
                isPositive: () => boolean;
                isZero: () => boolean;
                eqz: () => boolean;
                lessThan: (other: string | number | Long) => boolean;
                lt: (other: string | number | Long) => boolean;
                lessThanOrEqual: (other: string | number | Long) => boolean;
                lte: (other: string | number | Long) => boolean;
                le: (other: string | number | Long) => boolean;
                modulo: (other: string | number | Long) => Long;
                mod: (other: string | number | Long) => Long;
                rem: (other: string | number | Long) => Long;
                multiply: (multiplier: string | number | Long) => Long;
                mul: (multiplier: string | number | Long) => Long;
                negate: () => Long;
                neg: () => Long;
                not: () => Long;
                countLeadingZeros: () => number;
                clz: () => number;
                countTrailingZeros: () => number;
                ctz: () => number;
                notEquals: (other: string | number | Long) => boolean;
                neq: (other: string | number | Long) => boolean;
                ne: (other: string | number | Long) => boolean;
                or: (other: string | number | Long) => Long;
                shiftLeft: (numBits: number | Long) => Long;
                shl: (numBits: number | Long) => Long;
                shiftRight: (numBits: number | Long) => Long;
                shr: (numBits: number | Long) => Long;
                shiftRightUnsigned: (numBits: number | Long) => Long;
                shru: (numBits: number | Long) => Long;
                shr_u: (numBits: number | Long) => Long;
                rotateLeft: (numBits: number | Long) => Long;
                rotl: (numBits: number | Long) => Long;
                rotateRight: (numBits: number | Long) => Long;
                rotr: (numBits: number | Long) => Long;
                subtract: (subtrahend: string | number | Long) => Long;
                sub: (subtrahend: string | number | Long) => Long;
                toInt: () => number;
                toNumber: () => number;
                toBytes: (le?: boolean | undefined) => number[];
                toBytesLE: () => number[];
                toBytesBE: () => number[];
                toSigned: () => Long;
                toString: (radix?: number | undefined) => string;
                toUnsigned: () => Long;
                xor: (other: string | number | Long) => Long;
            } & { [K_97 in Exclude<keyof I_1["additionalCommit"]["ref"], "$type" | keyof Long>]: never; }) | undefined;
        } & { [K_98 in Exclude<keyof I_1["additionalCommit"], "$type" | "ref">]: never; }) | undefined;
    } & { [K_99 in Exclude<keyof I_1, "$type" | "begin" | "commit" | "update" | "insert" | "delete" | "migrate" | "compensation" | "gone" | "additionalBegin" | "additionalCommit">]: never; }>(object: I_1): SatTransOp;
};
export declare const SatOpBegin: {
    $type: "Electric.Satellite.SatOpBegin";
    encode(message: SatOpBegin, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): SatOpBegin;
    create<I extends {
        lsn?: Uint8Array | undefined;
        transactionId?: string | number | Long | undefined;
        commitTimestamp?: string | number | Long | undefined;
        origin?: string | undefined;
        isMigration?: boolean | undefined;
        additionalDataRef?: string | number | Long | undefined;
    } & {
        lsn?: Uint8Array | undefined;
        transactionId?: string | number | (Long & {
            high: number;
            low: number;
            unsigned: boolean;
            add: (addend: string | number | Long) => Long;
            and: (other: string | number | Long) => Long;
            compare: (other: string | number | Long) => number;
            comp: (other: string | number | Long) => number;
            divide: (divisor: string | number | Long) => Long;
            div: (divisor: string | number | Long) => Long;
            equals: (other: string | number | Long) => boolean;
            eq: (other: string | number | Long) => boolean;
            getHighBits: () => number;
            getHighBitsUnsigned: () => number;
            getLowBits: () => number;
            getLowBitsUnsigned: () => number;
            getNumBitsAbs: () => number;
            greaterThan: (other: string | number | Long) => boolean;
            gt: (other: string | number | Long) => boolean;
            greaterThanOrEqual: (other: string | number | Long) => boolean;
            gte: (other: string | number | Long) => boolean;
            ge: (other: string | number | Long) => boolean;
            isEven: () => boolean;
            isNegative: () => boolean;
            isOdd: () => boolean;
            isPositive: () => boolean;
            isZero: () => boolean;
            eqz: () => boolean;
            lessThan: (other: string | number | Long) => boolean;
            lt: (other: string | number | Long) => boolean;
            lessThanOrEqual: (other: string | number | Long) => boolean;
            lte: (other: string | number | Long) => boolean;
            le: (other: string | number | Long) => boolean;
            modulo: (other: string | number | Long) => Long;
            mod: (other: string | number | Long) => Long;
            rem: (other: string | number | Long) => Long;
            multiply: (multiplier: string | number | Long) => Long;
            mul: (multiplier: string | number | Long) => Long;
            negate: () => Long;
            neg: () => Long;
            not: () => Long;
            countLeadingZeros: () => number;
            clz: () => number;
            countTrailingZeros: () => number;
            ctz: () => number;
            notEquals: (other: string | number | Long) => boolean;
            neq: (other: string | number | Long) => boolean;
            ne: (other: string | number | Long) => boolean;
            or: (other: string | number | Long) => Long;
            shiftLeft: (numBits: number | Long) => Long;
            shl: (numBits: number | Long) => Long;
            shiftRight: (numBits: number | Long) => Long;
            shr: (numBits: number | Long) => Long;
            shiftRightUnsigned: (numBits: number | Long) => Long;
            shru: (numBits: number | Long) => Long;
            shr_u: (numBits: number | Long) => Long;
            rotateLeft: (numBits: number | Long) => Long;
            rotl: (numBits: number | Long) => Long;
            rotateRight: (numBits: number | Long) => Long;
            rotr: (numBits: number | Long) => Long;
            subtract: (subtrahend: string | number | Long) => Long;
            sub: (subtrahend: string | number | Long) => Long;
            toInt: () => number;
            toNumber: () => number;
            toBytes: (le?: boolean | undefined) => number[];
            toBytesLE: () => number[];
            toBytesBE: () => number[];
            toSigned: () => Long;
            toString: (radix?: number | undefined) => string;
            toUnsigned: () => Long;
            xor: (other: string | number | Long) => Long;
        } & { [K in Exclude<keyof I["transactionId"], "$type" | keyof Long>]: never; }) | undefined;
        commitTimestamp?: string | number | (Long & {
            high: number;
            low: number;
            unsigned: boolean;
            add: (addend: string | number | Long) => Long;
            and: (other: string | number | Long) => Long;
            compare: (other: string | number | Long) => number;
            comp: (other: string | number | Long) => number;
            divide: (divisor: string | number | Long) => Long;
            div: (divisor: string | number | Long) => Long;
            equals: (other: string | number | Long) => boolean;
            eq: (other: string | number | Long) => boolean;
            getHighBits: () => number;
            getHighBitsUnsigned: () => number;
            getLowBits: () => number;
            getLowBitsUnsigned: () => number;
            getNumBitsAbs: () => number;
            greaterThan: (other: string | number | Long) => boolean;
            gt: (other: string | number | Long) => boolean;
            greaterThanOrEqual: (other: string | number | Long) => boolean;
            gte: (other: string | number | Long) => boolean;
            ge: (other: string | number | Long) => boolean;
            isEven: () => boolean;
            isNegative: () => boolean;
            isOdd: () => boolean;
            isPositive: () => boolean;
            isZero: () => boolean;
            eqz: () => boolean;
            lessThan: (other: string | number | Long) => boolean;
            lt: (other: string | number | Long) => boolean;
            lessThanOrEqual: (other: string | number | Long) => boolean;
            lte: (other: string | number | Long) => boolean;
            le: (other: string | number | Long) => boolean;
            modulo: (other: string | number | Long) => Long;
            mod: (other: string | number | Long) => Long;
            rem: (other: string | number | Long) => Long;
            multiply: (multiplier: string | number | Long) => Long;
            mul: (multiplier: string | number | Long) => Long;
            negate: () => Long;
            neg: () => Long;
            not: () => Long;
            countLeadingZeros: () => number;
            clz: () => number;
            countTrailingZeros: () => number;
            ctz: () => number;
            notEquals: (other: string | number | Long) => boolean;
            neq: (other: string | number | Long) => boolean;
            ne: (other: string | number | Long) => boolean;
            or: (other: string | number | Long) => Long;
            shiftLeft: (numBits: number | Long) => Long;
            shl: (numBits: number | Long) => Long;
            shiftRight: (numBits: number | Long) => Long;
            shr: (numBits: number | Long) => Long;
            shiftRightUnsigned: (numBits: number | Long) => Long;
            shru: (numBits: number | Long) => Long;
            shr_u: (numBits: number | Long) => Long;
            rotateLeft: (numBits: number | Long) => Long;
            rotl: (numBits: number | Long) => Long;
            rotateRight: (numBits: number | Long) => Long;
            rotr: (numBits: number | Long) => Long;
            subtract: (subtrahend: string | number | Long) => Long;
            sub: (subtrahend: string | number | Long) => Long;
            toInt: () => number;
            toNumber: () => number;
            toBytes: (le?: boolean | undefined) => number[];
            toBytesLE: () => number[];
            toBytesBE: () => number[];
            toSigned: () => Long;
            toString: (radix?: number | undefined) => string;
            toUnsigned: () => Long;
            xor: (other: string | number | Long) => Long;
        } & { [K_1 in Exclude<keyof I["commitTimestamp"], "$type" | keyof Long>]: never; }) | undefined;
        origin?: string | undefined;
        isMigration?: boolean | undefined;
        additionalDataRef?: string | number | (Long & {
            high: number;
            low: number;
            unsigned: boolean;
            add: (addend: string | number | Long) => Long;
            and: (other: string | number | Long) => Long;
            compare: (other: string | number | Long) => number;
            comp: (other: string | number | Long) => number;
            divide: (divisor: string | number | Long) => Long;
            div: (divisor: string | number | Long) => Long;
            equals: (other: string | number | Long) => boolean;
            eq: (other: string | number | Long) => boolean;
            getHighBits: () => number;
            getHighBitsUnsigned: () => number;
            getLowBits: () => number;
            getLowBitsUnsigned: () => number;
            getNumBitsAbs: () => number;
            greaterThan: (other: string | number | Long) => boolean;
            gt: (other: string | number | Long) => boolean;
            greaterThanOrEqual: (other: string | number | Long) => boolean;
            gte: (other: string | number | Long) => boolean;
            ge: (other: string | number | Long) => boolean;
            isEven: () => boolean;
            isNegative: () => boolean;
            isOdd: () => boolean;
            isPositive: () => boolean;
            isZero: () => boolean;
            eqz: () => boolean;
            lessThan: (other: string | number | Long) => boolean;
            lt: (other: string | number | Long) => boolean;
            lessThanOrEqual: (other: string | number | Long) => boolean;
            lte: (other: string | number | Long) => boolean;
            le: (other: string | number | Long) => boolean;
            modulo: (other: string | number | Long) => Long;
            mod: (other: string | number | Long) => Long;
            rem: (other: string | number | Long) => Long;
            multiply: (multiplier: string | number | Long) => Long;
            mul: (multiplier: string | number | Long) => Long;
            negate: () => Long;
            neg: () => Long;
            not: () => Long;
            countLeadingZeros: () => number;
            clz: () => number;
            countTrailingZeros: () => number;
            ctz: () => number;
            notEquals: (other: string | number | Long) => boolean;
            neq: (other: string | number | Long) => boolean;
            ne: (other: string | number | Long) => boolean;
            or: (other: string | number | Long) => Long;
            shiftLeft: (numBits: number | Long) => Long;
            shl: (numBits: number | Long) => Long;
            shiftRight: (numBits: number | Long) => Long;
            shr: (numBits: number | Long) => Long;
            shiftRightUnsigned: (numBits: number | Long) => Long;
            shru: (numBits: number | Long) => Long;
            shr_u: (numBits: number | Long) => Long;
            rotateLeft: (numBits: number | Long) => Long;
            rotl: (numBits: number | Long) => Long;
            rotateRight: (numBits: number | Long) => Long;
            rotr: (numBits: number | Long) => Long;
            subtract: (subtrahend: string | number | Long) => Long;
            sub: (subtrahend: string | number | Long) => Long;
            toInt: () => number;
            toNumber: () => number;
            toBytes: (le?: boolean | undefined) => number[];
            toBytesLE: () => number[];
            toBytesBE: () => number[];
            toSigned: () => Long;
            toString: (radix?: number | undefined) => string;
            toUnsigned: () => Long;
            xor: (other: string | number | Long) => Long;
        } & { [K_2 in Exclude<keyof I["additionalDataRef"], "$type" | keyof Long>]: never; }) | undefined;
    } & { [K_3 in Exclude<keyof I, "$type" | "lsn" | "transactionId" | "commitTimestamp" | "origin" | "isMigration" | "additionalDataRef">]: never; }>(base?: I): SatOpBegin;
    fromPartial<I_1 extends {
        lsn?: Uint8Array | undefined;
        transactionId?: string | number | Long | undefined;
        commitTimestamp?: string | number | Long | undefined;
        origin?: string | undefined;
        isMigration?: boolean | undefined;
        additionalDataRef?: string | number | Long | undefined;
    } & {
        lsn?: Uint8Array | undefined;
        transactionId?: string | number | (Long & {
            high: number;
            low: number;
            unsigned: boolean;
            add: (addend: string | number | Long) => Long;
            and: (other: string | number | Long) => Long;
            compare: (other: string | number | Long) => number;
            comp: (other: string | number | Long) => number;
            divide: (divisor: string | number | Long) => Long;
            div: (divisor: string | number | Long) => Long;
            equals: (other: string | number | Long) => boolean;
            eq: (other: string | number | Long) => boolean;
            getHighBits: () => number;
            getHighBitsUnsigned: () => number;
            getLowBits: () => number;
            getLowBitsUnsigned: () => number;
            getNumBitsAbs: () => number;
            greaterThan: (other: string | number | Long) => boolean;
            gt: (other: string | number | Long) => boolean;
            greaterThanOrEqual: (other: string | number | Long) => boolean;
            gte: (other: string | number | Long) => boolean;
            ge: (other: string | number | Long) => boolean;
            isEven: () => boolean;
            isNegative: () => boolean;
            isOdd: () => boolean;
            isPositive: () => boolean;
            isZero: () => boolean;
            eqz: () => boolean;
            lessThan: (other: string | number | Long) => boolean;
            lt: (other: string | number | Long) => boolean;
            lessThanOrEqual: (other: string | number | Long) => boolean;
            lte: (other: string | number | Long) => boolean;
            le: (other: string | number | Long) => boolean;
            modulo: (other: string | number | Long) => Long;
            mod: (other: string | number | Long) => Long;
            rem: (other: string | number | Long) => Long;
            multiply: (multiplier: string | number | Long) => Long;
            mul: (multiplier: string | number | Long) => Long;
            negate: () => Long;
            neg: () => Long;
            not: () => Long;
            countLeadingZeros: () => number;
            clz: () => number;
            countTrailingZeros: () => number;
            ctz: () => number;
            notEquals: (other: string | number | Long) => boolean;
            neq: (other: string | number | Long) => boolean;
            ne: (other: string | number | Long) => boolean;
            or: (other: string | number | Long) => Long;
            shiftLeft: (numBits: number | Long) => Long;
            shl: (numBits: number | Long) => Long;
            shiftRight: (numBits: number | Long) => Long;
            shr: (numBits: number | Long) => Long;
            shiftRightUnsigned: (numBits: number | Long) => Long;
            shru: (numBits: number | Long) => Long;
            shr_u: (numBits: number | Long) => Long;
            rotateLeft: (numBits: number | Long) => Long;
            rotl: (numBits: number | Long) => Long;
            rotateRight: (numBits: number | Long) => Long;
            rotr: (numBits: number | Long) => Long;
            subtract: (subtrahend: string | number | Long) => Long;
            sub: (subtrahend: string | number | Long) => Long;
            toInt: () => number;
            toNumber: () => number;
            toBytes: (le?: boolean | undefined) => number[];
            toBytesLE: () => number[];
            toBytesBE: () => number[];
            toSigned: () => Long;
            toString: (radix?: number | undefined) => string;
            toUnsigned: () => Long;
            xor: (other: string | number | Long) => Long;
        } & { [K_4 in Exclude<keyof I_1["transactionId"], "$type" | keyof Long>]: never; }) | undefined;
        commitTimestamp?: string | number | (Long & {
            high: number;
            low: number;
            unsigned: boolean;
            add: (addend: string | number | Long) => Long;
            and: (other: string | number | Long) => Long;
            compare: (other: string | number | Long) => number;
            comp: (other: string | number | Long) => number;
            divide: (divisor: string | number | Long) => Long;
            div: (divisor: string | number | Long) => Long;
            equals: (other: string | number | Long) => boolean;
            eq: (other: string | number | Long) => boolean;
            getHighBits: () => number;
            getHighBitsUnsigned: () => number;
            getLowBits: () => number;
            getLowBitsUnsigned: () => number;
            getNumBitsAbs: () => number;
            greaterThan: (other: string | number | Long) => boolean;
            gt: (other: string | number | Long) => boolean;
            greaterThanOrEqual: (other: string | number | Long) => boolean;
            gte: (other: string | number | Long) => boolean;
            ge: (other: string | number | Long) => boolean;
            isEven: () => boolean;
            isNegative: () => boolean;
            isOdd: () => boolean;
            isPositive: () => boolean;
            isZero: () => boolean;
            eqz: () => boolean;
            lessThan: (other: string | number | Long) => boolean;
            lt: (other: string | number | Long) => boolean;
            lessThanOrEqual: (other: string | number | Long) => boolean;
            lte: (other: string | number | Long) => boolean;
            le: (other: string | number | Long) => boolean;
            modulo: (other: string | number | Long) => Long;
            mod: (other: string | number | Long) => Long;
            rem: (other: string | number | Long) => Long;
            multiply: (multiplier: string | number | Long) => Long;
            mul: (multiplier: string | number | Long) => Long;
            negate: () => Long;
            neg: () => Long;
            not: () => Long;
            countLeadingZeros: () => number;
            clz: () => number;
            countTrailingZeros: () => number;
            ctz: () => number;
            notEquals: (other: string | number | Long) => boolean;
            neq: (other: string | number | Long) => boolean;
            ne: (other: string | number | Long) => boolean;
            or: (other: string | number | Long) => Long;
            shiftLeft: (numBits: number | Long) => Long;
            shl: (numBits: number | Long) => Long;
            shiftRight: (numBits: number | Long) => Long;
            shr: (numBits: number | Long) => Long;
            shiftRightUnsigned: (numBits: number | Long) => Long;
            shru: (numBits: number | Long) => Long;
            shr_u: (numBits: number | Long) => Long;
            rotateLeft: (numBits: number | Long) => Long;
            rotl: (numBits: number | Long) => Long;
            rotateRight: (numBits: number | Long) => Long;
            rotr: (numBits: number | Long) => Long;
            subtract: (subtrahend: string | number | Long) => Long;
            sub: (subtrahend: string | number | Long) => Long;
            toInt: () => number;
            toNumber: () => number;
            toBytes: (le?: boolean | undefined) => number[];
            toBytesLE: () => number[];
            toBytesBE: () => number[];
            toSigned: () => Long;
            toString: (radix?: number | undefined) => string;
            toUnsigned: () => Long;
            xor: (other: string | number | Long) => Long;
        } & { [K_5 in Exclude<keyof I_1["commitTimestamp"], "$type" | keyof Long>]: never; }) | undefined;
        origin?: string | undefined;
        isMigration?: boolean | undefined;
        additionalDataRef?: string | number | (Long & {
            high: number;
            low: number;
            unsigned: boolean;
            add: (addend: string | number | Long) => Long;
            and: (other: string | number | Long) => Long;
            compare: (other: string | number | Long) => number;
            comp: (other: string | number | Long) => number;
            divide: (divisor: string | number | Long) => Long;
            div: (divisor: string | number | Long) => Long;
            equals: (other: string | number | Long) => boolean;
            eq: (other: string | number | Long) => boolean;
            getHighBits: () => number;
            getHighBitsUnsigned: () => number;
            getLowBits: () => number;
            getLowBitsUnsigned: () => number;
            getNumBitsAbs: () => number;
            greaterThan: (other: string | number | Long) => boolean;
            gt: (other: string | number | Long) => boolean;
            greaterThanOrEqual: (other: string | number | Long) => boolean;
            gte: (other: string | number | Long) => boolean;
            ge: (other: string | number | Long) => boolean;
            isEven: () => boolean;
            isNegative: () => boolean;
            isOdd: () => boolean;
            isPositive: () => boolean;
            isZero: () => boolean;
            eqz: () => boolean;
            lessThan: (other: string | number | Long) => boolean;
            lt: (other: string | number | Long) => boolean;
            lessThanOrEqual: (other: string | number | Long) => boolean;
            lte: (other: string | number | Long) => boolean;
            le: (other: string | number | Long) => boolean;
            modulo: (other: string | number | Long) => Long;
            mod: (other: string | number | Long) => Long;
            rem: (other: string | number | Long) => Long;
            multiply: (multiplier: string | number | Long) => Long;
            mul: (multiplier: string | number | Long) => Long;
            negate: () => Long;
            neg: () => Long;
            not: () => Long;
            countLeadingZeros: () => number;
            clz: () => number;
            countTrailingZeros: () => number;
            ctz: () => number;
            notEquals: (other: string | number | Long) => boolean;
            neq: (other: string | number | Long) => boolean;
            ne: (other: string | number | Long) => boolean;
            or: (other: string | number | Long) => Long;
            shiftLeft: (numBits: number | Long) => Long;
            shl: (numBits: number | Long) => Long;
            shiftRight: (numBits: number | Long) => Long;
            shr: (numBits: number | Long) => Long;
            shiftRightUnsigned: (numBits: number | Long) => Long;
            shru: (numBits: number | Long) => Long;
            shr_u: (numBits: number | Long) => Long;
            rotateLeft: (numBits: number | Long) => Long;
            rotl: (numBits: number | Long) => Long;
            rotateRight: (numBits: number | Long) => Long;
            rotr: (numBits: number | Long) => Long;
            subtract: (subtrahend: string | number | Long) => Long;
            sub: (subtrahend: string | number | Long) => Long;
            toInt: () => number;
            toNumber: () => number;
            toBytes: (le?: boolean | undefined) => number[];
            toBytesLE: () => number[];
            toBytesBE: () => number[];
            toSigned: () => Long;
            toString: (radix?: number | undefined) => string;
            toUnsigned: () => Long;
            xor: (other: string | number | Long) => Long;
        } & { [K_6 in Exclude<keyof I_1["additionalDataRef"], "$type" | keyof Long>]: never; }) | undefined;
    } & { [K_7 in Exclude<keyof I_1, "$type" | "lsn" | "transactionId" | "commitTimestamp" | "origin" | "isMigration" | "additionalDataRef">]: never; }>(object: I_1): SatOpBegin;
};
export declare const SatOpAdditionalBegin: {
    $type: "Electric.Satellite.SatOpAdditionalBegin";
    encode(message: SatOpAdditionalBegin, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): SatOpAdditionalBegin;
    create<I extends {
        ref?: string | number | Long | undefined;
    } & {
        ref?: string | number | (Long & {
            high: number;
            low: number;
            unsigned: boolean;
            add: (addend: string | number | Long) => Long;
            and: (other: string | number | Long) => Long;
            compare: (other: string | number | Long) => number;
            comp: (other: string | number | Long) => number;
            divide: (divisor: string | number | Long) => Long;
            div: (divisor: string | number | Long) => Long;
            equals: (other: string | number | Long) => boolean;
            eq: (other: string | number | Long) => boolean;
            getHighBits: () => number;
            getHighBitsUnsigned: () => number;
            getLowBits: () => number;
            getLowBitsUnsigned: () => number;
            getNumBitsAbs: () => number;
            greaterThan: (other: string | number | Long) => boolean;
            gt: (other: string | number | Long) => boolean;
            greaterThanOrEqual: (other: string | number | Long) => boolean;
            gte: (other: string | number | Long) => boolean;
            ge: (other: string | number | Long) => boolean;
            isEven: () => boolean;
            isNegative: () => boolean;
            isOdd: () => boolean;
            isPositive: () => boolean;
            isZero: () => boolean;
            eqz: () => boolean;
            lessThan: (other: string | number | Long) => boolean;
            lt: (other: string | number | Long) => boolean;
            lessThanOrEqual: (other: string | number | Long) => boolean;
            lte: (other: string | number | Long) => boolean;
            le: (other: string | number | Long) => boolean;
            modulo: (other: string | number | Long) => Long;
            mod: (other: string | number | Long) => Long;
            rem: (other: string | number | Long) => Long;
            multiply: (multiplier: string | number | Long) => Long;
            mul: (multiplier: string | number | Long) => Long;
            negate: () => Long;
            neg: () => Long;
            not: () => Long;
            countLeadingZeros: () => number;
            clz: () => number;
            countTrailingZeros: () => number;
            ctz: () => number;
            notEquals: (other: string | number | Long) => boolean;
            neq: (other: string | number | Long) => boolean;
            ne: (other: string | number | Long) => boolean;
            or: (other: string | number | Long) => Long;
            shiftLeft: (numBits: number | Long) => Long;
            shl: (numBits: number | Long) => Long;
            shiftRight: (numBits: number | Long) => Long;
            shr: (numBits: number | Long) => Long;
            shiftRightUnsigned: (numBits: number | Long) => Long;
            shru: (numBits: number | Long) => Long;
            shr_u: (numBits: number | Long) => Long;
            rotateLeft: (numBits: number | Long) => Long;
            rotl: (numBits: number | Long) => Long;
            rotateRight: (numBits: number | Long) => Long;
            rotr: (numBits: number | Long) => Long;
            subtract: (subtrahend: string | number | Long) => Long;
            sub: (subtrahend: string | number | Long) => Long;
            toInt: () => number;
            toNumber: () => number;
            toBytes: (le?: boolean | undefined) => number[];
            toBytesLE: () => number[];
            toBytesBE: () => number[];
            toSigned: () => Long;
            toString: (radix?: number | undefined) => string;
            toUnsigned: () => Long;
            xor: (other: string | number | Long) => Long;
        } & { [K in Exclude<keyof I["ref"], "$type" | keyof Long>]: never; }) | undefined;
    } & { [K_1 in Exclude<keyof I, "$type" | "ref">]: never; }>(base?: I): SatOpAdditionalBegin;
    fromPartial<I_1 extends {
        ref?: string | number | Long | undefined;
    } & {
        ref?: string | number | (Long & {
            high: number;
            low: number;
            unsigned: boolean;
            add: (addend: string | number | Long) => Long;
            and: (other: string | number | Long) => Long;
            compare: (other: string | number | Long) => number;
            comp: (other: string | number | Long) => number;
            divide: (divisor: string | number | Long) => Long;
            div: (divisor: string | number | Long) => Long;
            equals: (other: string | number | Long) => boolean;
            eq: (other: string | number | Long) => boolean;
            getHighBits: () => number;
            getHighBitsUnsigned: () => number;
            getLowBits: () => number;
            getLowBitsUnsigned: () => number;
            getNumBitsAbs: () => number;
            greaterThan: (other: string | number | Long) => boolean;
            gt: (other: string | number | Long) => boolean;
            greaterThanOrEqual: (other: string | number | Long) => boolean;
            gte: (other: string | number | Long) => boolean;
            ge: (other: string | number | Long) => boolean;
            isEven: () => boolean;
            isNegative: () => boolean;
            isOdd: () => boolean;
            isPositive: () => boolean;
            isZero: () => boolean;
            eqz: () => boolean;
            lessThan: (other: string | number | Long) => boolean;
            lt: (other: string | number | Long) => boolean;
            lessThanOrEqual: (other: string | number | Long) => boolean;
            lte: (other: string | number | Long) => boolean;
            le: (other: string | number | Long) => boolean;
            modulo: (other: string | number | Long) => Long;
            mod: (other: string | number | Long) => Long;
            rem: (other: string | number | Long) => Long;
            multiply: (multiplier: string | number | Long) => Long;
            mul: (multiplier: string | number | Long) => Long;
            negate: () => Long;
            neg: () => Long;
            not: () => Long;
            countLeadingZeros: () => number;
            clz: () => number;
            countTrailingZeros: () => number;
            ctz: () => number;
            notEquals: (other: string | number | Long) => boolean;
            neq: (other: string | number | Long) => boolean;
            ne: (other: string | number | Long) => boolean;
            or: (other: string | number | Long) => Long;
            shiftLeft: (numBits: number | Long) => Long;
            shl: (numBits: number | Long) => Long;
            shiftRight: (numBits: number | Long) => Long;
            shr: (numBits: number | Long) => Long;
            shiftRightUnsigned: (numBits: number | Long) => Long;
            shru: (numBits: number | Long) => Long;
            shr_u: (numBits: number | Long) => Long;
            rotateLeft: (numBits: number | Long) => Long;
            rotl: (numBits: number | Long) => Long;
            rotateRight: (numBits: number | Long) => Long;
            rotr: (numBits: number | Long) => Long;
            subtract: (subtrahend: string | number | Long) => Long;
            sub: (subtrahend: string | number | Long) => Long;
            toInt: () => number;
            toNumber: () => number;
            toBytes: (le?: boolean | undefined) => number[];
            toBytesLE: () => number[];
            toBytesBE: () => number[];
            toSigned: () => Long;
            toString: (radix?: number | undefined) => string;
            toUnsigned: () => Long;
            xor: (other: string | number | Long) => Long;
        } & { [K_2 in Exclude<keyof I_1["ref"], "$type" | keyof Long>]: never; }) | undefined;
    } & { [K_3 in Exclude<keyof I_1, "$type" | "ref">]: never; }>(object: I_1): SatOpAdditionalBegin;
};
export declare const SatOpCommit: {
    $type: "Electric.Satellite.SatOpCommit";
    encode(message: SatOpCommit, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): SatOpCommit;
    create<I extends {
        lsn?: Uint8Array | undefined;
        transactionId?: string | number | Long | undefined;
        commitTimestamp?: string | number | Long | undefined;
        additionalDataRef?: string | number | Long | undefined;
    } & {
        lsn?: Uint8Array | undefined;
        transactionId?: string | number | (Long & {
            high: number;
            low: number;
            unsigned: boolean;
            add: (addend: string | number | Long) => Long;
            and: (other: string | number | Long) => Long;
            compare: (other: string | number | Long) => number;
            comp: (other: string | number | Long) => number;
            divide: (divisor: string | number | Long) => Long;
            div: (divisor: string | number | Long) => Long;
            equals: (other: string | number | Long) => boolean;
            eq: (other: string | number | Long) => boolean;
            getHighBits: () => number;
            getHighBitsUnsigned: () => number;
            getLowBits: () => number;
            getLowBitsUnsigned: () => number;
            getNumBitsAbs: () => number;
            greaterThan: (other: string | number | Long) => boolean;
            gt: (other: string | number | Long) => boolean;
            greaterThanOrEqual: (other: string | number | Long) => boolean;
            gte: (other: string | number | Long) => boolean;
            ge: (other: string | number | Long) => boolean;
            isEven: () => boolean;
            isNegative: () => boolean;
            isOdd: () => boolean;
            isPositive: () => boolean;
            isZero: () => boolean;
            eqz: () => boolean;
            lessThan: (other: string | number | Long) => boolean;
            lt: (other: string | number | Long) => boolean;
            lessThanOrEqual: (other: string | number | Long) => boolean;
            lte: (other: string | number | Long) => boolean;
            le: (other: string | number | Long) => boolean;
            modulo: (other: string | number | Long) => Long;
            mod: (other: string | number | Long) => Long;
            rem: (other: string | number | Long) => Long;
            multiply: (multiplier: string | number | Long) => Long;
            mul: (multiplier: string | number | Long) => Long;
            negate: () => Long;
            neg: () => Long;
            not: () => Long;
            countLeadingZeros: () => number;
            clz: () => number;
            countTrailingZeros: () => number;
            ctz: () => number;
            notEquals: (other: string | number | Long) => boolean;
            neq: (other: string | number | Long) => boolean;
            ne: (other: string | number | Long) => boolean;
            or: (other: string | number | Long) => Long;
            shiftLeft: (numBits: number | Long) => Long;
            shl: (numBits: number | Long) => Long;
            shiftRight: (numBits: number | Long) => Long;
            shr: (numBits: number | Long) => Long;
            shiftRightUnsigned: (numBits: number | Long) => Long;
            shru: (numBits: number | Long) => Long;
            shr_u: (numBits: number | Long) => Long;
            rotateLeft: (numBits: number | Long) => Long;
            rotl: (numBits: number | Long) => Long;
            rotateRight: (numBits: number | Long) => Long;
            rotr: (numBits: number | Long) => Long;
            subtract: (subtrahend: string | number | Long) => Long;
            sub: (subtrahend: string | number | Long) => Long;
            toInt: () => number;
            toNumber: () => number;
            toBytes: (le?: boolean | undefined) => number[];
            toBytesLE: () => number[];
            toBytesBE: () => number[];
            toSigned: () => Long;
            toString: (radix?: number | undefined) => string;
            toUnsigned: () => Long;
            xor: (other: string | number | Long) => Long;
        } & { [K in Exclude<keyof I["transactionId"], "$type" | keyof Long>]: never; }) | undefined;
        commitTimestamp?: string | number | (Long & {
            high: number;
            low: number;
            unsigned: boolean;
            add: (addend: string | number | Long) => Long;
            and: (other: string | number | Long) => Long;
            compare: (other: string | number | Long) => number;
            comp: (other: string | number | Long) => number;
            divide: (divisor: string | number | Long) => Long;
            div: (divisor: string | number | Long) => Long;
            equals: (other: string | number | Long) => boolean;
            eq: (other: string | number | Long) => boolean;
            getHighBits: () => number;
            getHighBitsUnsigned: () => number;
            getLowBits: () => number;
            getLowBitsUnsigned: () => number;
            getNumBitsAbs: () => number;
            greaterThan: (other: string | number | Long) => boolean;
            gt: (other: string | number | Long) => boolean;
            greaterThanOrEqual: (other: string | number | Long) => boolean;
            gte: (other: string | number | Long) => boolean;
            ge: (other: string | number | Long) => boolean;
            isEven: () => boolean;
            isNegative: () => boolean;
            isOdd: () => boolean;
            isPositive: () => boolean;
            isZero: () => boolean;
            eqz: () => boolean;
            lessThan: (other: string | number | Long) => boolean;
            lt: (other: string | number | Long) => boolean;
            lessThanOrEqual: (other: string | number | Long) => boolean;
            lte: (other: string | number | Long) => boolean;
            le: (other: string | number | Long) => boolean;
            modulo: (other: string | number | Long) => Long;
            mod: (other: string | number | Long) => Long;
            rem: (other: string | number | Long) => Long;
            multiply: (multiplier: string | number | Long) => Long;
            mul: (multiplier: string | number | Long) => Long;
            negate: () => Long;
            neg: () => Long;
            not: () => Long;
            countLeadingZeros: () => number;
            clz: () => number;
            countTrailingZeros: () => number;
            ctz: () => number;
            notEquals: (other: string | number | Long) => boolean;
            neq: (other: string | number | Long) => boolean;
            ne: (other: string | number | Long) => boolean;
            or: (other: string | number | Long) => Long;
            shiftLeft: (numBits: number | Long) => Long;
            shl: (numBits: number | Long) => Long;
            shiftRight: (numBits: number | Long) => Long;
            shr: (numBits: number | Long) => Long;
            shiftRightUnsigned: (numBits: number | Long) => Long;
            shru: (numBits: number | Long) => Long;
            shr_u: (numBits: number | Long) => Long;
            rotateLeft: (numBits: number | Long) => Long;
            rotl: (numBits: number | Long) => Long;
            rotateRight: (numBits: number | Long) => Long;
            rotr: (numBits: number | Long) => Long;
            subtract: (subtrahend: string | number | Long) => Long;
            sub: (subtrahend: string | number | Long) => Long;
            toInt: () => number;
            toNumber: () => number;
            toBytes: (le?: boolean | undefined) => number[];
            toBytesLE: () => number[];
            toBytesBE: () => number[];
            toSigned: () => Long;
            toString: (radix?: number | undefined) => string;
            toUnsigned: () => Long;
            xor: (other: string | number | Long) => Long;
        } & { [K_1 in Exclude<keyof I["commitTimestamp"], "$type" | keyof Long>]: never; }) | undefined;
        additionalDataRef?: string | number | (Long & {
            high: number;
            low: number;
            unsigned: boolean;
            add: (addend: string | number | Long) => Long;
            and: (other: string | number | Long) => Long;
            compare: (other: string | number | Long) => number;
            comp: (other: string | number | Long) => number;
            divide: (divisor: string | number | Long) => Long;
            div: (divisor: string | number | Long) => Long;
            equals: (other: string | number | Long) => boolean;
            eq: (other: string | number | Long) => boolean;
            getHighBits: () => number;
            getHighBitsUnsigned: () => number;
            getLowBits: () => number;
            getLowBitsUnsigned: () => number;
            getNumBitsAbs: () => number;
            greaterThan: (other: string | number | Long) => boolean;
            gt: (other: string | number | Long) => boolean;
            greaterThanOrEqual: (other: string | number | Long) => boolean;
            gte: (other: string | number | Long) => boolean;
            ge: (other: string | number | Long) => boolean;
            isEven: () => boolean;
            isNegative: () => boolean;
            isOdd: () => boolean;
            isPositive: () => boolean;
            isZero: () => boolean;
            eqz: () => boolean;
            lessThan: (other: string | number | Long) => boolean;
            lt: (other: string | number | Long) => boolean;
            lessThanOrEqual: (other: string | number | Long) => boolean;
            lte: (other: string | number | Long) => boolean;
            le: (other: string | number | Long) => boolean;
            modulo: (other: string | number | Long) => Long;
            mod: (other: string | number | Long) => Long;
            rem: (other: string | number | Long) => Long;
            multiply: (multiplier: string | number | Long) => Long;
            mul: (multiplier: string | number | Long) => Long;
            negate: () => Long;
            neg: () => Long;
            not: () => Long;
            countLeadingZeros: () => number;
            clz: () => number;
            countTrailingZeros: () => number;
            ctz: () => number;
            notEquals: (other: string | number | Long) => boolean;
            neq: (other: string | number | Long) => boolean;
            ne: (other: string | number | Long) => boolean;
            or: (other: string | number | Long) => Long;
            shiftLeft: (numBits: number | Long) => Long;
            shl: (numBits: number | Long) => Long;
            shiftRight: (numBits: number | Long) => Long;
            shr: (numBits: number | Long) => Long;
            shiftRightUnsigned: (numBits: number | Long) => Long;
            shru: (numBits: number | Long) => Long;
            shr_u: (numBits: number | Long) => Long;
            rotateLeft: (numBits: number | Long) => Long;
            rotl: (numBits: number | Long) => Long;
            rotateRight: (numBits: number | Long) => Long;
            rotr: (numBits: number | Long) => Long;
            subtract: (subtrahend: string | number | Long) => Long;
            sub: (subtrahend: string | number | Long) => Long;
            toInt: () => number;
            toNumber: () => number;
            toBytes: (le?: boolean | undefined) => number[];
            toBytesLE: () => number[];
            toBytesBE: () => number[];
            toSigned: () => Long;
            toString: (radix?: number | undefined) => string;
            toUnsigned: () => Long;
            xor: (other: string | number | Long) => Long;
        } & { [K_2 in Exclude<keyof I["additionalDataRef"], "$type" | keyof Long>]: never; }) | undefined;
    } & { [K_3 in Exclude<keyof I, "$type" | "lsn" | "transactionId" | "commitTimestamp" | "additionalDataRef">]: never; }>(base?: I): SatOpCommit;
    fromPartial<I_1 extends {
        lsn?: Uint8Array | undefined;
        transactionId?: string | number | Long | undefined;
        commitTimestamp?: string | number | Long | undefined;
        additionalDataRef?: string | number | Long | undefined;
    } & {
        lsn?: Uint8Array | undefined;
        transactionId?: string | number | (Long & {
            high: number;
            low: number;
            unsigned: boolean;
            add: (addend: string | number | Long) => Long;
            and: (other: string | number | Long) => Long;
            compare: (other: string | number | Long) => number;
            comp: (other: string | number | Long) => number;
            divide: (divisor: string | number | Long) => Long;
            div: (divisor: string | number | Long) => Long;
            equals: (other: string | number | Long) => boolean;
            eq: (other: string | number | Long) => boolean;
            getHighBits: () => number;
            getHighBitsUnsigned: () => number;
            getLowBits: () => number;
            getLowBitsUnsigned: () => number;
            getNumBitsAbs: () => number;
            greaterThan: (other: string | number | Long) => boolean;
            gt: (other: string | number | Long) => boolean;
            greaterThanOrEqual: (other: string | number | Long) => boolean;
            gte: (other: string | number | Long) => boolean;
            ge: (other: string | number | Long) => boolean;
            isEven: () => boolean;
            isNegative: () => boolean;
            isOdd: () => boolean;
            isPositive: () => boolean;
            isZero: () => boolean;
            eqz: () => boolean;
            lessThan: (other: string | number | Long) => boolean;
            lt: (other: string | number | Long) => boolean;
            lessThanOrEqual: (other: string | number | Long) => boolean;
            lte: (other: string | number | Long) => boolean;
            le: (other: string | number | Long) => boolean;
            modulo: (other: string | number | Long) => Long;
            mod: (other: string | number | Long) => Long;
            rem: (other: string | number | Long) => Long;
            multiply: (multiplier: string | number | Long) => Long;
            mul: (multiplier: string | number | Long) => Long;
            negate: () => Long;
            neg: () => Long;
            not: () => Long;
            countLeadingZeros: () => number;
            clz: () => number;
            countTrailingZeros: () => number;
            ctz: () => number;
            notEquals: (other: string | number | Long) => boolean;
            neq: (other: string | number | Long) => boolean;
            ne: (other: string | number | Long) => boolean;
            or: (other: string | number | Long) => Long;
            shiftLeft: (numBits: number | Long) => Long;
            shl: (numBits: number | Long) => Long;
            shiftRight: (numBits: number | Long) => Long;
            shr: (numBits: number | Long) => Long;
            shiftRightUnsigned: (numBits: number | Long) => Long;
            shru: (numBits: number | Long) => Long;
            shr_u: (numBits: number | Long) => Long;
            rotateLeft: (numBits: number | Long) => Long;
            rotl: (numBits: number | Long) => Long;
            rotateRight: (numBits: number | Long) => Long;
            rotr: (numBits: number | Long) => Long;
            subtract: (subtrahend: string | number | Long) => Long;
            sub: (subtrahend: string | number | Long) => Long;
            toInt: () => number;
            toNumber: () => number;
            toBytes: (le?: boolean | undefined) => number[];
            toBytesLE: () => number[];
            toBytesBE: () => number[];
            toSigned: () => Long;
            toString: (radix?: number | undefined) => string;
            toUnsigned: () => Long;
            xor: (other: string | number | Long) => Long;
        } & { [K_4 in Exclude<keyof I_1["transactionId"], "$type" | keyof Long>]: never; }) | undefined;
        commitTimestamp?: string | number | (Long & {
            high: number;
            low: number;
            unsigned: boolean;
            add: (addend: string | number | Long) => Long;
            and: (other: string | number | Long) => Long;
            compare: (other: string | number | Long) => number;
            comp: (other: string | number | Long) => number;
            divide: (divisor: string | number | Long) => Long;
            div: (divisor: string | number | Long) => Long;
            equals: (other: string | number | Long) => boolean;
            eq: (other: string | number | Long) => boolean;
            getHighBits: () => number;
            getHighBitsUnsigned: () => number;
            getLowBits: () => number;
            getLowBitsUnsigned: () => number;
            getNumBitsAbs: () => number;
            greaterThan: (other: string | number | Long) => boolean;
            gt: (other: string | number | Long) => boolean;
            greaterThanOrEqual: (other: string | number | Long) => boolean;
            gte: (other: string | number | Long) => boolean;
            ge: (other: string | number | Long) => boolean;
            isEven: () => boolean;
            isNegative: () => boolean;
            isOdd: () => boolean;
            isPositive: () => boolean;
            isZero: () => boolean;
            eqz: () => boolean;
            lessThan: (other: string | number | Long) => boolean;
            lt: (other: string | number | Long) => boolean;
            lessThanOrEqual: (other: string | number | Long) => boolean;
            lte: (other: string | number | Long) => boolean;
            le: (other: string | number | Long) => boolean;
            modulo: (other: string | number | Long) => Long;
            mod: (other: string | number | Long) => Long;
            rem: (other: string | number | Long) => Long;
            multiply: (multiplier: string | number | Long) => Long;
            mul: (multiplier: string | number | Long) => Long;
            negate: () => Long;
            neg: () => Long;
            not: () => Long;
            countLeadingZeros: () => number;
            clz: () => number;
            countTrailingZeros: () => number;
            ctz: () => number;
            notEquals: (other: string | number | Long) => boolean;
            neq: (other: string | number | Long) => boolean;
            ne: (other: string | number | Long) => boolean;
            or: (other: string | number | Long) => Long;
            shiftLeft: (numBits: number | Long) => Long;
            shl: (numBits: number | Long) => Long;
            shiftRight: (numBits: number | Long) => Long;
            shr: (numBits: number | Long) => Long;
            shiftRightUnsigned: (numBits: number | Long) => Long;
            shru: (numBits: number | Long) => Long;
            shr_u: (numBits: number | Long) => Long;
            rotateLeft: (numBits: number | Long) => Long;
            rotl: (numBits: number | Long) => Long;
            rotateRight: (numBits: number | Long) => Long;
            rotr: (numBits: number | Long) => Long;
            subtract: (subtrahend: string | number | Long) => Long;
            sub: (subtrahend: string | number | Long) => Long;
            toInt: () => number;
            toNumber: () => number;
            toBytes: (le?: boolean | undefined) => number[];
            toBytesLE: () => number[];
            toBytesBE: () => number[];
            toSigned: () => Long;
            toString: (radix?: number | undefined) => string;
            toUnsigned: () => Long;
            xor: (other: string | number | Long) => Long;
        } & { [K_5 in Exclude<keyof I_1["commitTimestamp"], "$type" | keyof Long>]: never; }) | undefined;
        additionalDataRef?: string | number | (Long & {
            high: number;
            low: number;
            unsigned: boolean;
            add: (addend: string | number | Long) => Long;
            and: (other: string | number | Long) => Long;
            compare: (other: string | number | Long) => number;
            comp: (other: string | number | Long) => number;
            divide: (divisor: string | number | Long) => Long;
            div: (divisor: string | number | Long) => Long;
            equals: (other: string | number | Long) => boolean;
            eq: (other: string | number | Long) => boolean;
            getHighBits: () => number;
            getHighBitsUnsigned: () => number;
            getLowBits: () => number;
            getLowBitsUnsigned: () => number;
            getNumBitsAbs: () => number;
            greaterThan: (other: string | number | Long) => boolean;
            gt: (other: string | number | Long) => boolean;
            greaterThanOrEqual: (other: string | number | Long) => boolean;
            gte: (other: string | number | Long) => boolean;
            ge: (other: string | number | Long) => boolean;
            isEven: () => boolean;
            isNegative: () => boolean;
            isOdd: () => boolean;
            isPositive: () => boolean;
            isZero: () => boolean;
            eqz: () => boolean;
            lessThan: (other: string | number | Long) => boolean;
            lt: (other: string | number | Long) => boolean;
            lessThanOrEqual: (other: string | number | Long) => boolean;
            lte: (other: string | number | Long) => boolean;
            le: (other: string | number | Long) => boolean;
            modulo: (other: string | number | Long) => Long;
            mod: (other: string | number | Long) => Long;
            rem: (other: string | number | Long) => Long;
            multiply: (multiplier: string | number | Long) => Long;
            mul: (multiplier: string | number | Long) => Long;
            negate: () => Long;
            neg: () => Long;
            not: () => Long;
            countLeadingZeros: () => number;
            clz: () => number;
            countTrailingZeros: () => number;
            ctz: () => number;
            notEquals: (other: string | number | Long) => boolean;
            neq: (other: string | number | Long) => boolean;
            ne: (other: string | number | Long) => boolean;
            or: (other: string | number | Long) => Long;
            shiftLeft: (numBits: number | Long) => Long;
            shl: (numBits: number | Long) => Long;
            shiftRight: (numBits: number | Long) => Long;
            shr: (numBits: number | Long) => Long;
            shiftRightUnsigned: (numBits: number | Long) => Long;
            shru: (numBits: number | Long) => Long;
            shr_u: (numBits: number | Long) => Long;
            rotateLeft: (numBits: number | Long) => Long;
            rotl: (numBits: number | Long) => Long;
            rotateRight: (numBits: number | Long) => Long;
            rotr: (numBits: number | Long) => Long;
            subtract: (subtrahend: string | number | Long) => Long;
            sub: (subtrahend: string | number | Long) => Long;
            toInt: () => number;
            toNumber: () => number;
            toBytes: (le?: boolean | undefined) => number[];
            toBytesLE: () => number[];
            toBytesBE: () => number[];
            toSigned: () => Long;
            toString: (radix?: number | undefined) => string;
            toUnsigned: () => Long;
            xor: (other: string | number | Long) => Long;
        } & { [K_6 in Exclude<keyof I_1["additionalDataRef"], "$type" | keyof Long>]: never; }) | undefined;
    } & { [K_7 in Exclude<keyof I_1, "$type" | "lsn" | "transactionId" | "commitTimestamp" | "additionalDataRef">]: never; }>(object: I_1): SatOpCommit;
};
export declare const SatOpAdditionalCommit: {
    $type: "Electric.Satellite.SatOpAdditionalCommit";
    encode(message: SatOpAdditionalCommit, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): SatOpAdditionalCommit;
    create<I extends {
        ref?: string | number | Long | undefined;
    } & {
        ref?: string | number | (Long & {
            high: number;
            low: number;
            unsigned: boolean;
            add: (addend: string | number | Long) => Long;
            and: (other: string | number | Long) => Long;
            compare: (other: string | number | Long) => number;
            comp: (other: string | number | Long) => number;
            divide: (divisor: string | number | Long) => Long;
            div: (divisor: string | number | Long) => Long;
            equals: (other: string | number | Long) => boolean;
            eq: (other: string | number | Long) => boolean;
            getHighBits: () => number;
            getHighBitsUnsigned: () => number;
            getLowBits: () => number;
            getLowBitsUnsigned: () => number;
            getNumBitsAbs: () => number;
            greaterThan: (other: string | number | Long) => boolean;
            gt: (other: string | number | Long) => boolean;
            greaterThanOrEqual: (other: string | number | Long) => boolean;
            gte: (other: string | number | Long) => boolean;
            ge: (other: string | number | Long) => boolean;
            isEven: () => boolean;
            isNegative: () => boolean;
            isOdd: () => boolean;
            isPositive: () => boolean;
            isZero: () => boolean;
            eqz: () => boolean;
            lessThan: (other: string | number | Long) => boolean;
            lt: (other: string | number | Long) => boolean;
            lessThanOrEqual: (other: string | number | Long) => boolean;
            lte: (other: string | number | Long) => boolean;
            le: (other: string | number | Long) => boolean;
            modulo: (other: string | number | Long) => Long;
            mod: (other: string | number | Long) => Long;
            rem: (other: string | number | Long) => Long;
            multiply: (multiplier: string | number | Long) => Long;
            mul: (multiplier: string | number | Long) => Long;
            negate: () => Long;
            neg: () => Long;
            not: () => Long;
            countLeadingZeros: () => number;
            clz: () => number;
            countTrailingZeros: () => number;
            ctz: () => number;
            notEquals: (other: string | number | Long) => boolean;
            neq: (other: string | number | Long) => boolean;
            ne: (other: string | number | Long) => boolean;
            or: (other: string | number | Long) => Long;
            shiftLeft: (numBits: number | Long) => Long;
            shl: (numBits: number | Long) => Long;
            shiftRight: (numBits: number | Long) => Long;
            shr: (numBits: number | Long) => Long;
            shiftRightUnsigned: (numBits: number | Long) => Long;
            shru: (numBits: number | Long) => Long;
            shr_u: (numBits: number | Long) => Long;
            rotateLeft: (numBits: number | Long) => Long;
            rotl: (numBits: number | Long) => Long;
            rotateRight: (numBits: number | Long) => Long;
            rotr: (numBits: number | Long) => Long;
            subtract: (subtrahend: string | number | Long) => Long;
            sub: (subtrahend: string | number | Long) => Long;
            toInt: () => number;
            toNumber: () => number;
            toBytes: (le?: boolean | undefined) => number[];
            toBytesLE: () => number[];
            toBytesBE: () => number[];
            toSigned: () => Long;
            toString: (radix?: number | undefined) => string;
            toUnsigned: () => Long;
            xor: (other: string | number | Long) => Long;
        } & { [K in Exclude<keyof I["ref"], "$type" | keyof Long>]: never; }) | undefined;
    } & { [K_1 in Exclude<keyof I, "$type" | "ref">]: never; }>(base?: I): SatOpAdditionalCommit;
    fromPartial<I_1 extends {
        ref?: string | number | Long | undefined;
    } & {
        ref?: string | number | (Long & {
            high: number;
            low: number;
            unsigned: boolean;
            add: (addend: string | number | Long) => Long;
            and: (other: string | number | Long) => Long;
            compare: (other: string | number | Long) => number;
            comp: (other: string | number | Long) => number;
            divide: (divisor: string | number | Long) => Long;
            div: (divisor: string | number | Long) => Long;
            equals: (other: string | number | Long) => boolean;
            eq: (other: string | number | Long) => boolean;
            getHighBits: () => number;
            getHighBitsUnsigned: () => number;
            getLowBits: () => number;
            getLowBitsUnsigned: () => number;
            getNumBitsAbs: () => number;
            greaterThan: (other: string | number | Long) => boolean;
            gt: (other: string | number | Long) => boolean;
            greaterThanOrEqual: (other: string | number | Long) => boolean;
            gte: (other: string | number | Long) => boolean;
            ge: (other: string | number | Long) => boolean;
            isEven: () => boolean;
            isNegative: () => boolean;
            isOdd: () => boolean;
            isPositive: () => boolean;
            isZero: () => boolean;
            eqz: () => boolean;
            lessThan: (other: string | number | Long) => boolean;
            lt: (other: string | number | Long) => boolean;
            lessThanOrEqual: (other: string | number | Long) => boolean;
            lte: (other: string | number | Long) => boolean;
            le: (other: string | number | Long) => boolean;
            modulo: (other: string | number | Long) => Long;
            mod: (other: string | number | Long) => Long;
            rem: (other: string | number | Long) => Long;
            multiply: (multiplier: string | number | Long) => Long;
            mul: (multiplier: string | number | Long) => Long;
            negate: () => Long;
            neg: () => Long;
            not: () => Long;
            countLeadingZeros: () => number;
            clz: () => number;
            countTrailingZeros: () => number;
            ctz: () => number;
            notEquals: (other: string | number | Long) => boolean;
            neq: (other: string | number | Long) => boolean;
            ne: (other: string | number | Long) => boolean;
            or: (other: string | number | Long) => Long;
            shiftLeft: (numBits: number | Long) => Long;
            shl: (numBits: number | Long) => Long;
            shiftRight: (numBits: number | Long) => Long;
            shr: (numBits: number | Long) => Long;
            shiftRightUnsigned: (numBits: number | Long) => Long;
            shru: (numBits: number | Long) => Long;
            shr_u: (numBits: number | Long) => Long;
            rotateLeft: (numBits: number | Long) => Long;
            rotl: (numBits: number | Long) => Long;
            rotateRight: (numBits: number | Long) => Long;
            rotr: (numBits: number | Long) => Long;
            subtract: (subtrahend: string | number | Long) => Long;
            sub: (subtrahend: string | number | Long) => Long;
            toInt: () => number;
            toNumber: () => number;
            toBytes: (le?: boolean | undefined) => number[];
            toBytesLE: () => number[];
            toBytesBE: () => number[];
            toSigned: () => Long;
            toString: (radix?: number | undefined) => string;
            toUnsigned: () => Long;
            xor: (other: string | number | Long) => Long;
        } & { [K_2 in Exclude<keyof I_1["ref"], "$type" | keyof Long>]: never; }) | undefined;
    } & { [K_3 in Exclude<keyof I_1, "$type" | "ref">]: never; }>(object: I_1): SatOpAdditionalCommit;
};
export declare const SatOpInsert: {
    $type: "Electric.Satellite.SatOpInsert";
    encode(message: SatOpInsert, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): SatOpInsert;
    create<I extends {
        relationId?: number | undefined;
        rowData?: {
            values?: Uint8Array[] | undefined;
            nullsBitmask?: Uint8Array | undefined;
        } | undefined;
        tags?: string[] | undefined;
    } & {
        relationId?: number | undefined;
        rowData?: ({
            values?: Uint8Array[] | undefined;
            nullsBitmask?: Uint8Array | undefined;
        } & {
            values?: (Uint8Array[] & Uint8Array[] & { [K in Exclude<keyof I["rowData"]["values"], "$type" | keyof Uint8Array[]>]: never; }) | undefined;
            nullsBitmask?: Uint8Array | undefined;
        } & { [K_1 in Exclude<keyof I["rowData"], "$type" | "values" | "nullsBitmask">]: never; }) | undefined;
        tags?: (string[] & string[] & { [K_2 in Exclude<keyof I["tags"], "$type" | keyof string[]>]: never; }) | undefined;
    } & { [K_3 in Exclude<keyof I, "$type" | "relationId" | "rowData" | "tags">]: never; }>(base?: I): SatOpInsert;
    fromPartial<I_1 extends {
        relationId?: number | undefined;
        rowData?: {
            values?: Uint8Array[] | undefined;
            nullsBitmask?: Uint8Array | undefined;
        } | undefined;
        tags?: string[] | undefined;
    } & {
        relationId?: number | undefined;
        rowData?: ({
            values?: Uint8Array[] | undefined;
            nullsBitmask?: Uint8Array | undefined;
        } & {
            values?: (Uint8Array[] & Uint8Array[] & { [K_4 in Exclude<keyof I_1["rowData"]["values"], "$type" | keyof Uint8Array[]>]: never; }) | undefined;
            nullsBitmask?: Uint8Array | undefined;
        } & { [K_5 in Exclude<keyof I_1["rowData"], "$type" | "values" | "nullsBitmask">]: never; }) | undefined;
        tags?: (string[] & string[] & { [K_6 in Exclude<keyof I_1["tags"], "$type" | keyof string[]>]: never; }) | undefined;
    } & { [K_7 in Exclude<keyof I_1, "$type" | "relationId" | "rowData" | "tags">]: never; }>(object: I_1): SatOpInsert;
};
export declare const SatOpUpdate: {
    $type: "Electric.Satellite.SatOpUpdate";
    encode(message: SatOpUpdate, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): SatOpUpdate;
    create<I extends {
        relationId?: number | undefined;
        rowData?: {
            values?: Uint8Array[] | undefined;
            nullsBitmask?: Uint8Array | undefined;
        } | undefined;
        oldRowData?: {
            values?: Uint8Array[] | undefined;
            nullsBitmask?: Uint8Array | undefined;
        } | undefined;
        tags?: string[] | undefined;
    } & {
        relationId?: number | undefined;
        rowData?: ({
            values?: Uint8Array[] | undefined;
            nullsBitmask?: Uint8Array | undefined;
        } & {
            values?: (Uint8Array[] & Uint8Array[] & { [K in Exclude<keyof I["rowData"]["values"], "$type" | keyof Uint8Array[]>]: never; }) | undefined;
            nullsBitmask?: Uint8Array | undefined;
        } & { [K_1 in Exclude<keyof I["rowData"], "$type" | "values" | "nullsBitmask">]: never; }) | undefined;
        oldRowData?: ({
            values?: Uint8Array[] | undefined;
            nullsBitmask?: Uint8Array | undefined;
        } & {
            values?: (Uint8Array[] & Uint8Array[] & { [K_2 in Exclude<keyof I["oldRowData"]["values"], "$type" | keyof Uint8Array[]>]: never; }) | undefined;
            nullsBitmask?: Uint8Array | undefined;
        } & { [K_3 in Exclude<keyof I["oldRowData"], "$type" | "values" | "nullsBitmask">]: never; }) | undefined;
        tags?: (string[] & string[] & { [K_4 in Exclude<keyof I["tags"], "$type" | keyof string[]>]: never; }) | undefined;
    } & { [K_5 in Exclude<keyof I, "$type" | "relationId" | "rowData" | "oldRowData" | "tags">]: never; }>(base?: I): SatOpUpdate;
    fromPartial<I_1 extends {
        relationId?: number | undefined;
        rowData?: {
            values?: Uint8Array[] | undefined;
            nullsBitmask?: Uint8Array | undefined;
        } | undefined;
        oldRowData?: {
            values?: Uint8Array[] | undefined;
            nullsBitmask?: Uint8Array | undefined;
        } | undefined;
        tags?: string[] | undefined;
    } & {
        relationId?: number | undefined;
        rowData?: ({
            values?: Uint8Array[] | undefined;
            nullsBitmask?: Uint8Array | undefined;
        } & {
            values?: (Uint8Array[] & Uint8Array[] & { [K_6 in Exclude<keyof I_1["rowData"]["values"], "$type" | keyof Uint8Array[]>]: never; }) | undefined;
            nullsBitmask?: Uint8Array | undefined;
        } & { [K_7 in Exclude<keyof I_1["rowData"], "$type" | "values" | "nullsBitmask">]: never; }) | undefined;
        oldRowData?: ({
            values?: Uint8Array[] | undefined;
            nullsBitmask?: Uint8Array | undefined;
        } & {
            values?: (Uint8Array[] & Uint8Array[] & { [K_8 in Exclude<keyof I_1["oldRowData"]["values"], "$type" | keyof Uint8Array[]>]: never; }) | undefined;
            nullsBitmask?: Uint8Array | undefined;
        } & { [K_9 in Exclude<keyof I_1["oldRowData"], "$type" | "values" | "nullsBitmask">]: never; }) | undefined;
        tags?: (string[] & string[] & { [K_10 in Exclude<keyof I_1["tags"], "$type" | keyof string[]>]: never; }) | undefined;
    } & { [K_11 in Exclude<keyof I_1, "$type" | "relationId" | "rowData" | "oldRowData" | "tags">]: never; }>(object: I_1): SatOpUpdate;
};
export declare const SatOpDelete: {
    $type: "Electric.Satellite.SatOpDelete";
    encode(message: SatOpDelete, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): SatOpDelete;
    create<I extends {
        relationId?: number | undefined;
        oldRowData?: {
            values?: Uint8Array[] | undefined;
            nullsBitmask?: Uint8Array | undefined;
        } | undefined;
        tags?: string[] | undefined;
    } & {
        relationId?: number | undefined;
        oldRowData?: ({
            values?: Uint8Array[] | undefined;
            nullsBitmask?: Uint8Array | undefined;
        } & {
            values?: (Uint8Array[] & Uint8Array[] & { [K in Exclude<keyof I["oldRowData"]["values"], "$type" | keyof Uint8Array[]>]: never; }) | undefined;
            nullsBitmask?: Uint8Array | undefined;
        } & { [K_1 in Exclude<keyof I["oldRowData"], "$type" | "values" | "nullsBitmask">]: never; }) | undefined;
        tags?: (string[] & string[] & { [K_2 in Exclude<keyof I["tags"], "$type" | keyof string[]>]: never; }) | undefined;
    } & { [K_3 in Exclude<keyof I, "$type" | "relationId" | "oldRowData" | "tags">]: never; }>(base?: I): SatOpDelete;
    fromPartial<I_1 extends {
        relationId?: number | undefined;
        oldRowData?: {
            values?: Uint8Array[] | undefined;
            nullsBitmask?: Uint8Array | undefined;
        } | undefined;
        tags?: string[] | undefined;
    } & {
        relationId?: number | undefined;
        oldRowData?: ({
            values?: Uint8Array[] | undefined;
            nullsBitmask?: Uint8Array | undefined;
        } & {
            values?: (Uint8Array[] & Uint8Array[] & { [K_4 in Exclude<keyof I_1["oldRowData"]["values"], "$type" | keyof Uint8Array[]>]: never; }) | undefined;
            nullsBitmask?: Uint8Array | undefined;
        } & { [K_5 in Exclude<keyof I_1["oldRowData"], "$type" | "values" | "nullsBitmask">]: never; }) | undefined;
        tags?: (string[] & string[] & { [K_6 in Exclude<keyof I_1["tags"], "$type" | keyof string[]>]: never; }) | undefined;
    } & { [K_7 in Exclude<keyof I_1, "$type" | "relationId" | "oldRowData" | "tags">]: never; }>(object: I_1): SatOpDelete;
};
export declare const SatOpCompensation: {
    $type: "Electric.Satellite.SatOpCompensation";
    encode(message: SatOpCompensation, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): SatOpCompensation;
    create<I extends {
        relationId?: number | undefined;
        tags?: string[] | undefined;
        pkData?: {
            values?: Uint8Array[] | undefined;
            nullsBitmask?: Uint8Array | undefined;
        } | undefined;
    } & {
        relationId?: number | undefined;
        tags?: (string[] & string[] & { [K in Exclude<keyof I["tags"], "$type" | keyof string[]>]: never; }) | undefined;
        pkData?: ({
            values?: Uint8Array[] | undefined;
            nullsBitmask?: Uint8Array | undefined;
        } & {
            values?: (Uint8Array[] & Uint8Array[] & { [K_1 in Exclude<keyof I["pkData"]["values"], "$type" | keyof Uint8Array[]>]: never; }) | undefined;
            nullsBitmask?: Uint8Array | undefined;
        } & { [K_2 in Exclude<keyof I["pkData"], "$type" | "values" | "nullsBitmask">]: never; }) | undefined;
    } & { [K_3 in Exclude<keyof I, "$type" | "relationId" | "tags" | "pkData">]: never; }>(base?: I): SatOpCompensation;
    fromPartial<I_1 extends {
        relationId?: number | undefined;
        tags?: string[] | undefined;
        pkData?: {
            values?: Uint8Array[] | undefined;
            nullsBitmask?: Uint8Array | undefined;
        } | undefined;
    } & {
        relationId?: number | undefined;
        tags?: (string[] & string[] & { [K_4 in Exclude<keyof I_1["tags"], "$type" | keyof string[]>]: never; }) | undefined;
        pkData?: ({
            values?: Uint8Array[] | undefined;
            nullsBitmask?: Uint8Array | undefined;
        } & {
            values?: (Uint8Array[] & Uint8Array[] & { [K_5 in Exclude<keyof I_1["pkData"]["values"], "$type" | keyof Uint8Array[]>]: never; }) | undefined;
            nullsBitmask?: Uint8Array | undefined;
        } & { [K_6 in Exclude<keyof I_1["pkData"], "$type" | "values" | "nullsBitmask">]: never; }) | undefined;
    } & { [K_7 in Exclude<keyof I_1, "$type" | "relationId" | "tags" | "pkData">]: never; }>(object: I_1): SatOpCompensation;
};
export declare const SatOpGone: {
    $type: "Electric.Satellite.SatOpGone";
    encode(message: SatOpGone, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): SatOpGone;
    create<I extends {
        relationId?: number | undefined;
        pkData?: {
            values?: Uint8Array[] | undefined;
            nullsBitmask?: Uint8Array | undefined;
        } | undefined;
    } & {
        relationId?: number | undefined;
        pkData?: ({
            values?: Uint8Array[] | undefined;
            nullsBitmask?: Uint8Array | undefined;
        } & {
            values?: (Uint8Array[] & Uint8Array[] & { [K in Exclude<keyof I["pkData"]["values"], "$type" | keyof Uint8Array[]>]: never; }) | undefined;
            nullsBitmask?: Uint8Array | undefined;
        } & { [K_1 in Exclude<keyof I["pkData"], "$type" | "values" | "nullsBitmask">]: never; }) | undefined;
    } & { [K_2 in Exclude<keyof I, "$type" | "relationId" | "pkData">]: never; }>(base?: I): SatOpGone;
    fromPartial<I_1 extends {
        relationId?: number | undefined;
        pkData?: {
            values?: Uint8Array[] | undefined;
            nullsBitmask?: Uint8Array | undefined;
        } | undefined;
    } & {
        relationId?: number | undefined;
        pkData?: ({
            values?: Uint8Array[] | undefined;
            nullsBitmask?: Uint8Array | undefined;
        } & {
            values?: (Uint8Array[] & Uint8Array[] & { [K_3 in Exclude<keyof I_1["pkData"]["values"], "$type" | keyof Uint8Array[]>]: never; }) | undefined;
            nullsBitmask?: Uint8Array | undefined;
        } & { [K_4 in Exclude<keyof I_1["pkData"], "$type" | "values" | "nullsBitmask">]: never; }) | undefined;
    } & { [K_5 in Exclude<keyof I_1, "$type" | "relationId" | "pkData">]: never; }>(object: I_1): SatOpGone;
};
export declare const SatOpRow: {
    $type: "Electric.Satellite.SatOpRow";
    encode(message: SatOpRow, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): SatOpRow;
    create<I extends {
        values?: Uint8Array[] | undefined;
        nullsBitmask?: Uint8Array | undefined;
    } & {
        values?: (Uint8Array[] & Uint8Array[] & { [K in Exclude<keyof I["values"], "$type" | keyof Uint8Array[]>]: never; }) | undefined;
        nullsBitmask?: Uint8Array | undefined;
    } & { [K_1 in Exclude<keyof I, "$type" | "values" | "nullsBitmask">]: never; }>(base?: I): SatOpRow;
    fromPartial<I_1 extends {
        values?: Uint8Array[] | undefined;
        nullsBitmask?: Uint8Array | undefined;
    } & {
        values?: (Uint8Array[] & Uint8Array[] & { [K_2 in Exclude<keyof I_1["values"], "$type" | keyof Uint8Array[]>]: never; }) | undefined;
        nullsBitmask?: Uint8Array | undefined;
    } & { [K_3 in Exclude<keyof I_1, "$type" | "values" | "nullsBitmask">]: never; }>(object: I_1): SatOpRow;
};
export declare const SatOpMigrate: {
    $type: "Electric.Satellite.SatOpMigrate";
    encode(message: SatOpMigrate, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): SatOpMigrate;
    create<I extends {
        version?: string | undefined;
        stmts?: {
            type?: SatOpMigrate_Type | undefined;
            sql?: string | undefined;
        }[] | undefined;
        table?: {
            name?: string | undefined;
            columns?: {
                name?: string | undefined;
                sqliteType?: string | undefined;
                pgType?: {
                    name?: string | undefined;
                    array?: number[] | undefined;
                    size?: number[] | undefined;
                } | undefined;
            }[] | undefined;
            fks?: {
                fkCols?: string[] | undefined;
                pkTable?: string | undefined;
                pkCols?: string[] | undefined;
            }[] | undefined;
            pks?: string[] | undefined;
        } | undefined;
        enumType?: {
            values?: string[] | undefined;
            name?: string | undefined;
        } | undefined;
    } & {
        version?: string | undefined;
        stmts?: ({
            type?: SatOpMigrate_Type | undefined;
            sql?: string | undefined;
        }[] & ({
            type?: SatOpMigrate_Type | undefined;
            sql?: string | undefined;
        } & {
            type?: SatOpMigrate_Type | undefined;
            sql?: string | undefined;
        } & { [K in Exclude<keyof I["stmts"][number], "$type" | "type" | "sql">]: never; })[] & { [K_1 in Exclude<keyof I["stmts"], "$type" | keyof {
            type?: SatOpMigrate_Type | undefined;
            sql?: string | undefined;
        }[]>]: never; }) | undefined;
        table?: ({
            name?: string | undefined;
            columns?: {
                name?: string | undefined;
                sqliteType?: string | undefined;
                pgType?: {
                    name?: string | undefined;
                    array?: number[] | undefined;
                    size?: number[] | undefined;
                } | undefined;
            }[] | undefined;
            fks?: {
                fkCols?: string[] | undefined;
                pkTable?: string | undefined;
                pkCols?: string[] | undefined;
            }[] | undefined;
            pks?: string[] | undefined;
        } & {
            name?: string | undefined;
            columns?: ({
                name?: string | undefined;
                sqliteType?: string | undefined;
                pgType?: {
                    name?: string | undefined;
                    array?: number[] | undefined;
                    size?: number[] | undefined;
                } | undefined;
            }[] & ({
                name?: string | undefined;
                sqliteType?: string | undefined;
                pgType?: {
                    name?: string | undefined;
                    array?: number[] | undefined;
                    size?: number[] | undefined;
                } | undefined;
            } & {
                name?: string | undefined;
                sqliteType?: string | undefined;
                pgType?: ({
                    name?: string | undefined;
                    array?: number[] | undefined;
                    size?: number[] | undefined;
                } & {
                    name?: string | undefined;
                    array?: (number[] & number[] & { [K_2 in Exclude<keyof I["table"]["columns"][number]["pgType"]["array"], "$type" | keyof number[]>]: never; }) | undefined;
                    size?: (number[] & number[] & { [K_3 in Exclude<keyof I["table"]["columns"][number]["pgType"]["size"], "$type" | keyof number[]>]: never; }) | undefined;
                } & { [K_4 in Exclude<keyof I["table"]["columns"][number]["pgType"], "$type" | "name" | "array" | "size">]: never; }) | undefined;
            } & { [K_5 in Exclude<keyof I["table"]["columns"][number], "$type" | "name" | "sqliteType" | "pgType">]: never; })[] & { [K_6 in Exclude<keyof I["table"]["columns"], "$type" | keyof {
                name?: string | undefined;
                sqliteType?: string | undefined;
                pgType?: {
                    name?: string | undefined;
                    array?: number[] | undefined;
                    size?: number[] | undefined;
                } | undefined;
            }[]>]: never; }) | undefined;
            fks?: ({
                fkCols?: string[] | undefined;
                pkTable?: string | undefined;
                pkCols?: string[] | undefined;
            }[] & ({
                fkCols?: string[] | undefined;
                pkTable?: string | undefined;
                pkCols?: string[] | undefined;
            } & {
                fkCols?: (string[] & string[] & { [K_7 in Exclude<keyof I["table"]["fks"][number]["fkCols"], "$type" | keyof string[]>]: never; }) | undefined;
                pkTable?: string | undefined;
                pkCols?: (string[] & string[] & { [K_8 in Exclude<keyof I["table"]["fks"][number]["pkCols"], "$type" | keyof string[]>]: never; }) | undefined;
            } & { [K_9 in Exclude<keyof I["table"]["fks"][number], "$type" | "fkCols" | "pkTable" | "pkCols">]: never; })[] & { [K_10 in Exclude<keyof I["table"]["fks"], "$type" | keyof {
                fkCols?: string[] | undefined;
                pkTable?: string | undefined;
                pkCols?: string[] | undefined;
            }[]>]: never; }) | undefined;
            pks?: (string[] & string[] & { [K_11 in Exclude<keyof I["table"]["pks"], "$type" | keyof string[]>]: never; }) | undefined;
        } & { [K_12 in Exclude<keyof I["table"], "$type" | "name" | "columns" | "fks" | "pks">]: never; }) | undefined;
        enumType?: ({
            values?: string[] | undefined;
            name?: string | undefined;
        } & {
            values?: (string[] & string[] & { [K_13 in Exclude<keyof I["enumType"]["values"], "$type" | keyof string[]>]: never; }) | undefined;
            name?: string | undefined;
        } & { [K_14 in Exclude<keyof I["enumType"], "$type" | "values" | "name">]: never; }) | undefined;
    } & { [K_15 in Exclude<keyof I, "$type" | "version" | "stmts" | "table" | "enumType">]: never; }>(base?: I): SatOpMigrate;
    fromPartial<I_1 extends {
        version?: string | undefined;
        stmts?: {
            type?: SatOpMigrate_Type | undefined;
            sql?: string | undefined;
        }[] | undefined;
        table?: {
            name?: string | undefined;
            columns?: {
                name?: string | undefined;
                sqliteType?: string | undefined;
                pgType?: {
                    name?: string | undefined;
                    array?: number[] | undefined;
                    size?: number[] | undefined;
                } | undefined;
            }[] | undefined;
            fks?: {
                fkCols?: string[] | undefined;
                pkTable?: string | undefined;
                pkCols?: string[] | undefined;
            }[] | undefined;
            pks?: string[] | undefined;
        } | undefined;
        enumType?: {
            values?: string[] | undefined;
            name?: string | undefined;
        } | undefined;
    } & {
        version?: string | undefined;
        stmts?: ({
            type?: SatOpMigrate_Type | undefined;
            sql?: string | undefined;
        }[] & ({
            type?: SatOpMigrate_Type | undefined;
            sql?: string | undefined;
        } & {
            type?: SatOpMigrate_Type | undefined;
            sql?: string | undefined;
        } & { [K_16 in Exclude<keyof I_1["stmts"][number], "$type" | "type" | "sql">]: never; })[] & { [K_17 in Exclude<keyof I_1["stmts"], "$type" | keyof {
            type?: SatOpMigrate_Type | undefined;
            sql?: string | undefined;
        }[]>]: never; }) | undefined;
        table?: ({
            name?: string | undefined;
            columns?: {
                name?: string | undefined;
                sqliteType?: string | undefined;
                pgType?: {
                    name?: string | undefined;
                    array?: number[] | undefined;
                    size?: number[] | undefined;
                } | undefined;
            }[] | undefined;
            fks?: {
                fkCols?: string[] | undefined;
                pkTable?: string | undefined;
                pkCols?: string[] | undefined;
            }[] | undefined;
            pks?: string[] | undefined;
        } & {
            name?: string | undefined;
            columns?: ({
                name?: string | undefined;
                sqliteType?: string | undefined;
                pgType?: {
                    name?: string | undefined;
                    array?: number[] | undefined;
                    size?: number[] | undefined;
                } | undefined;
            }[] & ({
                name?: string | undefined;
                sqliteType?: string | undefined;
                pgType?: {
                    name?: string | undefined;
                    array?: number[] | undefined;
                    size?: number[] | undefined;
                } | undefined;
            } & {
                name?: string | undefined;
                sqliteType?: string | undefined;
                pgType?: ({
                    name?: string | undefined;
                    array?: number[] | undefined;
                    size?: number[] | undefined;
                } & {
                    name?: string | undefined;
                    array?: (number[] & number[] & { [K_18 in Exclude<keyof I_1["table"]["columns"][number]["pgType"]["array"], "$type" | keyof number[]>]: never; }) | undefined;
                    size?: (number[] & number[] & { [K_19 in Exclude<keyof I_1["table"]["columns"][number]["pgType"]["size"], "$type" | keyof number[]>]: never; }) | undefined;
                } & { [K_20 in Exclude<keyof I_1["table"]["columns"][number]["pgType"], "$type" | "name" | "array" | "size">]: never; }) | undefined;
            } & { [K_21 in Exclude<keyof I_1["table"]["columns"][number], "$type" | "name" | "sqliteType" | "pgType">]: never; })[] & { [K_22 in Exclude<keyof I_1["table"]["columns"], "$type" | keyof {
                name?: string | undefined;
                sqliteType?: string | undefined;
                pgType?: {
                    name?: string | undefined;
                    array?: number[] | undefined;
                    size?: number[] | undefined;
                } | undefined;
            }[]>]: never; }) | undefined;
            fks?: ({
                fkCols?: string[] | undefined;
                pkTable?: string | undefined;
                pkCols?: string[] | undefined;
            }[] & ({
                fkCols?: string[] | undefined;
                pkTable?: string | undefined;
                pkCols?: string[] | undefined;
            } & {
                fkCols?: (string[] & string[] & { [K_23 in Exclude<keyof I_1["table"]["fks"][number]["fkCols"], "$type" | keyof string[]>]: never; }) | undefined;
                pkTable?: string | undefined;
                pkCols?: (string[] & string[] & { [K_24 in Exclude<keyof I_1["table"]["fks"][number]["pkCols"], "$type" | keyof string[]>]: never; }) | undefined;
            } & { [K_25 in Exclude<keyof I_1["table"]["fks"][number], "$type" | "fkCols" | "pkTable" | "pkCols">]: never; })[] & { [K_26 in Exclude<keyof I_1["table"]["fks"], "$type" | keyof {
                fkCols?: string[] | undefined;
                pkTable?: string | undefined;
                pkCols?: string[] | undefined;
            }[]>]: never; }) | undefined;
            pks?: (string[] & string[] & { [K_27 in Exclude<keyof I_1["table"]["pks"], "$type" | keyof string[]>]: never; }) | undefined;
        } & { [K_28 in Exclude<keyof I_1["table"], "$type" | "name" | "columns" | "fks" | "pks">]: never; }) | undefined;
        enumType?: ({
            values?: string[] | undefined;
            name?: string | undefined;
        } & {
            values?: (string[] & string[] & { [K_29 in Exclude<keyof I_1["enumType"]["values"], "$type" | keyof string[]>]: never; }) | undefined;
            name?: string | undefined;
        } & { [K_30 in Exclude<keyof I_1["enumType"], "$type" | "values" | "name">]: never; }) | undefined;
    } & { [K_31 in Exclude<keyof I_1, "$type" | "version" | "stmts" | "table" | "enumType">]: never; }>(object: I_1): SatOpMigrate;
};
export declare const SatOpMigrate_Stmt: {
    $type: "Electric.Satellite.SatOpMigrate.Stmt";
    encode(message: SatOpMigrate_Stmt, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): SatOpMigrate_Stmt;
    create<I extends {
        type?: SatOpMigrate_Type | undefined;
        sql?: string | undefined;
    } & {
        type?: SatOpMigrate_Type | undefined;
        sql?: string | undefined;
    } & { [K in Exclude<keyof I, "$type" | "type" | "sql">]: never; }>(base?: I): SatOpMigrate_Stmt;
    fromPartial<I_1 extends {
        type?: SatOpMigrate_Type | undefined;
        sql?: string | undefined;
    } & {
        type?: SatOpMigrate_Type | undefined;
        sql?: string | undefined;
    } & { [K_1 in Exclude<keyof I_1, "$type" | "type" | "sql">]: never; }>(object: I_1): SatOpMigrate_Stmt;
};
export declare const SatOpMigrate_PgColumnType: {
    $type: "Electric.Satellite.SatOpMigrate.PgColumnType";
    encode(message: SatOpMigrate_PgColumnType, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): SatOpMigrate_PgColumnType;
    create<I extends {
        name?: string | undefined;
        array?: number[] | undefined;
        size?: number[] | undefined;
    } & {
        name?: string | undefined;
        array?: (number[] & number[] & { [K in Exclude<keyof I["array"], "$type" | keyof number[]>]: never; }) | undefined;
        size?: (number[] & number[] & { [K_1 in Exclude<keyof I["size"], "$type" | keyof number[]>]: never; }) | undefined;
    } & { [K_2 in Exclude<keyof I, "$type" | "name" | "array" | "size">]: never; }>(base?: I): SatOpMigrate_PgColumnType;
    fromPartial<I_1 extends {
        name?: string | undefined;
        array?: number[] | undefined;
        size?: number[] | undefined;
    } & {
        name?: string | undefined;
        array?: (number[] & number[] & { [K_3 in Exclude<keyof I_1["array"], "$type" | keyof number[]>]: never; }) | undefined;
        size?: (number[] & number[] & { [K_4 in Exclude<keyof I_1["size"], "$type" | keyof number[]>]: never; }) | undefined;
    } & { [K_5 in Exclude<keyof I_1, "$type" | "name" | "array" | "size">]: never; }>(object: I_1): SatOpMigrate_PgColumnType;
};
export declare const SatOpMigrate_Column: {
    $type: "Electric.Satellite.SatOpMigrate.Column";
    encode(message: SatOpMigrate_Column, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): SatOpMigrate_Column;
    create<I extends {
        name?: string | undefined;
        sqliteType?: string | undefined;
        pgType?: {
            name?: string | undefined;
            array?: number[] | undefined;
            size?: number[] | undefined;
        } | undefined;
    } & {
        name?: string | undefined;
        sqliteType?: string | undefined;
        pgType?: ({
            name?: string | undefined;
            array?: number[] | undefined;
            size?: number[] | undefined;
        } & {
            name?: string | undefined;
            array?: (number[] & number[] & { [K in Exclude<keyof I["pgType"]["array"], "$type" | keyof number[]>]: never; }) | undefined;
            size?: (number[] & number[] & { [K_1 in Exclude<keyof I["pgType"]["size"], "$type" | keyof number[]>]: never; }) | undefined;
        } & { [K_2 in Exclude<keyof I["pgType"], "$type" | "name" | "array" | "size">]: never; }) | undefined;
    } & { [K_3 in Exclude<keyof I, "$type" | "name" | "sqliteType" | "pgType">]: never; }>(base?: I): SatOpMigrate_Column;
    fromPartial<I_1 extends {
        name?: string | undefined;
        sqliteType?: string | undefined;
        pgType?: {
            name?: string | undefined;
            array?: number[] | undefined;
            size?: number[] | undefined;
        } | undefined;
    } & {
        name?: string | undefined;
        sqliteType?: string | undefined;
        pgType?: ({
            name?: string | undefined;
            array?: number[] | undefined;
            size?: number[] | undefined;
        } & {
            name?: string | undefined;
            array?: (number[] & number[] & { [K_4 in Exclude<keyof I_1["pgType"]["array"], "$type" | keyof number[]>]: never; }) | undefined;
            size?: (number[] & number[] & { [K_5 in Exclude<keyof I_1["pgType"]["size"], "$type" | keyof number[]>]: never; }) | undefined;
        } & { [K_6 in Exclude<keyof I_1["pgType"], "$type" | "name" | "array" | "size">]: never; }) | undefined;
    } & { [K_7 in Exclude<keyof I_1, "$type" | "name" | "sqliteType" | "pgType">]: never; }>(object: I_1): SatOpMigrate_Column;
};
export declare const SatOpMigrate_ForeignKey: {
    $type: "Electric.Satellite.SatOpMigrate.ForeignKey";
    encode(message: SatOpMigrate_ForeignKey, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): SatOpMigrate_ForeignKey;
    create<I extends {
        fkCols?: string[] | undefined;
        pkTable?: string | undefined;
        pkCols?: string[] | undefined;
    } & {
        fkCols?: (string[] & string[] & { [K in Exclude<keyof I["fkCols"], "$type" | keyof string[]>]: never; }) | undefined;
        pkTable?: string | undefined;
        pkCols?: (string[] & string[] & { [K_1 in Exclude<keyof I["pkCols"], "$type" | keyof string[]>]: never; }) | undefined;
    } & { [K_2 in Exclude<keyof I, "$type" | "fkCols" | "pkTable" | "pkCols">]: never; }>(base?: I): SatOpMigrate_ForeignKey;
    fromPartial<I_1 extends {
        fkCols?: string[] | undefined;
        pkTable?: string | undefined;
        pkCols?: string[] | undefined;
    } & {
        fkCols?: (string[] & string[] & { [K_3 in Exclude<keyof I_1["fkCols"], "$type" | keyof string[]>]: never; }) | undefined;
        pkTable?: string | undefined;
        pkCols?: (string[] & string[] & { [K_4 in Exclude<keyof I_1["pkCols"], "$type" | keyof string[]>]: never; }) | undefined;
    } & { [K_5 in Exclude<keyof I_1, "$type" | "fkCols" | "pkTable" | "pkCols">]: never; }>(object: I_1): SatOpMigrate_ForeignKey;
};
export declare const SatOpMigrate_Table: {
    $type: "Electric.Satellite.SatOpMigrate.Table";
    encode(message: SatOpMigrate_Table, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): SatOpMigrate_Table;
    create<I extends {
        name?: string | undefined;
        columns?: {
            name?: string | undefined;
            sqliteType?: string | undefined;
            pgType?: {
                name?: string | undefined;
                array?: number[] | undefined;
                size?: number[] | undefined;
            } | undefined;
        }[] | undefined;
        fks?: {
            fkCols?: string[] | undefined;
            pkTable?: string | undefined;
            pkCols?: string[] | undefined;
        }[] | undefined;
        pks?: string[] | undefined;
    } & {
        name?: string | undefined;
        columns?: ({
            name?: string | undefined;
            sqliteType?: string | undefined;
            pgType?: {
                name?: string | undefined;
                array?: number[] | undefined;
                size?: number[] | undefined;
            } | undefined;
        }[] & ({
            name?: string | undefined;
            sqliteType?: string | undefined;
            pgType?: {
                name?: string | undefined;
                array?: number[] | undefined;
                size?: number[] | undefined;
            } | undefined;
        } & {
            name?: string | undefined;
            sqliteType?: string | undefined;
            pgType?: ({
                name?: string | undefined;
                array?: number[] | undefined;
                size?: number[] | undefined;
            } & {
                name?: string | undefined;
                array?: (number[] & number[] & { [K in Exclude<keyof I["columns"][number]["pgType"]["array"], "$type" | keyof number[]>]: never; }) | undefined;
                size?: (number[] & number[] & { [K_1 in Exclude<keyof I["columns"][number]["pgType"]["size"], "$type" | keyof number[]>]: never; }) | undefined;
            } & { [K_2 in Exclude<keyof I["columns"][number]["pgType"], "$type" | "name" | "array" | "size">]: never; }) | undefined;
        } & { [K_3 in Exclude<keyof I["columns"][number], "$type" | "name" | "sqliteType" | "pgType">]: never; })[] & { [K_4 in Exclude<keyof I["columns"], "$type" | keyof {
            name?: string | undefined;
            sqliteType?: string | undefined;
            pgType?: {
                name?: string | undefined;
                array?: number[] | undefined;
                size?: number[] | undefined;
            } | undefined;
        }[]>]: never; }) | undefined;
        fks?: ({
            fkCols?: string[] | undefined;
            pkTable?: string | undefined;
            pkCols?: string[] | undefined;
        }[] & ({
            fkCols?: string[] | undefined;
            pkTable?: string | undefined;
            pkCols?: string[] | undefined;
        } & {
            fkCols?: (string[] & string[] & { [K_5 in Exclude<keyof I["fks"][number]["fkCols"], "$type" | keyof string[]>]: never; }) | undefined;
            pkTable?: string | undefined;
            pkCols?: (string[] & string[] & { [K_6 in Exclude<keyof I["fks"][number]["pkCols"], "$type" | keyof string[]>]: never; }) | undefined;
        } & { [K_7 in Exclude<keyof I["fks"][number], "$type" | "fkCols" | "pkTable" | "pkCols">]: never; })[] & { [K_8 in Exclude<keyof I["fks"], "$type" | keyof {
            fkCols?: string[] | undefined;
            pkTable?: string | undefined;
            pkCols?: string[] | undefined;
        }[]>]: never; }) | undefined;
        pks?: (string[] & string[] & { [K_9 in Exclude<keyof I["pks"], "$type" | keyof string[]>]: never; }) | undefined;
    } & { [K_10 in Exclude<keyof I, "$type" | "name" | "columns" | "fks" | "pks">]: never; }>(base?: I): SatOpMigrate_Table;
    fromPartial<I_1 extends {
        name?: string | undefined;
        columns?: {
            name?: string | undefined;
            sqliteType?: string | undefined;
            pgType?: {
                name?: string | undefined;
                array?: number[] | undefined;
                size?: number[] | undefined;
            } | undefined;
        }[] | undefined;
        fks?: {
            fkCols?: string[] | undefined;
            pkTable?: string | undefined;
            pkCols?: string[] | undefined;
        }[] | undefined;
        pks?: string[] | undefined;
    } & {
        name?: string | undefined;
        columns?: ({
            name?: string | undefined;
            sqliteType?: string | undefined;
            pgType?: {
                name?: string | undefined;
                array?: number[] | undefined;
                size?: number[] | undefined;
            } | undefined;
        }[] & ({
            name?: string | undefined;
            sqliteType?: string | undefined;
            pgType?: {
                name?: string | undefined;
                array?: number[] | undefined;
                size?: number[] | undefined;
            } | undefined;
        } & {
            name?: string | undefined;
            sqliteType?: string | undefined;
            pgType?: ({
                name?: string | undefined;
                array?: number[] | undefined;
                size?: number[] | undefined;
            } & {
                name?: string | undefined;
                array?: (number[] & number[] & { [K_11 in Exclude<keyof I_1["columns"][number]["pgType"]["array"], "$type" | keyof number[]>]: never; }) | undefined;
                size?: (number[] & number[] & { [K_12 in Exclude<keyof I_1["columns"][number]["pgType"]["size"], "$type" | keyof number[]>]: never; }) | undefined;
            } & { [K_13 in Exclude<keyof I_1["columns"][number]["pgType"], "$type" | "name" | "array" | "size">]: never; }) | undefined;
        } & { [K_14 in Exclude<keyof I_1["columns"][number], "$type" | "name" | "sqliteType" | "pgType">]: never; })[] & { [K_15 in Exclude<keyof I_1["columns"], "$type" | keyof {
            name?: string | undefined;
            sqliteType?: string | undefined;
            pgType?: {
                name?: string | undefined;
                array?: number[] | undefined;
                size?: number[] | undefined;
            } | undefined;
        }[]>]: never; }) | undefined;
        fks?: ({
            fkCols?: string[] | undefined;
            pkTable?: string | undefined;
            pkCols?: string[] | undefined;
        }[] & ({
            fkCols?: string[] | undefined;
            pkTable?: string | undefined;
            pkCols?: string[] | undefined;
        } & {
            fkCols?: (string[] & string[] & { [K_16 in Exclude<keyof I_1["fks"][number]["fkCols"], "$type" | keyof string[]>]: never; }) | undefined;
            pkTable?: string | undefined;
            pkCols?: (string[] & string[] & { [K_17 in Exclude<keyof I_1["fks"][number]["pkCols"], "$type" | keyof string[]>]: never; }) | undefined;
        } & { [K_18 in Exclude<keyof I_1["fks"][number], "$type" | "fkCols" | "pkTable" | "pkCols">]: never; })[] & { [K_19 in Exclude<keyof I_1["fks"], "$type" | keyof {
            fkCols?: string[] | undefined;
            pkTable?: string | undefined;
            pkCols?: string[] | undefined;
        }[]>]: never; }) | undefined;
        pks?: (string[] & string[] & { [K_20 in Exclude<keyof I_1["pks"], "$type" | keyof string[]>]: never; }) | undefined;
    } & { [K_21 in Exclude<keyof I_1, "$type" | "name" | "columns" | "fks" | "pks">]: never; }>(object: I_1): SatOpMigrate_Table;
};
export declare const SatOpMigrate_EnumType: {
    $type: "Electric.Satellite.SatOpMigrate.EnumType";
    encode(message: SatOpMigrate_EnumType, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): SatOpMigrate_EnumType;
    create<I extends {
        values?: string[] | undefined;
        name?: string | undefined;
    } & {
        values?: (string[] & string[] & { [K in Exclude<keyof I["values"], "$type" | keyof string[]>]: never; }) | undefined;
        name?: string | undefined;
    } & { [K_1 in Exclude<keyof I, "$type" | "values" | "name">]: never; }>(base?: I): SatOpMigrate_EnumType;
    fromPartial<I_1 extends {
        values?: string[] | undefined;
        name?: string | undefined;
    } & {
        values?: (string[] & string[] & { [K_2 in Exclude<keyof I_1["values"], "$type" | keyof string[]>]: never; }) | undefined;
        name?: string | undefined;
    } & { [K_3 in Exclude<keyof I_1, "$type" | "values" | "name">]: never; }>(object: I_1): SatOpMigrate_EnumType;
};
export declare const SatSubsReq: {
    $type: "Electric.Satellite.SatSubsReq";
    encode(message: SatSubsReq, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): SatSubsReq;
    create<I extends {
        subscriptionId?: string | undefined;
        shapeRequests?: {
            requestId?: string | undefined;
            shapeDefinition?: {
                selects?: {
                    tablename?: string | undefined;
                    where?: string | undefined;
                    include?: {
                        foreignKey?: string[] | undefined;
                        select?: any | undefined;
                    }[] | undefined;
                }[] | undefined;
            } | undefined;
        }[] | undefined;
    } & {
        subscriptionId?: string | undefined;
        shapeRequests?: ({
            requestId?: string | undefined;
            shapeDefinition?: {
                selects?: {
                    tablename?: string | undefined;
                    where?: string | undefined;
                    include?: {
                        foreignKey?: string[] | undefined;
                        select?: any | undefined;
                    }[] | undefined;
                }[] | undefined;
            } | undefined;
        }[] & ({
            requestId?: string | undefined;
            shapeDefinition?: {
                selects?: {
                    tablename?: string | undefined;
                    where?: string | undefined;
                    include?: {
                        foreignKey?: string[] | undefined;
                        select?: any | undefined;
                    }[] | undefined;
                }[] | undefined;
            } | undefined;
        } & {
            requestId?: string | undefined;
            shapeDefinition?: ({
                selects?: {
                    tablename?: string | undefined;
                    where?: string | undefined;
                    include?: {
                        foreignKey?: string[] | undefined;
                        select?: any | undefined;
                    }[] | undefined;
                }[] | undefined;
            } & {
                selects?: ({
                    tablename?: string | undefined;
                    where?: string | undefined;
                    include?: {
                        foreignKey?: string[] | undefined;
                        select?: any | undefined;
                    }[] | undefined;
                }[] & ({
                    tablename?: string | undefined;
                    where?: string | undefined;
                    include?: {
                        foreignKey?: string[] | undefined;
                        select?: any | undefined;
                    }[] | undefined;
                } & {
                    tablename?: string | undefined;
                    where?: string | undefined;
                    include?: ({
                        foreignKey?: string[] | undefined;
                        select?: any | undefined;
                    }[] & ({
                        foreignKey?: string[] | undefined;
                        select?: any | undefined;
                    } & {
                        foreignKey?: (string[] & string[] & { [K in Exclude<keyof I["shapeRequests"][number]["shapeDefinition"]["selects"][number]["include"][number]["foreignKey"], "$type" | keyof string[]>]: never; }) | undefined;
                        select?: ({
                            tablename?: string | undefined;
                            where?: string | undefined;
                            include?: {
                                foreignKey?: string[] | undefined;
                                select?: any | undefined;
                            }[] | undefined;
                        } & {
                            tablename?: string | undefined;
                            where?: string | undefined;
                            include?: ({
                                foreignKey?: string[] | undefined;
                                select?: any | undefined;
                            }[] & ({
                                foreignKey?: string[] | undefined;
                                select?: any | undefined;
                            } & {
                                foreignKey?: (string[] & string[] & { [K_1 in Exclude<keyof I["shapeRequests"][number]["shapeDefinition"]["selects"][number]["include"][number]["select"]["include"][number]["foreignKey"], "$type" | keyof string[]>]: never; }) | undefined;
                                select?: ({
                                    tablename?: string | undefined;
                                    where?: string | undefined;
                                    include?: {
                                        foreignKey?: string[] | undefined;
                                        select?: any | undefined;
                                    }[] | undefined;
                                } & {
                                    tablename?: string | undefined;
                                    where?: string | undefined;
                                    include?: ({
                                        foreignKey?: string[] | undefined;
                                        select?: any | undefined;
                                    }[] & ({
                                        foreignKey?: string[] | undefined;
                                        select?: any | undefined;
                                    } & {
                                        foreignKey?: (string[] & string[] & { [K_2 in Exclude<keyof I["shapeRequests"][number]["shapeDefinition"]["selects"][number]["include"][number]["select"]["include"][number]["select"]["include"][number]["foreignKey"], "$type" | keyof string[]>]: never; }) | undefined;
                                        select?: ({
                                            tablename?: string | undefined;
                                            where?: string | undefined;
                                            include?: {
                                                foreignKey?: string[] | undefined;
                                                select?: any | undefined;
                                            }[] | undefined;
                                        } & {
                                            tablename?: string | undefined;
                                            where?: string | undefined;
                                            include?: ({
                                                foreignKey?: string[] | undefined;
                                                select?: any | undefined;
                                            }[] & ({
                                                foreignKey?: string[] | undefined;
                                                select?: any | undefined;
                                            } & {
                                                foreignKey?: (string[] & string[] & { [K_3 in Exclude<keyof I["shapeRequests"][number]["shapeDefinition"]["selects"][number]["include"][number]["select"]["include"][number]["select"]["include"][number]["select"]["include"][number]["foreignKey"], "$type" | keyof string[]>]: never; }) | undefined;
                                                select?: ({
                                                    tablename?: string | undefined;
                                                    where?: string | undefined;
                                                    include?: {
                                                        foreignKey?: string[] | undefined;
                                                        select?: any | undefined;
                                                    }[] | undefined;
                                                } & any & { [K_4 in Exclude<keyof I["shapeRequests"][number]["shapeDefinition"]["selects"][number]["include"][number]["select"]["include"][number]["select"]["include"][number]["select"]["include"][number]["select"], "$type" | "tablename" | "where" | "include">]: never; }) | undefined;
                                            } & { [K_5 in Exclude<keyof I["shapeRequests"][number]["shapeDefinition"]["selects"][number]["include"][number]["select"]["include"][number]["select"]["include"][number]["select"]["include"][number], "$type" | "foreignKey" | "select">]: never; })[] & { [K_6 in Exclude<keyof I["shapeRequests"][number]["shapeDefinition"]["selects"][number]["include"][number]["select"]["include"][number]["select"]["include"][number]["select"]["include"], "$type" | keyof {
                                                foreignKey?: string[] | undefined;
                                                select?: any | undefined;
                                            }[]>]: never; }) | undefined;
                                        } & { [K_7 in Exclude<keyof I["shapeRequests"][number]["shapeDefinition"]["selects"][number]["include"][number]["select"]["include"][number]["select"]["include"][number]["select"], "$type" | "tablename" | "where" | "include">]: never; }) | undefined;
                                    } & { [K_8 in Exclude<keyof I["shapeRequests"][number]["shapeDefinition"]["selects"][number]["include"][number]["select"]["include"][number]["select"]["include"][number], "$type" | "foreignKey" | "select">]: never; })[] & { [K_9 in Exclude<keyof I["shapeRequests"][number]["shapeDefinition"]["selects"][number]["include"][number]["select"]["include"][number]["select"]["include"], "$type" | keyof {
                                        foreignKey?: string[] | undefined;
                                        select?: any | undefined;
                                    }[]>]: never; }) | undefined;
                                } & { [K_10 in Exclude<keyof I["shapeRequests"][number]["shapeDefinition"]["selects"][number]["include"][number]["select"]["include"][number]["select"], "$type" | "tablename" | "where" | "include">]: never; }) | undefined;
                            } & { [K_11 in Exclude<keyof I["shapeRequests"][number]["shapeDefinition"]["selects"][number]["include"][number]["select"]["include"][number], "$type" | "foreignKey" | "select">]: never; })[] & { [K_12 in Exclude<keyof I["shapeRequests"][number]["shapeDefinition"]["selects"][number]["include"][number]["select"]["include"], "$type" | keyof {
                                foreignKey?: string[] | undefined;
                                select?: any | undefined;
                            }[]>]: never; }) | undefined;
                        } & { [K_13 in Exclude<keyof I["shapeRequests"][number]["shapeDefinition"]["selects"][number]["include"][number]["select"], "$type" | "tablename" | "where" | "include">]: never; }) | undefined;
                    } & { [K_14 in Exclude<keyof I["shapeRequests"][number]["shapeDefinition"]["selects"][number]["include"][number], "$type" | "foreignKey" | "select">]: never; })[] & { [K_15 in Exclude<keyof I["shapeRequests"][number]["shapeDefinition"]["selects"][number]["include"], "$type" | keyof {
                        foreignKey?: string[] | undefined;
                        select?: any | undefined;
                    }[]>]: never; }) | undefined;
                } & { [K_16 in Exclude<keyof I["shapeRequests"][number]["shapeDefinition"]["selects"][number], "$type" | "tablename" | "where" | "include">]: never; })[] & { [K_17 in Exclude<keyof I["shapeRequests"][number]["shapeDefinition"]["selects"], "$type" | keyof {
                    tablename?: string | undefined;
                    where?: string | undefined;
                    include?: {
                        foreignKey?: string[] | undefined;
                        select?: any | undefined;
                    }[] | undefined;
                }[]>]: never; }) | undefined;
            } & { [K_18 in Exclude<keyof I["shapeRequests"][number]["shapeDefinition"], "$type" | "selects">]: never; }) | undefined;
        } & { [K_19 in Exclude<keyof I["shapeRequests"][number], "$type" | "requestId" | "shapeDefinition">]: never; })[] & { [K_20 in Exclude<keyof I["shapeRequests"], "$type" | keyof {
            requestId?: string | undefined;
            shapeDefinition?: {
                selects?: {
                    tablename?: string | undefined;
                    where?: string | undefined;
                    include?: {
                        foreignKey?: string[] | undefined;
                        select?: any | undefined;
                    }[] | undefined;
                }[] | undefined;
            } | undefined;
        }[]>]: never; }) | undefined;
    } & { [K_21 in Exclude<keyof I, "$type" | "subscriptionId" | "shapeRequests">]: never; }>(base?: I): SatSubsReq;
    fromPartial<I_1 extends {
        subscriptionId?: string | undefined;
        shapeRequests?: {
            requestId?: string | undefined;
            shapeDefinition?: {
                selects?: {
                    tablename?: string | undefined;
                    where?: string | undefined;
                    include?: {
                        foreignKey?: string[] | undefined;
                        select?: any | undefined;
                    }[] | undefined;
                }[] | undefined;
            } | undefined;
        }[] | undefined;
    } & {
        subscriptionId?: string | undefined;
        shapeRequests?: ({
            requestId?: string | undefined;
            shapeDefinition?: {
                selects?: {
                    tablename?: string | undefined;
                    where?: string | undefined;
                    include?: {
                        foreignKey?: string[] | undefined;
                        select?: any | undefined;
                    }[] | undefined;
                }[] | undefined;
            } | undefined;
        }[] & ({
            requestId?: string | undefined;
            shapeDefinition?: {
                selects?: {
                    tablename?: string | undefined;
                    where?: string | undefined;
                    include?: {
                        foreignKey?: string[] | undefined;
                        select?: any | undefined;
                    }[] | undefined;
                }[] | undefined;
            } | undefined;
        } & {
            requestId?: string | undefined;
            shapeDefinition?: ({
                selects?: {
                    tablename?: string | undefined;
                    where?: string | undefined;
                    include?: {
                        foreignKey?: string[] | undefined;
                        select?: any | undefined;
                    }[] | undefined;
                }[] | undefined;
            } & {
                selects?: ({
                    tablename?: string | undefined;
                    where?: string | undefined;
                    include?: {
                        foreignKey?: string[] | undefined;
                        select?: any | undefined;
                    }[] | undefined;
                }[] & ({
                    tablename?: string | undefined;
                    where?: string | undefined;
                    include?: {
                        foreignKey?: string[] | undefined;
                        select?: any | undefined;
                    }[] | undefined;
                } & {
                    tablename?: string | undefined;
                    where?: string | undefined;
                    include?: ({
                        foreignKey?: string[] | undefined;
                        select?: any | undefined;
                    }[] & ({
                        foreignKey?: string[] | undefined;
                        select?: any | undefined;
                    } & {
                        foreignKey?: (string[] & string[] & { [K_22 in Exclude<keyof I_1["shapeRequests"][number]["shapeDefinition"]["selects"][number]["include"][number]["foreignKey"], "$type" | keyof string[]>]: never; }) | undefined;
                        select?: ({
                            tablename?: string | undefined;
                            where?: string | undefined;
                            include?: {
                                foreignKey?: string[] | undefined;
                                select?: any | undefined;
                            }[] | undefined;
                        } & {
                            tablename?: string | undefined;
                            where?: string | undefined;
                            include?: ({
                                foreignKey?: string[] | undefined;
                                select?: any | undefined;
                            }[] & ({
                                foreignKey?: string[] | undefined;
                                select?: any | undefined;
                            } & {
                                foreignKey?: (string[] & string[] & { [K_23 in Exclude<keyof I_1["shapeRequests"][number]["shapeDefinition"]["selects"][number]["include"][number]["select"]["include"][number]["foreignKey"], "$type" | keyof string[]>]: never; }) | undefined;
                                select?: ({
                                    tablename?: string | undefined;
                                    where?: string | undefined;
                                    include?: {
                                        foreignKey?: string[] | undefined;
                                        select?: any | undefined;
                                    }[] | undefined;
                                } & {
                                    tablename?: string | undefined;
                                    where?: string | undefined;
                                    include?: ({
                                        foreignKey?: string[] | undefined;
                                        select?: any | undefined;
                                    }[] & ({
                                        foreignKey?: string[] | undefined;
                                        select?: any | undefined;
                                    } & {
                                        foreignKey?: (string[] & string[] & { [K_24 in Exclude<keyof I_1["shapeRequests"][number]["shapeDefinition"]["selects"][number]["include"][number]["select"]["include"][number]["select"]["include"][number]["foreignKey"], "$type" | keyof string[]>]: never; }) | undefined;
                                        select?: ({
                                            tablename?: string | undefined;
                                            where?: string | undefined;
                                            include?: {
                                                foreignKey?: string[] | undefined;
                                                select?: any | undefined;
                                            }[] | undefined;
                                        } & {
                                            tablename?: string | undefined;
                                            where?: string | undefined;
                                            include?: ({
                                                foreignKey?: string[] | undefined;
                                                select?: any | undefined;
                                            }[] & ({
                                                foreignKey?: string[] | undefined;
                                                select?: any | undefined;
                                            } & {
                                                foreignKey?: (string[] & string[] & { [K_25 in Exclude<keyof I_1["shapeRequests"][number]["shapeDefinition"]["selects"][number]["include"][number]["select"]["include"][number]["select"]["include"][number]["select"]["include"][number]["foreignKey"], "$type" | keyof string[]>]: never; }) | undefined;
                                                select?: ({
                                                    tablename?: string | undefined;
                                                    where?: string | undefined;
                                                    include?: {
                                                        foreignKey?: string[] | undefined;
                                                        select?: any | undefined;
                                                    }[] | undefined;
                                                } & any & { [K_26 in Exclude<keyof I_1["shapeRequests"][number]["shapeDefinition"]["selects"][number]["include"][number]["select"]["include"][number]["select"]["include"][number]["select"]["include"][number]["select"], "$type" | "tablename" | "where" | "include">]: never; }) | undefined;
                                            } & { [K_27 in Exclude<keyof I_1["shapeRequests"][number]["shapeDefinition"]["selects"][number]["include"][number]["select"]["include"][number]["select"]["include"][number]["select"]["include"][number], "$type" | "foreignKey" | "select">]: never; })[] & { [K_28 in Exclude<keyof I_1["shapeRequests"][number]["shapeDefinition"]["selects"][number]["include"][number]["select"]["include"][number]["select"]["include"][number]["select"]["include"], "$type" | keyof {
                                                foreignKey?: string[] | undefined;
                                                select?: any | undefined;
                                            }[]>]: never; }) | undefined;
                                        } & { [K_29 in Exclude<keyof I_1["shapeRequests"][number]["shapeDefinition"]["selects"][number]["include"][number]["select"]["include"][number]["select"]["include"][number]["select"], "$type" | "tablename" | "where" | "include">]: never; }) | undefined;
                                    } & { [K_30 in Exclude<keyof I_1["shapeRequests"][number]["shapeDefinition"]["selects"][number]["include"][number]["select"]["include"][number]["select"]["include"][number], "$type" | "foreignKey" | "select">]: never; })[] & { [K_31 in Exclude<keyof I_1["shapeRequests"][number]["shapeDefinition"]["selects"][number]["include"][number]["select"]["include"][number]["select"]["include"], "$type" | keyof {
                                        foreignKey?: string[] | undefined;
                                        select?: any | undefined;
                                    }[]>]: never; }) | undefined;
                                } & { [K_32 in Exclude<keyof I_1["shapeRequests"][number]["shapeDefinition"]["selects"][number]["include"][number]["select"]["include"][number]["select"], "$type" | "tablename" | "where" | "include">]: never; }) | undefined;
                            } & { [K_33 in Exclude<keyof I_1["shapeRequests"][number]["shapeDefinition"]["selects"][number]["include"][number]["select"]["include"][number], "$type" | "foreignKey" | "select">]: never; })[] & { [K_34 in Exclude<keyof I_1["shapeRequests"][number]["shapeDefinition"]["selects"][number]["include"][number]["select"]["include"], "$type" | keyof {
                                foreignKey?: string[] | undefined;
                                select?: any | undefined;
                            }[]>]: never; }) | undefined;
                        } & { [K_35 in Exclude<keyof I_1["shapeRequests"][number]["shapeDefinition"]["selects"][number]["include"][number]["select"], "$type" | "tablename" | "where" | "include">]: never; }) | undefined;
                    } & { [K_36 in Exclude<keyof I_1["shapeRequests"][number]["shapeDefinition"]["selects"][number]["include"][number], "$type" | "foreignKey" | "select">]: never; })[] & { [K_37 in Exclude<keyof I_1["shapeRequests"][number]["shapeDefinition"]["selects"][number]["include"], "$type" | keyof {
                        foreignKey?: string[] | undefined;
                        select?: any | undefined;
                    }[]>]: never; }) | undefined;
                } & { [K_38 in Exclude<keyof I_1["shapeRequests"][number]["shapeDefinition"]["selects"][number], "$type" | "tablename" | "where" | "include">]: never; })[] & { [K_39 in Exclude<keyof I_1["shapeRequests"][number]["shapeDefinition"]["selects"], "$type" | keyof {
                    tablename?: string | undefined;
                    where?: string | undefined;
                    include?: {
                        foreignKey?: string[] | undefined;
                        select?: any | undefined;
                    }[] | undefined;
                }[]>]: never; }) | undefined;
            } & { [K_40 in Exclude<keyof I_1["shapeRequests"][number]["shapeDefinition"], "$type" | "selects">]: never; }) | undefined;
        } & { [K_41 in Exclude<keyof I_1["shapeRequests"][number], "$type" | "requestId" | "shapeDefinition">]: never; })[] & { [K_42 in Exclude<keyof I_1["shapeRequests"], "$type" | keyof {
            requestId?: string | undefined;
            shapeDefinition?: {
                selects?: {
                    tablename?: string | undefined;
                    where?: string | undefined;
                    include?: {
                        foreignKey?: string[] | undefined;
                        select?: any | undefined;
                    }[] | undefined;
                }[] | undefined;
            } | undefined;
        }[]>]: never; }) | undefined;
    } & { [K_43 in Exclude<keyof I_1, "$type" | "subscriptionId" | "shapeRequests">]: never; }>(object: I_1): SatSubsReq;
};
export declare const SatSubsResp: {
    $type: "Electric.Satellite.SatSubsResp";
    encode(message: SatSubsResp, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): SatSubsResp;
    create<I extends {
        err?: {
            message?: string | undefined;
            code?: SatSubsResp_SatSubsError_Code | undefined;
            shapeRequestError?: {
                requestId?: string | undefined;
                message?: string | undefined;
                code?: SatSubsResp_SatSubsError_ShapeReqError_Code | undefined;
            }[] | undefined;
        } | undefined;
        subscriptionId?: string | undefined;
    } & {
        err?: ({
            message?: string | undefined;
            code?: SatSubsResp_SatSubsError_Code | undefined;
            shapeRequestError?: {
                requestId?: string | undefined;
                message?: string | undefined;
                code?: SatSubsResp_SatSubsError_ShapeReqError_Code | undefined;
            }[] | undefined;
        } & {
            message?: string | undefined;
            code?: SatSubsResp_SatSubsError_Code | undefined;
            shapeRequestError?: ({
                requestId?: string | undefined;
                message?: string | undefined;
                code?: SatSubsResp_SatSubsError_ShapeReqError_Code | undefined;
            }[] & ({
                requestId?: string | undefined;
                message?: string | undefined;
                code?: SatSubsResp_SatSubsError_ShapeReqError_Code | undefined;
            } & {
                requestId?: string | undefined;
                message?: string | undefined;
                code?: SatSubsResp_SatSubsError_ShapeReqError_Code | undefined;
            } & { [K in Exclude<keyof I["err"]["shapeRequestError"][number], "$type" | "requestId" | "message" | "code">]: never; })[] & { [K_1 in Exclude<keyof I["err"]["shapeRequestError"], "$type" | keyof {
                requestId?: string | undefined;
                message?: string | undefined;
                code?: SatSubsResp_SatSubsError_ShapeReqError_Code | undefined;
            }[]>]: never; }) | undefined;
        } & { [K_2 in Exclude<keyof I["err"], "$type" | "message" | "code" | "shapeRequestError">]: never; }) | undefined;
        subscriptionId?: string | undefined;
    } & { [K_3 in Exclude<keyof I, "$type" | "err" | "subscriptionId">]: never; }>(base?: I): SatSubsResp;
    fromPartial<I_1 extends {
        err?: {
            message?: string | undefined;
            code?: SatSubsResp_SatSubsError_Code | undefined;
            shapeRequestError?: {
                requestId?: string | undefined;
                message?: string | undefined;
                code?: SatSubsResp_SatSubsError_ShapeReqError_Code | undefined;
            }[] | undefined;
        } | undefined;
        subscriptionId?: string | undefined;
    } & {
        err?: ({
            message?: string | undefined;
            code?: SatSubsResp_SatSubsError_Code | undefined;
            shapeRequestError?: {
                requestId?: string | undefined;
                message?: string | undefined;
                code?: SatSubsResp_SatSubsError_ShapeReqError_Code | undefined;
            }[] | undefined;
        } & {
            message?: string | undefined;
            code?: SatSubsResp_SatSubsError_Code | undefined;
            shapeRequestError?: ({
                requestId?: string | undefined;
                message?: string | undefined;
                code?: SatSubsResp_SatSubsError_ShapeReqError_Code | undefined;
            }[] & ({
                requestId?: string | undefined;
                message?: string | undefined;
                code?: SatSubsResp_SatSubsError_ShapeReqError_Code | undefined;
            } & {
                requestId?: string | undefined;
                message?: string | undefined;
                code?: SatSubsResp_SatSubsError_ShapeReqError_Code | undefined;
            } & { [K_4 in Exclude<keyof I_1["err"]["shapeRequestError"][number], "$type" | "requestId" | "message" | "code">]: never; })[] & { [K_5 in Exclude<keyof I_1["err"]["shapeRequestError"], "$type" | keyof {
                requestId?: string | undefined;
                message?: string | undefined;
                code?: SatSubsResp_SatSubsError_ShapeReqError_Code | undefined;
            }[]>]: never; }) | undefined;
        } & { [K_6 in Exclude<keyof I_1["err"], "$type" | "message" | "code" | "shapeRequestError">]: never; }) | undefined;
        subscriptionId?: string | undefined;
    } & { [K_7 in Exclude<keyof I_1, "$type" | "err" | "subscriptionId">]: never; }>(object: I_1): SatSubsResp;
};
export declare const SatSubsResp_SatSubsError: {
    $type: "Electric.Satellite.SatSubsResp.SatSubsError";
    encode(message: SatSubsResp_SatSubsError, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): SatSubsResp_SatSubsError;
    create<I extends {
        message?: string | undefined;
        code?: SatSubsResp_SatSubsError_Code | undefined;
        shapeRequestError?: {
            requestId?: string | undefined;
            message?: string | undefined;
            code?: SatSubsResp_SatSubsError_ShapeReqError_Code | undefined;
        }[] | undefined;
    } & {
        message?: string | undefined;
        code?: SatSubsResp_SatSubsError_Code | undefined;
        shapeRequestError?: ({
            requestId?: string | undefined;
            message?: string | undefined;
            code?: SatSubsResp_SatSubsError_ShapeReqError_Code | undefined;
        }[] & ({
            requestId?: string | undefined;
            message?: string | undefined;
            code?: SatSubsResp_SatSubsError_ShapeReqError_Code | undefined;
        } & {
            requestId?: string | undefined;
            message?: string | undefined;
            code?: SatSubsResp_SatSubsError_ShapeReqError_Code | undefined;
        } & { [K in Exclude<keyof I["shapeRequestError"][number], "$type" | "requestId" | "message" | "code">]: never; })[] & { [K_1 in Exclude<keyof I["shapeRequestError"], "$type" | keyof {
            requestId?: string | undefined;
            message?: string | undefined;
            code?: SatSubsResp_SatSubsError_ShapeReqError_Code | undefined;
        }[]>]: never; }) | undefined;
    } & { [K_2 in Exclude<keyof I, "$type" | "message" | "code" | "shapeRequestError">]: never; }>(base?: I): SatSubsResp_SatSubsError;
    fromPartial<I_1 extends {
        message?: string | undefined;
        code?: SatSubsResp_SatSubsError_Code | undefined;
        shapeRequestError?: {
            requestId?: string | undefined;
            message?: string | undefined;
            code?: SatSubsResp_SatSubsError_ShapeReqError_Code | undefined;
        }[] | undefined;
    } & {
        message?: string | undefined;
        code?: SatSubsResp_SatSubsError_Code | undefined;
        shapeRequestError?: ({
            requestId?: string | undefined;
            message?: string | undefined;
            code?: SatSubsResp_SatSubsError_ShapeReqError_Code | undefined;
        }[] & ({
            requestId?: string | undefined;
            message?: string | undefined;
            code?: SatSubsResp_SatSubsError_ShapeReqError_Code | undefined;
        } & {
            requestId?: string | undefined;
            message?: string | undefined;
            code?: SatSubsResp_SatSubsError_ShapeReqError_Code | undefined;
        } & { [K_3 in Exclude<keyof I_1["shapeRequestError"][number], "$type" | "requestId" | "message" | "code">]: never; })[] & { [K_4 in Exclude<keyof I_1["shapeRequestError"], "$type" | keyof {
            requestId?: string | undefined;
            message?: string | undefined;
            code?: SatSubsResp_SatSubsError_ShapeReqError_Code | undefined;
        }[]>]: never; }) | undefined;
    } & { [K_5 in Exclude<keyof I_1, "$type" | "message" | "code" | "shapeRequestError">]: never; }>(object: I_1): SatSubsResp_SatSubsError;
};
export declare const SatSubsResp_SatSubsError_ShapeReqError: {
    $type: "Electric.Satellite.SatSubsResp.SatSubsError.ShapeReqError";
    encode(message: SatSubsResp_SatSubsError_ShapeReqError, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): SatSubsResp_SatSubsError_ShapeReqError;
    create<I extends {
        requestId?: string | undefined;
        message?: string | undefined;
        code?: SatSubsResp_SatSubsError_ShapeReqError_Code | undefined;
    } & {
        requestId?: string | undefined;
        message?: string | undefined;
        code?: SatSubsResp_SatSubsError_ShapeReqError_Code | undefined;
    } & { [K in Exclude<keyof I, "$type" | "requestId" | "message" | "code">]: never; }>(base?: I): SatSubsResp_SatSubsError_ShapeReqError;
    fromPartial<I_1 extends {
        requestId?: string | undefined;
        message?: string | undefined;
        code?: SatSubsResp_SatSubsError_ShapeReqError_Code | undefined;
    } & {
        requestId?: string | undefined;
        message?: string | undefined;
        code?: SatSubsResp_SatSubsError_ShapeReqError_Code | undefined;
    } & { [K_1 in Exclude<keyof I_1, "$type" | "requestId" | "message" | "code">]: never; }>(object: I_1): SatSubsResp_SatSubsError_ShapeReqError;
};
export declare const SatUnsubsReq: {
    $type: "Electric.Satellite.SatUnsubsReq";
    encode(message: SatUnsubsReq, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): SatUnsubsReq;
    create<I extends {
        subscriptionIds?: string[] | undefined;
    } & {
        subscriptionIds?: (string[] & string[] & { [K in Exclude<keyof I["subscriptionIds"], "$type" | keyof string[]>]: never; }) | undefined;
    } & { [K_1 in Exclude<keyof I, "$type" | "subscriptionIds">]: never; }>(base?: I): SatUnsubsReq;
    fromPartial<I_1 extends {
        subscriptionIds?: string[] | undefined;
    } & {
        subscriptionIds?: (string[] & string[] & { [K_2 in Exclude<keyof I_1["subscriptionIds"], "$type" | keyof string[]>]: never; }) | undefined;
    } & { [K_3 in Exclude<keyof I_1, "$type" | "subscriptionIds">]: never; }>(object: I_1): SatUnsubsReq;
};
export declare const SatUnsubsResp: {
    $type: "Electric.Satellite.SatUnsubsResp";
    encode(_: SatUnsubsResp, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): SatUnsubsResp;
    create<I extends {} & {} & { [K in Exclude<keyof I, "$type">]: never; }>(base?: I): SatUnsubsResp;
    fromPartial<I_1 extends {} & {} & { [K_1 in Exclude<keyof I_1, "$type">]: never; }>(_: I_1): SatUnsubsResp;
};
export declare const SatShapeReq: {
    $type: "Electric.Satellite.SatShapeReq";
    encode(message: SatShapeReq, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): SatShapeReq;
    create<I extends {
        requestId?: string | undefined;
        shapeDefinition?: {
            selects?: {
                tablename?: string | undefined;
                where?: string | undefined;
                include?: {
                    foreignKey?: string[] | undefined;
                    select?: any | undefined;
                }[] | undefined;
            }[] | undefined;
        } | undefined;
    } & {
        requestId?: string | undefined;
        shapeDefinition?: ({
            selects?: {
                tablename?: string | undefined;
                where?: string | undefined;
                include?: {
                    foreignKey?: string[] | undefined;
                    select?: any | undefined;
                }[] | undefined;
            }[] | undefined;
        } & {
            selects?: ({
                tablename?: string | undefined;
                where?: string | undefined;
                include?: {
                    foreignKey?: string[] | undefined;
                    select?: any | undefined;
                }[] | undefined;
            }[] & ({
                tablename?: string | undefined;
                where?: string | undefined;
                include?: {
                    foreignKey?: string[] | undefined;
                    select?: any | undefined;
                }[] | undefined;
            } & {
                tablename?: string | undefined;
                where?: string | undefined;
                include?: ({
                    foreignKey?: string[] | undefined;
                    select?: any | undefined;
                }[] & ({
                    foreignKey?: string[] | undefined;
                    select?: any | undefined;
                } & {
                    foreignKey?: (string[] & string[] & { [K in Exclude<keyof I["shapeDefinition"]["selects"][number]["include"][number]["foreignKey"], "$type" | keyof string[]>]: never; }) | undefined;
                    select?: ({
                        tablename?: string | undefined;
                        where?: string | undefined;
                        include?: {
                            foreignKey?: string[] | undefined;
                            select?: any | undefined;
                        }[] | undefined;
                    } & {
                        tablename?: string | undefined;
                        where?: string | undefined;
                        include?: ({
                            foreignKey?: string[] | undefined;
                            select?: any | undefined;
                        }[] & ({
                            foreignKey?: string[] | undefined;
                            select?: any | undefined;
                        } & {
                            foreignKey?: (string[] & string[] & { [K_1 in Exclude<keyof I["shapeDefinition"]["selects"][number]["include"][number]["select"]["include"][number]["foreignKey"], "$type" | keyof string[]>]: never; }) | undefined;
                            select?: ({
                                tablename?: string | undefined;
                                where?: string | undefined;
                                include?: {
                                    foreignKey?: string[] | undefined;
                                    select?: any | undefined;
                                }[] | undefined;
                            } & {
                                tablename?: string | undefined;
                                where?: string | undefined;
                                include?: ({
                                    foreignKey?: string[] | undefined;
                                    select?: any | undefined;
                                }[] & ({
                                    foreignKey?: string[] | undefined;
                                    select?: any | undefined;
                                } & {
                                    foreignKey?: (string[] & string[] & { [K_2 in Exclude<keyof I["shapeDefinition"]["selects"][number]["include"][number]["select"]["include"][number]["select"]["include"][number]["foreignKey"], "$type" | keyof string[]>]: never; }) | undefined;
                                    select?: ({
                                        tablename?: string | undefined;
                                        where?: string | undefined;
                                        include?: {
                                            foreignKey?: string[] | undefined;
                                            select?: any | undefined;
                                        }[] | undefined;
                                    } & {
                                        tablename?: string | undefined;
                                        where?: string | undefined;
                                        include?: ({
                                            foreignKey?: string[] | undefined;
                                            select?: any | undefined;
                                        }[] & ({
                                            foreignKey?: string[] | undefined;
                                            select?: any | undefined;
                                        } & {
                                            foreignKey?: (string[] & string[] & { [K_3 in Exclude<keyof I["shapeDefinition"]["selects"][number]["include"][number]["select"]["include"][number]["select"]["include"][number]["select"]["include"][number]["foreignKey"], "$type" | keyof string[]>]: never; }) | undefined;
                                            select?: ({
                                                tablename?: string | undefined;
                                                where?: string | undefined;
                                                include?: {
                                                    foreignKey?: string[] | undefined;
                                                    select?: any | undefined;
                                                }[] | undefined;
                                            } & {
                                                tablename?: string | undefined;
                                                where?: string | undefined;
                                                include?: ({
                                                    foreignKey?: string[] | undefined;
                                                    select?: any | undefined;
                                                }[] & ({
                                                    foreignKey?: string[] | undefined;
                                                    select?: any | undefined;
                                                } & any & { [K_4 in Exclude<keyof I["shapeDefinition"]["selects"][number]["include"][number]["select"]["include"][number]["select"]["include"][number]["select"]["include"][number]["select"]["include"][number], "$type" | "foreignKey" | "select">]: never; })[] & { [K_5 in Exclude<keyof I["shapeDefinition"]["selects"][number]["include"][number]["select"]["include"][number]["select"]["include"][number]["select"]["include"][number]["select"]["include"], "$type" | keyof {
                                                    foreignKey?: string[] | undefined;
                                                    select?: any | undefined;
                                                }[]>]: never; }) | undefined;
                                            } & { [K_6 in Exclude<keyof I["shapeDefinition"]["selects"][number]["include"][number]["select"]["include"][number]["select"]["include"][number]["select"]["include"][number]["select"], "$type" | "tablename" | "where" | "include">]: never; }) | undefined;
                                        } & { [K_7 in Exclude<keyof I["shapeDefinition"]["selects"][number]["include"][number]["select"]["include"][number]["select"]["include"][number]["select"]["include"][number], "$type" | "foreignKey" | "select">]: never; })[] & { [K_8 in Exclude<keyof I["shapeDefinition"]["selects"][number]["include"][number]["select"]["include"][number]["select"]["include"][number]["select"]["include"], "$type" | keyof {
                                            foreignKey?: string[] | undefined;
                                            select?: any | undefined;
                                        }[]>]: never; }) | undefined;
                                    } & { [K_9 in Exclude<keyof I["shapeDefinition"]["selects"][number]["include"][number]["select"]["include"][number]["select"]["include"][number]["select"], "$type" | "tablename" | "where" | "include">]: never; }) | undefined;
                                } & { [K_10 in Exclude<keyof I["shapeDefinition"]["selects"][number]["include"][number]["select"]["include"][number]["select"]["include"][number], "$type" | "foreignKey" | "select">]: never; })[] & { [K_11 in Exclude<keyof I["shapeDefinition"]["selects"][number]["include"][number]["select"]["include"][number]["select"]["include"], "$type" | keyof {
                                    foreignKey?: string[] | undefined;
                                    select?: any | undefined;
                                }[]>]: never; }) | undefined;
                            } & { [K_12 in Exclude<keyof I["shapeDefinition"]["selects"][number]["include"][number]["select"]["include"][number]["select"], "$type" | "tablename" | "where" | "include">]: never; }) | undefined;
                        } & { [K_13 in Exclude<keyof I["shapeDefinition"]["selects"][number]["include"][number]["select"]["include"][number], "$type" | "foreignKey" | "select">]: never; })[] & { [K_14 in Exclude<keyof I["shapeDefinition"]["selects"][number]["include"][number]["select"]["include"], "$type" | keyof {
                            foreignKey?: string[] | undefined;
                            select?: any | undefined;
                        }[]>]: never; }) | undefined;
                    } & { [K_15 in Exclude<keyof I["shapeDefinition"]["selects"][number]["include"][number]["select"], "$type" | "tablename" | "where" | "include">]: never; }) | undefined;
                } & { [K_16 in Exclude<keyof I["shapeDefinition"]["selects"][number]["include"][number], "$type" | "foreignKey" | "select">]: never; })[] & { [K_17 in Exclude<keyof I["shapeDefinition"]["selects"][number]["include"], "$type" | keyof {
                    foreignKey?: string[] | undefined;
                    select?: any | undefined;
                }[]>]: never; }) | undefined;
            } & { [K_18 in Exclude<keyof I["shapeDefinition"]["selects"][number], "$type" | "tablename" | "where" | "include">]: never; })[] & { [K_19 in Exclude<keyof I["shapeDefinition"]["selects"], "$type" | keyof {
                tablename?: string | undefined;
                where?: string | undefined;
                include?: {
                    foreignKey?: string[] | undefined;
                    select?: any | undefined;
                }[] | undefined;
            }[]>]: never; }) | undefined;
        } & { [K_20 in Exclude<keyof I["shapeDefinition"], "$type" | "selects">]: never; }) | undefined;
    } & { [K_21 in Exclude<keyof I, "$type" | "requestId" | "shapeDefinition">]: never; }>(base?: I): SatShapeReq;
    fromPartial<I_1 extends {
        requestId?: string | undefined;
        shapeDefinition?: {
            selects?: {
                tablename?: string | undefined;
                where?: string | undefined;
                include?: {
                    foreignKey?: string[] | undefined;
                    select?: any | undefined;
                }[] | undefined;
            }[] | undefined;
        } | undefined;
    } & {
        requestId?: string | undefined;
        shapeDefinition?: ({
            selects?: {
                tablename?: string | undefined;
                where?: string | undefined;
                include?: {
                    foreignKey?: string[] | undefined;
                    select?: any | undefined;
                }[] | undefined;
            }[] | undefined;
        } & {
            selects?: ({
                tablename?: string | undefined;
                where?: string | undefined;
                include?: {
                    foreignKey?: string[] | undefined;
                    select?: any | undefined;
                }[] | undefined;
            }[] & ({
                tablename?: string | undefined;
                where?: string | undefined;
                include?: {
                    foreignKey?: string[] | undefined;
                    select?: any | undefined;
                }[] | undefined;
            } & {
                tablename?: string | undefined;
                where?: string | undefined;
                include?: ({
                    foreignKey?: string[] | undefined;
                    select?: any | undefined;
                }[] & ({
                    foreignKey?: string[] | undefined;
                    select?: any | undefined;
                } & {
                    foreignKey?: (string[] & string[] & { [K_22 in Exclude<keyof I_1["shapeDefinition"]["selects"][number]["include"][number]["foreignKey"], "$type" | keyof string[]>]: never; }) | undefined;
                    select?: ({
                        tablename?: string | undefined;
                        where?: string | undefined;
                        include?: {
                            foreignKey?: string[] | undefined;
                            select?: any | undefined;
                        }[] | undefined;
                    } & {
                        tablename?: string | undefined;
                        where?: string | undefined;
                        include?: ({
                            foreignKey?: string[] | undefined;
                            select?: any | undefined;
                        }[] & ({
                            foreignKey?: string[] | undefined;
                            select?: any | undefined;
                        } & {
                            foreignKey?: (string[] & string[] & { [K_23 in Exclude<keyof I_1["shapeDefinition"]["selects"][number]["include"][number]["select"]["include"][number]["foreignKey"], "$type" | keyof string[]>]: never; }) | undefined;
                            select?: ({
                                tablename?: string | undefined;
                                where?: string | undefined;
                                include?: {
                                    foreignKey?: string[] | undefined;
                                    select?: any | undefined;
                                }[] | undefined;
                            } & {
                                tablename?: string | undefined;
                                where?: string | undefined;
                                include?: ({
                                    foreignKey?: string[] | undefined;
                                    select?: any | undefined;
                                }[] & ({
                                    foreignKey?: string[] | undefined;
                                    select?: any | undefined;
                                } & {
                                    foreignKey?: (string[] & string[] & { [K_24 in Exclude<keyof I_1["shapeDefinition"]["selects"][number]["include"][number]["select"]["include"][number]["select"]["include"][number]["foreignKey"], "$type" | keyof string[]>]: never; }) | undefined;
                                    select?: ({
                                        tablename?: string | undefined;
                                        where?: string | undefined;
                                        include?: {
                                            foreignKey?: string[] | undefined;
                                            select?: any | undefined;
                                        }[] | undefined;
                                    } & {
                                        tablename?: string | undefined;
                                        where?: string | undefined;
                                        include?: ({
                                            foreignKey?: string[] | undefined;
                                            select?: any | undefined;
                                        }[] & ({
                                            foreignKey?: string[] | undefined;
                                            select?: any | undefined;
                                        } & {
                                            foreignKey?: (string[] & string[] & { [K_25 in Exclude<keyof I_1["shapeDefinition"]["selects"][number]["include"][number]["select"]["include"][number]["select"]["include"][number]["select"]["include"][number]["foreignKey"], "$type" | keyof string[]>]: never; }) | undefined;
                                            select?: ({
                                                tablename?: string | undefined;
                                                where?: string | undefined;
                                                include?: {
                                                    foreignKey?: string[] | undefined;
                                                    select?: any | undefined;
                                                }[] | undefined;
                                            } & {
                                                tablename?: string | undefined;
                                                where?: string | undefined;
                                                include?: ({
                                                    foreignKey?: string[] | undefined;
                                                    select?: any | undefined;
                                                }[] & ({
                                                    foreignKey?: string[] | undefined;
                                                    select?: any | undefined;
                                                } & any & { [K_26 in Exclude<keyof I_1["shapeDefinition"]["selects"][number]["include"][number]["select"]["include"][number]["select"]["include"][number]["select"]["include"][number]["select"]["include"][number], "$type" | "foreignKey" | "select">]: never; })[] & { [K_27 in Exclude<keyof I_1["shapeDefinition"]["selects"][number]["include"][number]["select"]["include"][number]["select"]["include"][number]["select"]["include"][number]["select"]["include"], "$type" | keyof {
                                                    foreignKey?: string[] | undefined;
                                                    select?: any | undefined;
                                                }[]>]: never; }) | undefined;
                                            } & { [K_28 in Exclude<keyof I_1["shapeDefinition"]["selects"][number]["include"][number]["select"]["include"][number]["select"]["include"][number]["select"]["include"][number]["select"], "$type" | "tablename" | "where" | "include">]: never; }) | undefined;
                                        } & { [K_29 in Exclude<keyof I_1["shapeDefinition"]["selects"][number]["include"][number]["select"]["include"][number]["select"]["include"][number]["select"]["include"][number], "$type" | "foreignKey" | "select">]: never; })[] & { [K_30 in Exclude<keyof I_1["shapeDefinition"]["selects"][number]["include"][number]["select"]["include"][number]["select"]["include"][number]["select"]["include"], "$type" | keyof {
                                            foreignKey?: string[] | undefined;
                                            select?: any | undefined;
                                        }[]>]: never; }) | undefined;
                                    } & { [K_31 in Exclude<keyof I_1["shapeDefinition"]["selects"][number]["include"][number]["select"]["include"][number]["select"]["include"][number]["select"], "$type" | "tablename" | "where" | "include">]: never; }) | undefined;
                                } & { [K_32 in Exclude<keyof I_1["shapeDefinition"]["selects"][number]["include"][number]["select"]["include"][number]["select"]["include"][number], "$type" | "foreignKey" | "select">]: never; })[] & { [K_33 in Exclude<keyof I_1["shapeDefinition"]["selects"][number]["include"][number]["select"]["include"][number]["select"]["include"], "$type" | keyof {
                                    foreignKey?: string[] | undefined;
                                    select?: any | undefined;
                                }[]>]: never; }) | undefined;
                            } & { [K_34 in Exclude<keyof I_1["shapeDefinition"]["selects"][number]["include"][number]["select"]["include"][number]["select"], "$type" | "tablename" | "where" | "include">]: never; }) | undefined;
                        } & { [K_35 in Exclude<keyof I_1["shapeDefinition"]["selects"][number]["include"][number]["select"]["include"][number], "$type" | "foreignKey" | "select">]: never; })[] & { [K_36 in Exclude<keyof I_1["shapeDefinition"]["selects"][number]["include"][number]["select"]["include"], "$type" | keyof {
                            foreignKey?: string[] | undefined;
                            select?: any | undefined;
                        }[]>]: never; }) | undefined;
                    } & { [K_37 in Exclude<keyof I_1["shapeDefinition"]["selects"][number]["include"][number]["select"], "$type" | "tablename" | "where" | "include">]: never; }) | undefined;
                } & { [K_38 in Exclude<keyof I_1["shapeDefinition"]["selects"][number]["include"][number], "$type" | "foreignKey" | "select">]: never; })[] & { [K_39 in Exclude<keyof I_1["shapeDefinition"]["selects"][number]["include"], "$type" | keyof {
                    foreignKey?: string[] | undefined;
                    select?: any | undefined;
                }[]>]: never; }) | undefined;
            } & { [K_40 in Exclude<keyof I_1["shapeDefinition"]["selects"][number], "$type" | "tablename" | "where" | "include">]: never; })[] & { [K_41 in Exclude<keyof I_1["shapeDefinition"]["selects"], "$type" | keyof {
                tablename?: string | undefined;
                where?: string | undefined;
                include?: {
                    foreignKey?: string[] | undefined;
                    select?: any | undefined;
                }[] | undefined;
            }[]>]: never; }) | undefined;
        } & { [K_42 in Exclude<keyof I_1["shapeDefinition"], "$type" | "selects">]: never; }) | undefined;
    } & { [K_43 in Exclude<keyof I_1, "$type" | "requestId" | "shapeDefinition">]: never; }>(object: I_1): SatShapeReq;
};
export declare const SatShapeDef: {
    $type: "Electric.Satellite.SatShapeDef";
    encode(message: SatShapeDef, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): SatShapeDef;
    create<I extends {
        selects?: {
            tablename?: string | undefined;
            where?: string | undefined;
            include?: {
                foreignKey?: string[] | undefined;
                select?: any | undefined;
            }[] | undefined;
        }[] | undefined;
    } & {
        selects?: ({
            tablename?: string | undefined;
            where?: string | undefined;
            include?: {
                foreignKey?: string[] | undefined;
                select?: any | undefined;
            }[] | undefined;
        }[] & ({
            tablename?: string | undefined;
            where?: string | undefined;
            include?: {
                foreignKey?: string[] | undefined;
                select?: any | undefined;
            }[] | undefined;
        } & {
            tablename?: string | undefined;
            where?: string | undefined;
            include?: ({
                foreignKey?: string[] | undefined;
                select?: any | undefined;
            }[] & ({
                foreignKey?: string[] | undefined;
                select?: any | undefined;
            } & {
                foreignKey?: (string[] & string[] & { [K in Exclude<keyof I["selects"][number]["include"][number]["foreignKey"], "$type" | keyof string[]>]: never; }) | undefined;
                select?: ({
                    tablename?: string | undefined;
                    where?: string | undefined;
                    include?: {
                        foreignKey?: string[] | undefined;
                        select?: any | undefined;
                    }[] | undefined;
                } & {
                    tablename?: string | undefined;
                    where?: string | undefined;
                    include?: ({
                        foreignKey?: string[] | undefined;
                        select?: any | undefined;
                    }[] & ({
                        foreignKey?: string[] | undefined;
                        select?: any | undefined;
                    } & {
                        foreignKey?: (string[] & string[] & { [K_1 in Exclude<keyof I["selects"][number]["include"][number]["select"]["include"][number]["foreignKey"], "$type" | keyof string[]>]: never; }) | undefined;
                        select?: ({
                            tablename?: string | undefined;
                            where?: string | undefined;
                            include?: {
                                foreignKey?: string[] | undefined;
                                select?: any | undefined;
                            }[] | undefined;
                        } & {
                            tablename?: string | undefined;
                            where?: string | undefined;
                            include?: ({
                                foreignKey?: string[] | undefined;
                                select?: any | undefined;
                            }[] & ({
                                foreignKey?: string[] | undefined;
                                select?: any | undefined;
                            } & {
                                foreignKey?: (string[] & string[] & { [K_2 in Exclude<keyof I["selects"][number]["include"][number]["select"]["include"][number]["select"]["include"][number]["foreignKey"], "$type" | keyof string[]>]: never; }) | undefined;
                                select?: ({
                                    tablename?: string | undefined;
                                    where?: string | undefined;
                                    include?: {
                                        foreignKey?: string[] | undefined;
                                        select?: any | undefined;
                                    }[] | undefined;
                                } & {
                                    tablename?: string | undefined;
                                    where?: string | undefined;
                                    include?: ({
                                        foreignKey?: string[] | undefined;
                                        select?: any | undefined;
                                    }[] & ({
                                        foreignKey?: string[] | undefined;
                                        select?: any | undefined;
                                    } & {
                                        foreignKey?: (string[] & string[] & { [K_3 in Exclude<keyof I["selects"][number]["include"][number]["select"]["include"][number]["select"]["include"][number]["select"]["include"][number]["foreignKey"], "$type" | keyof string[]>]: never; }) | undefined;
                                        select?: ({
                                            tablename?: string | undefined;
                                            where?: string | undefined;
                                            include?: {
                                                foreignKey?: string[] | undefined;
                                                select?: any | undefined;
                                            }[] | undefined;
                                        } & {
                                            tablename?: string | undefined;
                                            where?: string | undefined;
                                            include?: ({
                                                foreignKey?: string[] | undefined;
                                                select?: any | undefined;
                                            }[] & ({
                                                foreignKey?: string[] | undefined;
                                                select?: any | undefined;
                                            } & {
                                                foreignKey?: (string[] & string[] & { [K_4 in Exclude<keyof I["selects"][number]["include"][number]["select"]["include"][number]["select"]["include"][number]["select"]["include"][number]["select"]["include"][number]["foreignKey"], "$type" | keyof string[]>]: never; }) | undefined;
                                                select?: ({
                                                    tablename?: string | undefined;
                                                    where?: string | undefined;
                                                    include?: {
                                                        foreignKey?: string[] | undefined;
                                                        select?: any | undefined;
                                                    }[] | undefined;
                                                } & any & { [K_5 in Exclude<keyof I["selects"][number]["include"][number]["select"]["include"][number]["select"]["include"][number]["select"]["include"][number]["select"]["include"][number]["select"], "$type" | "tablename" | "where" | "include">]: never; }) | undefined;
                                            } & { [K_6 in Exclude<keyof I["selects"][number]["include"][number]["select"]["include"][number]["select"]["include"][number]["select"]["include"][number]["select"]["include"][number], "$type" | "foreignKey" | "select">]: never; })[] & { [K_7 in Exclude<keyof I["selects"][number]["include"][number]["select"]["include"][number]["select"]["include"][number]["select"]["include"][number]["select"]["include"], "$type" | keyof {
                                                foreignKey?: string[] | undefined;
                                                select?: any | undefined;
                                            }[]>]: never; }) | undefined;
                                        } & { [K_8 in Exclude<keyof I["selects"][number]["include"][number]["select"]["include"][number]["select"]["include"][number]["select"]["include"][number]["select"], "$type" | "tablename" | "where" | "include">]: never; }) | undefined;
                                    } & { [K_9 in Exclude<keyof I["selects"][number]["include"][number]["select"]["include"][number]["select"]["include"][number]["select"]["include"][number], "$type" | "foreignKey" | "select">]: never; })[] & { [K_10 in Exclude<keyof I["selects"][number]["include"][number]["select"]["include"][number]["select"]["include"][number]["select"]["include"], "$type" | keyof {
                                        foreignKey?: string[] | undefined;
                                        select?: any | undefined;
                                    }[]>]: never; }) | undefined;
                                } & { [K_11 in Exclude<keyof I["selects"][number]["include"][number]["select"]["include"][number]["select"]["include"][number]["select"], "$type" | "tablename" | "where" | "include">]: never; }) | undefined;
                            } & { [K_12 in Exclude<keyof I["selects"][number]["include"][number]["select"]["include"][number]["select"]["include"][number], "$type" | "foreignKey" | "select">]: never; })[] & { [K_13 in Exclude<keyof I["selects"][number]["include"][number]["select"]["include"][number]["select"]["include"], "$type" | keyof {
                                foreignKey?: string[] | undefined;
                                select?: any | undefined;
                            }[]>]: never; }) | undefined;
                        } & { [K_14 in Exclude<keyof I["selects"][number]["include"][number]["select"]["include"][number]["select"], "$type" | "tablename" | "where" | "include">]: never; }) | undefined;
                    } & { [K_15 in Exclude<keyof I["selects"][number]["include"][number]["select"]["include"][number], "$type" | "foreignKey" | "select">]: never; })[] & { [K_16 in Exclude<keyof I["selects"][number]["include"][number]["select"]["include"], "$type" | keyof {
                        foreignKey?: string[] | undefined;
                        select?: any | undefined;
                    }[]>]: never; }) | undefined;
                } & { [K_17 in Exclude<keyof I["selects"][number]["include"][number]["select"], "$type" | "tablename" | "where" | "include">]: never; }) | undefined;
            } & { [K_18 in Exclude<keyof I["selects"][number]["include"][number], "$type" | "foreignKey" | "select">]: never; })[] & { [K_19 in Exclude<keyof I["selects"][number]["include"], "$type" | keyof {
                foreignKey?: string[] | undefined;
                select?: any | undefined;
            }[]>]: never; }) | undefined;
        } & { [K_20 in Exclude<keyof I["selects"][number], "$type" | "tablename" | "where" | "include">]: never; })[] & { [K_21 in Exclude<keyof I["selects"], "$type" | keyof {
            tablename?: string | undefined;
            where?: string | undefined;
            include?: {
                foreignKey?: string[] | undefined;
                select?: any | undefined;
            }[] | undefined;
        }[]>]: never; }) | undefined;
    } & { [K_22 in Exclude<keyof I, "$type" | "selects">]: never; }>(base?: I): SatShapeDef;
    fromPartial<I_1 extends {
        selects?: {
            tablename?: string | undefined;
            where?: string | undefined;
            include?: {
                foreignKey?: string[] | undefined;
                select?: any | undefined;
            }[] | undefined;
        }[] | undefined;
    } & {
        selects?: ({
            tablename?: string | undefined;
            where?: string | undefined;
            include?: {
                foreignKey?: string[] | undefined;
                select?: any | undefined;
            }[] | undefined;
        }[] & ({
            tablename?: string | undefined;
            where?: string | undefined;
            include?: {
                foreignKey?: string[] | undefined;
                select?: any | undefined;
            }[] | undefined;
        } & {
            tablename?: string | undefined;
            where?: string | undefined;
            include?: ({
                foreignKey?: string[] | undefined;
                select?: any | undefined;
            }[] & ({
                foreignKey?: string[] | undefined;
                select?: any | undefined;
            } & {
                foreignKey?: (string[] & string[] & { [K_23 in Exclude<keyof I_1["selects"][number]["include"][number]["foreignKey"], "$type" | keyof string[]>]: never; }) | undefined;
                select?: ({
                    tablename?: string | undefined;
                    where?: string | undefined;
                    include?: {
                        foreignKey?: string[] | undefined;
                        select?: any | undefined;
                    }[] | undefined;
                } & {
                    tablename?: string | undefined;
                    where?: string | undefined;
                    include?: ({
                        foreignKey?: string[] | undefined;
                        select?: any | undefined;
                    }[] & ({
                        foreignKey?: string[] | undefined;
                        select?: any | undefined;
                    } & {
                        foreignKey?: (string[] & string[] & { [K_24 in Exclude<keyof I_1["selects"][number]["include"][number]["select"]["include"][number]["foreignKey"], "$type" | keyof string[]>]: never; }) | undefined;
                        select?: ({
                            tablename?: string | undefined;
                            where?: string | undefined;
                            include?: {
                                foreignKey?: string[] | undefined;
                                select?: any | undefined;
                            }[] | undefined;
                        } & {
                            tablename?: string | undefined;
                            where?: string | undefined;
                            include?: ({
                                foreignKey?: string[] | undefined;
                                select?: any | undefined;
                            }[] & ({
                                foreignKey?: string[] | undefined;
                                select?: any | undefined;
                            } & {
                                foreignKey?: (string[] & string[] & { [K_25 in Exclude<keyof I_1["selects"][number]["include"][number]["select"]["include"][number]["select"]["include"][number]["foreignKey"], "$type" | keyof string[]>]: never; }) | undefined;
                                select?: ({
                                    tablename?: string | undefined;
                                    where?: string | undefined;
                                    include?: {
                                        foreignKey?: string[] | undefined;
                                        select?: any | undefined;
                                    }[] | undefined;
                                } & {
                                    tablename?: string | undefined;
                                    where?: string | undefined;
                                    include?: ({
                                        foreignKey?: string[] | undefined;
                                        select?: any | undefined;
                                    }[] & ({
                                        foreignKey?: string[] | undefined;
                                        select?: any | undefined;
                                    } & {
                                        foreignKey?: (string[] & string[] & { [K_26 in Exclude<keyof I_1["selects"][number]["include"][number]["select"]["include"][number]["select"]["include"][number]["select"]["include"][number]["foreignKey"], "$type" | keyof string[]>]: never; }) | undefined;
                                        select?: ({
                                            tablename?: string | undefined;
                                            where?: string | undefined;
                                            include?: {
                                                foreignKey?: string[] | undefined;
                                                select?: any | undefined;
                                            }[] | undefined;
                                        } & {
                                            tablename?: string | undefined;
                                            where?: string | undefined;
                                            include?: ({
                                                foreignKey?: string[] | undefined;
                                                select?: any | undefined;
                                            }[] & ({
                                                foreignKey?: string[] | undefined;
                                                select?: any | undefined;
                                            } & {
                                                foreignKey?: (string[] & string[] & { [K_27 in Exclude<keyof I_1["selects"][number]["include"][number]["select"]["include"][number]["select"]["include"][number]["select"]["include"][number]["select"]["include"][number]["foreignKey"], "$type" | keyof string[]>]: never; }) | undefined;
                                                select?: ({
                                                    tablename?: string | undefined;
                                                    where?: string | undefined;
                                                    include?: {
                                                        foreignKey?: string[] | undefined;
                                                        select?: any | undefined;
                                                    }[] | undefined;
                                                } & any & { [K_28 in Exclude<keyof I_1["selects"][number]["include"][number]["select"]["include"][number]["select"]["include"][number]["select"]["include"][number]["select"]["include"][number]["select"], "$type" | "tablename" | "where" | "include">]: never; }) | undefined;
                                            } & { [K_29 in Exclude<keyof I_1["selects"][number]["include"][number]["select"]["include"][number]["select"]["include"][number]["select"]["include"][number]["select"]["include"][number], "$type" | "foreignKey" | "select">]: never; })[] & { [K_30 in Exclude<keyof I_1["selects"][number]["include"][number]["select"]["include"][number]["select"]["include"][number]["select"]["include"][number]["select"]["include"], "$type" | keyof {
                                                foreignKey?: string[] | undefined;
                                                select?: any | undefined;
                                            }[]>]: never; }) | undefined;
                                        } & { [K_31 in Exclude<keyof I_1["selects"][number]["include"][number]["select"]["include"][number]["select"]["include"][number]["select"]["include"][number]["select"], "$type" | "tablename" | "where" | "include">]: never; }) | undefined;
                                    } & { [K_32 in Exclude<keyof I_1["selects"][number]["include"][number]["select"]["include"][number]["select"]["include"][number]["select"]["include"][number], "$type" | "foreignKey" | "select">]: never; })[] & { [K_33 in Exclude<keyof I_1["selects"][number]["include"][number]["select"]["include"][number]["select"]["include"][number]["select"]["include"], "$type" | keyof {
                                        foreignKey?: string[] | undefined;
                                        select?: any | undefined;
                                    }[]>]: never; }) | undefined;
                                } & { [K_34 in Exclude<keyof I_1["selects"][number]["include"][number]["select"]["include"][number]["select"]["include"][number]["select"], "$type" | "tablename" | "where" | "include">]: never; }) | undefined;
                            } & { [K_35 in Exclude<keyof I_1["selects"][number]["include"][number]["select"]["include"][number]["select"]["include"][number], "$type" | "foreignKey" | "select">]: never; })[] & { [K_36 in Exclude<keyof I_1["selects"][number]["include"][number]["select"]["include"][number]["select"]["include"], "$type" | keyof {
                                foreignKey?: string[] | undefined;
                                select?: any | undefined;
                            }[]>]: never; }) | undefined;
                        } & { [K_37 in Exclude<keyof I_1["selects"][number]["include"][number]["select"]["include"][number]["select"], "$type" | "tablename" | "where" | "include">]: never; }) | undefined;
                    } & { [K_38 in Exclude<keyof I_1["selects"][number]["include"][number]["select"]["include"][number], "$type" | "foreignKey" | "select">]: never; })[] & { [K_39 in Exclude<keyof I_1["selects"][number]["include"][number]["select"]["include"], "$type" | keyof {
                        foreignKey?: string[] | undefined;
                        select?: any | undefined;
                    }[]>]: never; }) | undefined;
                } & { [K_40 in Exclude<keyof I_1["selects"][number]["include"][number]["select"], "$type" | "tablename" | "where" | "include">]: never; }) | undefined;
            } & { [K_41 in Exclude<keyof I_1["selects"][number]["include"][number], "$type" | "foreignKey" | "select">]: never; })[] & { [K_42 in Exclude<keyof I_1["selects"][number]["include"], "$type" | keyof {
                foreignKey?: string[] | undefined;
                select?: any | undefined;
            }[]>]: never; }) | undefined;
        } & { [K_43 in Exclude<keyof I_1["selects"][number], "$type" | "tablename" | "where" | "include">]: never; })[] & { [K_44 in Exclude<keyof I_1["selects"], "$type" | keyof {
            tablename?: string | undefined;
            where?: string | undefined;
            include?: {
                foreignKey?: string[] | undefined;
                select?: any | undefined;
            }[] | undefined;
        }[]>]: never; }) | undefined;
    } & { [K_45 in Exclude<keyof I_1, "$type" | "selects">]: never; }>(object: I_1): SatShapeDef;
};
export declare const SatShapeDef_Relation: {
    $type: "Electric.Satellite.SatShapeDef.Relation";
    encode(message: SatShapeDef_Relation, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): SatShapeDef_Relation;
    create<I extends {
        foreignKey?: string[] | undefined;
        select?: any | undefined;
    } & {
        foreignKey?: (string[] & string[] & { [K in Exclude<keyof I["foreignKey"], "$type" | keyof string[]>]: never; }) | undefined;
        select?: ({
            tablename?: string | undefined;
            where?: string | undefined;
            include?: {
                foreignKey?: string[] | undefined;
                select?: any | undefined;
            }[] | undefined;
        } & {
            tablename?: string | undefined;
            where?: string | undefined;
            include?: ({
                foreignKey?: string[] | undefined;
                select?: any | undefined;
            }[] & ({
                foreignKey?: string[] | undefined;
                select?: any | undefined;
            } & {
                foreignKey?: (string[] & string[] & { [K_1 in Exclude<keyof I["select"]["include"][number]["foreignKey"], "$type" | keyof string[]>]: never; }) | undefined;
                select?: ({
                    tablename?: string | undefined;
                    where?: string | undefined;
                    include?: {
                        foreignKey?: string[] | undefined;
                        select?: any | undefined;
                    }[] | undefined;
                } & {
                    tablename?: string | undefined;
                    where?: string | undefined;
                    include?: ({
                        foreignKey?: string[] | undefined;
                        select?: any | undefined;
                    }[] & ({
                        foreignKey?: string[] | undefined;
                        select?: any | undefined;
                    } & {
                        foreignKey?: (string[] & string[] & { [K_2 in Exclude<keyof I["select"]["include"][number]["select"]["include"][number]["foreignKey"], "$type" | keyof string[]>]: never; }) | undefined;
                        select?: ({
                            tablename?: string | undefined;
                            where?: string | undefined;
                            include?: {
                                foreignKey?: string[] | undefined;
                                select?: any | undefined;
                            }[] | undefined;
                        } & {
                            tablename?: string | undefined;
                            where?: string | undefined;
                            include?: ({
                                foreignKey?: string[] | undefined;
                                select?: any | undefined;
                            }[] & ({
                                foreignKey?: string[] | undefined;
                                select?: any | undefined;
                            } & {
                                foreignKey?: (string[] & string[] & { [K_3 in Exclude<keyof I["select"]["include"][number]["select"]["include"][number]["select"]["include"][number]["foreignKey"], "$type" | keyof string[]>]: never; }) | undefined;
                                select?: ({
                                    tablename?: string | undefined;
                                    where?: string | undefined;
                                    include?: {
                                        foreignKey?: string[] | undefined;
                                        select?: any | undefined;
                                    }[] | undefined;
                                } & {
                                    tablename?: string | undefined;
                                    where?: string | undefined;
                                    include?: ({
                                        foreignKey?: string[] | undefined;
                                        select?: any | undefined;
                                    }[] & ({
                                        foreignKey?: string[] | undefined;
                                        select?: any | undefined;
                                    } & {
                                        foreignKey?: (string[] & string[] & { [K_4 in Exclude<keyof I["select"]["include"][number]["select"]["include"][number]["select"]["include"][number]["select"]["include"][number]["foreignKey"], "$type" | keyof string[]>]: never; }) | undefined;
                                        select?: ({
                                            tablename?: string | undefined;
                                            where?: string | undefined;
                                            include?: {
                                                foreignKey?: string[] | undefined;
                                                select?: any | undefined;
                                            }[] | undefined;
                                        } & {
                                            tablename?: string | undefined;
                                            where?: string | undefined;
                                            include?: ({
                                                foreignKey?: string[] | undefined;
                                                select?: any | undefined;
                                            }[] & ({
                                                foreignKey?: string[] | undefined;
                                                select?: any | undefined;
                                            } & {
                                                foreignKey?: (string[] & string[] & { [K_5 in Exclude<keyof I["select"]["include"][number]["select"]["include"][number]["select"]["include"][number]["select"]["include"][number]["select"]["include"][number]["foreignKey"], "$type" | keyof string[]>]: never; }) | undefined;
                                                select?: ({
                                                    tablename?: string | undefined;
                                                    where?: string | undefined;
                                                    include?: {
                                                        foreignKey?: string[] | undefined;
                                                        select?: any | undefined;
                                                    }[] | undefined;
                                                } & any & { [K_6 in Exclude<keyof I["select"]["include"][number]["select"]["include"][number]["select"]["include"][number]["select"]["include"][number]["select"]["include"][number]["select"], "$type" | "tablename" | "where" | "include">]: never; }) | undefined;
                                            } & { [K_7 in Exclude<keyof I["select"]["include"][number]["select"]["include"][number]["select"]["include"][number]["select"]["include"][number]["select"]["include"][number], "$type" | "foreignKey" | "select">]: never; })[] & { [K_8 in Exclude<keyof I["select"]["include"][number]["select"]["include"][number]["select"]["include"][number]["select"]["include"][number]["select"]["include"], "$type" | keyof {
                                                foreignKey?: string[] | undefined;
                                                select?: any | undefined;
                                            }[]>]: never; }) | undefined;
                                        } & { [K_9 in Exclude<keyof I["select"]["include"][number]["select"]["include"][number]["select"]["include"][number]["select"]["include"][number]["select"], "$type" | "tablename" | "where" | "include">]: never; }) | undefined;
                                    } & { [K_10 in Exclude<keyof I["select"]["include"][number]["select"]["include"][number]["select"]["include"][number]["select"]["include"][number], "$type" | "foreignKey" | "select">]: never; })[] & { [K_11 in Exclude<keyof I["select"]["include"][number]["select"]["include"][number]["select"]["include"][number]["select"]["include"], "$type" | keyof {
                                        foreignKey?: string[] | undefined;
                                        select?: any | undefined;
                                    }[]>]: never; }) | undefined;
                                } & { [K_12 in Exclude<keyof I["select"]["include"][number]["select"]["include"][number]["select"]["include"][number]["select"], "$type" | "tablename" | "where" | "include">]: never; }) | undefined;
                            } & { [K_13 in Exclude<keyof I["select"]["include"][number]["select"]["include"][number]["select"]["include"][number], "$type" | "foreignKey" | "select">]: never; })[] & { [K_14 in Exclude<keyof I["select"]["include"][number]["select"]["include"][number]["select"]["include"], "$type" | keyof {
                                foreignKey?: string[] | undefined;
                                select?: any | undefined;
                            }[]>]: never; }) | undefined;
                        } & { [K_15 in Exclude<keyof I["select"]["include"][number]["select"]["include"][number]["select"], "$type" | "tablename" | "where" | "include">]: never; }) | undefined;
                    } & { [K_16 in Exclude<keyof I["select"]["include"][number]["select"]["include"][number], "$type" | "foreignKey" | "select">]: never; })[] & { [K_17 in Exclude<keyof I["select"]["include"][number]["select"]["include"], "$type" | keyof {
                        foreignKey?: string[] | undefined;
                        select?: any | undefined;
                    }[]>]: never; }) | undefined;
                } & { [K_18 in Exclude<keyof I["select"]["include"][number]["select"], "$type" | "tablename" | "where" | "include">]: never; }) | undefined;
            } & { [K_19 in Exclude<keyof I["select"]["include"][number], "$type" | "foreignKey" | "select">]: never; })[] & { [K_20 in Exclude<keyof I["select"]["include"], "$type" | keyof {
                foreignKey?: string[] | undefined;
                select?: any | undefined;
            }[]>]: never; }) | undefined;
        } & { [K_21 in Exclude<keyof I["select"], "$type" | "tablename" | "where" | "include">]: never; }) | undefined;
    } & { [K_22 in Exclude<keyof I, "$type" | "foreignKey" | "select">]: never; }>(base?: I): SatShapeDef_Relation;
    fromPartial<I_1 extends {
        foreignKey?: string[] | undefined;
        select?: any | undefined;
    } & {
        foreignKey?: (string[] & string[] & { [K_23 in Exclude<keyof I_1["foreignKey"], "$type" | keyof string[]>]: never; }) | undefined;
        select?: ({
            tablename?: string | undefined;
            where?: string | undefined;
            include?: {
                foreignKey?: string[] | undefined;
                select?: any | undefined;
            }[] | undefined;
        } & {
            tablename?: string | undefined;
            where?: string | undefined;
            include?: ({
                foreignKey?: string[] | undefined;
                select?: any | undefined;
            }[] & ({
                foreignKey?: string[] | undefined;
                select?: any | undefined;
            } & {
                foreignKey?: (string[] & string[] & { [K_24 in Exclude<keyof I_1["select"]["include"][number]["foreignKey"], "$type" | keyof string[]>]: never; }) | undefined;
                select?: ({
                    tablename?: string | undefined;
                    where?: string | undefined;
                    include?: {
                        foreignKey?: string[] | undefined;
                        select?: any | undefined;
                    }[] | undefined;
                } & {
                    tablename?: string | undefined;
                    where?: string | undefined;
                    include?: ({
                        foreignKey?: string[] | undefined;
                        select?: any | undefined;
                    }[] & ({
                        foreignKey?: string[] | undefined;
                        select?: any | undefined;
                    } & {
                        foreignKey?: (string[] & string[] & { [K_25 in Exclude<keyof I_1["select"]["include"][number]["select"]["include"][number]["foreignKey"], "$type" | keyof string[]>]: never; }) | undefined;
                        select?: ({
                            tablename?: string | undefined;
                            where?: string | undefined;
                            include?: {
                                foreignKey?: string[] | undefined;
                                select?: any | undefined;
                            }[] | undefined;
                        } & {
                            tablename?: string | undefined;
                            where?: string | undefined;
                            include?: ({
                                foreignKey?: string[] | undefined;
                                select?: any | undefined;
                            }[] & ({
                                foreignKey?: string[] | undefined;
                                select?: any | undefined;
                            } & {
                                foreignKey?: (string[] & string[] & { [K_26 in Exclude<keyof I_1["select"]["include"][number]["select"]["include"][number]["select"]["include"][number]["foreignKey"], "$type" | keyof string[]>]: never; }) | undefined;
                                select?: ({
                                    tablename?: string | undefined;
                                    where?: string | undefined;
                                    include?: {
                                        foreignKey?: string[] | undefined;
                                        select?: any | undefined;
                                    }[] | undefined;
                                } & {
                                    tablename?: string | undefined;
                                    where?: string | undefined;
                                    include?: ({
                                        foreignKey?: string[] | undefined;
                                        select?: any | undefined;
                                    }[] & ({
                                        foreignKey?: string[] | undefined;
                                        select?: any | undefined;
                                    } & {
                                        foreignKey?: (string[] & string[] & { [K_27 in Exclude<keyof I_1["select"]["include"][number]["select"]["include"][number]["select"]["include"][number]["select"]["include"][number]["foreignKey"], "$type" | keyof string[]>]: never; }) | undefined;
                                        select?: ({
                                            tablename?: string | undefined;
                                            where?: string | undefined;
                                            include?: {
                                                foreignKey?: string[] | undefined;
                                                select?: any | undefined;
                                            }[] | undefined;
                                        } & {
                                            tablename?: string | undefined;
                                            where?: string | undefined;
                                            include?: ({
                                                foreignKey?: string[] | undefined;
                                                select?: any | undefined;
                                            }[] & ({
                                                foreignKey?: string[] | undefined;
                                                select?: any | undefined;
                                            } & {
                                                foreignKey?: (string[] & string[] & { [K_28 in Exclude<keyof I_1["select"]["include"][number]["select"]["include"][number]["select"]["include"][number]["select"]["include"][number]["select"]["include"][number]["foreignKey"], "$type" | keyof string[]>]: never; }) | undefined;
                                                select?: ({
                                                    tablename?: string | undefined;
                                                    where?: string | undefined;
                                                    include?: {
                                                        foreignKey?: string[] | undefined;
                                                        select?: any | undefined;
                                                    }[] | undefined;
                                                } & any & { [K_29 in Exclude<keyof I_1["select"]["include"][number]["select"]["include"][number]["select"]["include"][number]["select"]["include"][number]["select"]["include"][number]["select"], "$type" | "tablename" | "where" | "include">]: never; }) | undefined;
                                            } & { [K_30 in Exclude<keyof I_1["select"]["include"][number]["select"]["include"][number]["select"]["include"][number]["select"]["include"][number]["select"]["include"][number], "$type" | "foreignKey" | "select">]: never; })[] & { [K_31 in Exclude<keyof I_1["select"]["include"][number]["select"]["include"][number]["select"]["include"][number]["select"]["include"][number]["select"]["include"], "$type" | keyof {
                                                foreignKey?: string[] | undefined;
                                                select?: any | undefined;
                                            }[]>]: never; }) | undefined;
                                        } & { [K_32 in Exclude<keyof I_1["select"]["include"][number]["select"]["include"][number]["select"]["include"][number]["select"]["include"][number]["select"], "$type" | "tablename" | "where" | "include">]: never; }) | undefined;
                                    } & { [K_33 in Exclude<keyof I_1["select"]["include"][number]["select"]["include"][number]["select"]["include"][number]["select"]["include"][number], "$type" | "foreignKey" | "select">]: never; })[] & { [K_34 in Exclude<keyof I_1["select"]["include"][number]["select"]["include"][number]["select"]["include"][number]["select"]["include"], "$type" | keyof {
                                        foreignKey?: string[] | undefined;
                                        select?: any | undefined;
                                    }[]>]: never; }) | undefined;
                                } & { [K_35 in Exclude<keyof I_1["select"]["include"][number]["select"]["include"][number]["select"]["include"][number]["select"], "$type" | "tablename" | "where" | "include">]: never; }) | undefined;
                            } & { [K_36 in Exclude<keyof I_1["select"]["include"][number]["select"]["include"][number]["select"]["include"][number], "$type" | "foreignKey" | "select">]: never; })[] & { [K_37 in Exclude<keyof I_1["select"]["include"][number]["select"]["include"][number]["select"]["include"], "$type" | keyof {
                                foreignKey?: string[] | undefined;
                                select?: any | undefined;
                            }[]>]: never; }) | undefined;
                        } & { [K_38 in Exclude<keyof I_1["select"]["include"][number]["select"]["include"][number]["select"], "$type" | "tablename" | "where" | "include">]: never; }) | undefined;
                    } & { [K_39 in Exclude<keyof I_1["select"]["include"][number]["select"]["include"][number], "$type" | "foreignKey" | "select">]: never; })[] & { [K_40 in Exclude<keyof I_1["select"]["include"][number]["select"]["include"], "$type" | keyof {
                        foreignKey?: string[] | undefined;
                        select?: any | undefined;
                    }[]>]: never; }) | undefined;
                } & { [K_41 in Exclude<keyof I_1["select"]["include"][number]["select"], "$type" | "tablename" | "where" | "include">]: never; }) | undefined;
            } & { [K_42 in Exclude<keyof I_1["select"]["include"][number], "$type" | "foreignKey" | "select">]: never; })[] & { [K_43 in Exclude<keyof I_1["select"]["include"], "$type" | keyof {
                foreignKey?: string[] | undefined;
                select?: any | undefined;
            }[]>]: never; }) | undefined;
        } & { [K_44 in Exclude<keyof I_1["select"], "$type" | "tablename" | "where" | "include">]: never; }) | undefined;
    } & { [K_45 in Exclude<keyof I_1, "$type" | "foreignKey" | "select">]: never; }>(object: I_1): SatShapeDef_Relation;
};
export declare const SatShapeDef_Select: {
    $type: "Electric.Satellite.SatShapeDef.Select";
    encode(message: SatShapeDef_Select, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): SatShapeDef_Select;
    create<I extends {
        tablename?: string | undefined;
        where?: string | undefined;
        include?: {
            foreignKey?: string[] | undefined;
            select?: any | undefined;
        }[] | undefined;
    } & {
        tablename?: string | undefined;
        where?: string | undefined;
        include?: ({
            foreignKey?: string[] | undefined;
            select?: any | undefined;
        }[] & ({
            foreignKey?: string[] | undefined;
            select?: any | undefined;
        } & {
            foreignKey?: (string[] & string[] & { [K in Exclude<keyof I["include"][number]["foreignKey"], "$type" | keyof string[]>]: never; }) | undefined;
            select?: ({
                tablename?: string | undefined;
                where?: string | undefined;
                include?: {
                    foreignKey?: string[] | undefined;
                    select?: any | undefined;
                }[] | undefined;
            } & {
                tablename?: string | undefined;
                where?: string | undefined;
                include?: ({
                    foreignKey?: string[] | undefined;
                    select?: any | undefined;
                }[] & ({
                    foreignKey?: string[] | undefined;
                    select?: any | undefined;
                } & {
                    foreignKey?: (string[] & string[] & { [K_1 in Exclude<keyof I["include"][number]["select"]["include"][number]["foreignKey"], "$type" | keyof string[]>]: never; }) | undefined;
                    select?: ({
                        tablename?: string | undefined;
                        where?: string | undefined;
                        include?: {
                            foreignKey?: string[] | undefined;
                            select?: any | undefined;
                        }[] | undefined;
                    } & {
                        tablename?: string | undefined;
                        where?: string | undefined;
                        include?: ({
                            foreignKey?: string[] | undefined;
                            select?: any | undefined;
                        }[] & ({
                            foreignKey?: string[] | undefined;
                            select?: any | undefined;
                        } & {
                            foreignKey?: (string[] & string[] & { [K_2 in Exclude<keyof I["include"][number]["select"]["include"][number]["select"]["include"][number]["foreignKey"], "$type" | keyof string[]>]: never; }) | undefined;
                            select?: ({
                                tablename?: string | undefined;
                                where?: string | undefined;
                                include?: {
                                    foreignKey?: string[] | undefined;
                                    select?: any | undefined;
                                }[] | undefined;
                            } & {
                                tablename?: string | undefined;
                                where?: string | undefined;
                                include?: ({
                                    foreignKey?: string[] | undefined;
                                    select?: any | undefined;
                                }[] & ({
                                    foreignKey?: string[] | undefined;
                                    select?: any | undefined;
                                } & {
                                    foreignKey?: (string[] & string[] & { [K_3 in Exclude<keyof I["include"][number]["select"]["include"][number]["select"]["include"][number]["select"]["include"][number]["foreignKey"], "$type" | keyof string[]>]: never; }) | undefined;
                                    select?: ({
                                        tablename?: string | undefined;
                                        where?: string | undefined;
                                        include?: {
                                            foreignKey?: string[] | undefined;
                                            select?: any | undefined;
                                        }[] | undefined;
                                    } & {
                                        tablename?: string | undefined;
                                        where?: string | undefined;
                                        include?: ({
                                            foreignKey?: string[] | undefined;
                                            select?: any | undefined;
                                        }[] & ({
                                            foreignKey?: string[] | undefined;
                                            select?: any | undefined;
                                        } & {
                                            foreignKey?: (string[] & string[] & { [K_4 in Exclude<keyof I["include"][number]["select"]["include"][number]["select"]["include"][number]["select"]["include"][number]["select"]["include"][number]["foreignKey"], "$type" | keyof string[]>]: never; }) | undefined;
                                            select?: ({
                                                tablename?: string | undefined;
                                                where?: string | undefined;
                                                include?: {
                                                    foreignKey?: string[] | undefined;
                                                    select?: any | undefined;
                                                }[] | undefined;
                                            } & {
                                                tablename?: string | undefined;
                                                where?: string | undefined;
                                                include?: ({
                                                    foreignKey?: string[] | undefined;
                                                    select?: any | undefined;
                                                }[] & ({
                                                    foreignKey?: string[] | undefined;
                                                    select?: any | undefined;
                                                } & any & { [K_5 in Exclude<keyof I["include"][number]["select"]["include"][number]["select"]["include"][number]["select"]["include"][number]["select"]["include"][number]["select"]["include"][number], "$type" | "foreignKey" | "select">]: never; })[] & { [K_6 in Exclude<keyof I["include"][number]["select"]["include"][number]["select"]["include"][number]["select"]["include"][number]["select"]["include"][number]["select"]["include"], "$type" | keyof {
                                                    foreignKey?: string[] | undefined;
                                                    select?: any | undefined;
                                                }[]>]: never; }) | undefined;
                                            } & { [K_7 in Exclude<keyof I["include"][number]["select"]["include"][number]["select"]["include"][number]["select"]["include"][number]["select"]["include"][number]["select"], "$type" | "tablename" | "where" | "include">]: never; }) | undefined;
                                        } & { [K_8 in Exclude<keyof I["include"][number]["select"]["include"][number]["select"]["include"][number]["select"]["include"][number]["select"]["include"][number], "$type" | "foreignKey" | "select">]: never; })[] & { [K_9 in Exclude<keyof I["include"][number]["select"]["include"][number]["select"]["include"][number]["select"]["include"][number]["select"]["include"], "$type" | keyof {
                                            foreignKey?: string[] | undefined;
                                            select?: any | undefined;
                                        }[]>]: never; }) | undefined;
                                    } & { [K_10 in Exclude<keyof I["include"][number]["select"]["include"][number]["select"]["include"][number]["select"]["include"][number]["select"], "$type" | "tablename" | "where" | "include">]: never; }) | undefined;
                                } & { [K_11 in Exclude<keyof I["include"][number]["select"]["include"][number]["select"]["include"][number]["select"]["include"][number], "$type" | "foreignKey" | "select">]: never; })[] & { [K_12 in Exclude<keyof I["include"][number]["select"]["include"][number]["select"]["include"][number]["select"]["include"], "$type" | keyof {
                                    foreignKey?: string[] | undefined;
                                    select?: any | undefined;
                                }[]>]: never; }) | undefined;
                            } & { [K_13 in Exclude<keyof I["include"][number]["select"]["include"][number]["select"]["include"][number]["select"], "$type" | "tablename" | "where" | "include">]: never; }) | undefined;
                        } & { [K_14 in Exclude<keyof I["include"][number]["select"]["include"][number]["select"]["include"][number], "$type" | "foreignKey" | "select">]: never; })[] & { [K_15 in Exclude<keyof I["include"][number]["select"]["include"][number]["select"]["include"], "$type" | keyof {
                            foreignKey?: string[] | undefined;
                            select?: any | undefined;
                        }[]>]: never; }) | undefined;
                    } & { [K_16 in Exclude<keyof I["include"][number]["select"]["include"][number]["select"], "$type" | "tablename" | "where" | "include">]: never; }) | undefined;
                } & { [K_17 in Exclude<keyof I["include"][number]["select"]["include"][number], "$type" | "foreignKey" | "select">]: never; })[] & { [K_18 in Exclude<keyof I["include"][number]["select"]["include"], "$type" | keyof {
                    foreignKey?: string[] | undefined;
                    select?: any | undefined;
                }[]>]: never; }) | undefined;
            } & { [K_19 in Exclude<keyof I["include"][number]["select"], "$type" | "tablename" | "where" | "include">]: never; }) | undefined;
        } & { [K_20 in Exclude<keyof I["include"][number], "$type" | "foreignKey" | "select">]: never; })[] & { [K_21 in Exclude<keyof I["include"], "$type" | keyof {
            foreignKey?: string[] | undefined;
            select?: any | undefined;
        }[]>]: never; }) | undefined;
    } & { [K_22 in Exclude<keyof I, "$type" | "tablename" | "where" | "include">]: never; }>(base?: I): SatShapeDef_Select;
    fromPartial<I_1 extends {
        tablename?: string | undefined;
        where?: string | undefined;
        include?: {
            foreignKey?: string[] | undefined;
            select?: any | undefined;
        }[] | undefined;
    } & {
        tablename?: string | undefined;
        where?: string | undefined;
        include?: ({
            foreignKey?: string[] | undefined;
            select?: any | undefined;
        }[] & ({
            foreignKey?: string[] | undefined;
            select?: any | undefined;
        } & {
            foreignKey?: (string[] & string[] & { [K_23 in Exclude<keyof I_1["include"][number]["foreignKey"], "$type" | keyof string[]>]: never; }) | undefined;
            select?: ({
                tablename?: string | undefined;
                where?: string | undefined;
                include?: {
                    foreignKey?: string[] | undefined;
                    select?: any | undefined;
                }[] | undefined;
            } & {
                tablename?: string | undefined;
                where?: string | undefined;
                include?: ({
                    foreignKey?: string[] | undefined;
                    select?: any | undefined;
                }[] & ({
                    foreignKey?: string[] | undefined;
                    select?: any | undefined;
                } & {
                    foreignKey?: (string[] & string[] & { [K_24 in Exclude<keyof I_1["include"][number]["select"]["include"][number]["foreignKey"], "$type" | keyof string[]>]: never; }) | undefined;
                    select?: ({
                        tablename?: string | undefined;
                        where?: string | undefined;
                        include?: {
                            foreignKey?: string[] | undefined;
                            select?: any | undefined;
                        }[] | undefined;
                    } & {
                        tablename?: string | undefined;
                        where?: string | undefined;
                        include?: ({
                            foreignKey?: string[] | undefined;
                            select?: any | undefined;
                        }[] & ({
                            foreignKey?: string[] | undefined;
                            select?: any | undefined;
                        } & {
                            foreignKey?: (string[] & string[] & { [K_25 in Exclude<keyof I_1["include"][number]["select"]["include"][number]["select"]["include"][number]["foreignKey"], "$type" | keyof string[]>]: never; }) | undefined;
                            select?: ({
                                tablename?: string | undefined;
                                where?: string | undefined;
                                include?: {
                                    foreignKey?: string[] | undefined;
                                    select?: any | undefined;
                                }[] | undefined;
                            } & {
                                tablename?: string | undefined;
                                where?: string | undefined;
                                include?: ({
                                    foreignKey?: string[] | undefined;
                                    select?: any | undefined;
                                }[] & ({
                                    foreignKey?: string[] | undefined;
                                    select?: any | undefined;
                                } & {
                                    foreignKey?: (string[] & string[] & { [K_26 in Exclude<keyof I_1["include"][number]["select"]["include"][number]["select"]["include"][number]["select"]["include"][number]["foreignKey"], "$type" | keyof string[]>]: never; }) | undefined;
                                    select?: ({
                                        tablename?: string | undefined;
                                        where?: string | undefined;
                                        include?: {
                                            foreignKey?: string[] | undefined;
                                            select?: any | undefined;
                                        }[] | undefined;
                                    } & {
                                        tablename?: string | undefined;
                                        where?: string | undefined;
                                        include?: ({
                                            foreignKey?: string[] | undefined;
                                            select?: any | undefined;
                                        }[] & ({
                                            foreignKey?: string[] | undefined;
                                            select?: any | undefined;
                                        } & {
                                            foreignKey?: (string[] & string[] & { [K_27 in Exclude<keyof I_1["include"][number]["select"]["include"][number]["select"]["include"][number]["select"]["include"][number]["select"]["include"][number]["foreignKey"], "$type" | keyof string[]>]: never; }) | undefined;
                                            select?: ({
                                                tablename?: string | undefined;
                                                where?: string | undefined;
                                                include?: {
                                                    foreignKey?: string[] | undefined;
                                                    select?: any | undefined;
                                                }[] | undefined;
                                            } & {
                                                tablename?: string | undefined;
                                                where?: string | undefined;
                                                include?: ({
                                                    foreignKey?: string[] | undefined;
                                                    select?: any | undefined;
                                                }[] & ({
                                                    foreignKey?: string[] | undefined;
                                                    select?: any | undefined;
                                                } & any & { [K_28 in Exclude<keyof I_1["include"][number]["select"]["include"][number]["select"]["include"][number]["select"]["include"][number]["select"]["include"][number]["select"]["include"][number], "$type" | "foreignKey" | "select">]: never; })[] & { [K_29 in Exclude<keyof I_1["include"][number]["select"]["include"][number]["select"]["include"][number]["select"]["include"][number]["select"]["include"][number]["select"]["include"], "$type" | keyof {
                                                    foreignKey?: string[] | undefined;
                                                    select?: any | undefined;
                                                }[]>]: never; }) | undefined;
                                            } & { [K_30 in Exclude<keyof I_1["include"][number]["select"]["include"][number]["select"]["include"][number]["select"]["include"][number]["select"]["include"][number]["select"], "$type" | "tablename" | "where" | "include">]: never; }) | undefined;
                                        } & { [K_31 in Exclude<keyof I_1["include"][number]["select"]["include"][number]["select"]["include"][number]["select"]["include"][number]["select"]["include"][number], "$type" | "foreignKey" | "select">]: never; })[] & { [K_32 in Exclude<keyof I_1["include"][number]["select"]["include"][number]["select"]["include"][number]["select"]["include"][number]["select"]["include"], "$type" | keyof {
                                            foreignKey?: string[] | undefined;
                                            select?: any | undefined;
                                        }[]>]: never; }) | undefined;
                                    } & { [K_33 in Exclude<keyof I_1["include"][number]["select"]["include"][number]["select"]["include"][number]["select"]["include"][number]["select"], "$type" | "tablename" | "where" | "include">]: never; }) | undefined;
                                } & { [K_34 in Exclude<keyof I_1["include"][number]["select"]["include"][number]["select"]["include"][number]["select"]["include"][number], "$type" | "foreignKey" | "select">]: never; })[] & { [K_35 in Exclude<keyof I_1["include"][number]["select"]["include"][number]["select"]["include"][number]["select"]["include"], "$type" | keyof {
                                    foreignKey?: string[] | undefined;
                                    select?: any | undefined;
                                }[]>]: never; }) | undefined;
                            } & { [K_36 in Exclude<keyof I_1["include"][number]["select"]["include"][number]["select"]["include"][number]["select"], "$type" | "tablename" | "where" | "include">]: never; }) | undefined;
                        } & { [K_37 in Exclude<keyof I_1["include"][number]["select"]["include"][number]["select"]["include"][number], "$type" | "foreignKey" | "select">]: never; })[] & { [K_38 in Exclude<keyof I_1["include"][number]["select"]["include"][number]["select"]["include"], "$type" | keyof {
                            foreignKey?: string[] | undefined;
                            select?: any | undefined;
                        }[]>]: never; }) | undefined;
                    } & { [K_39 in Exclude<keyof I_1["include"][number]["select"]["include"][number]["select"], "$type" | "tablename" | "where" | "include">]: never; }) | undefined;
                } & { [K_40 in Exclude<keyof I_1["include"][number]["select"]["include"][number], "$type" | "foreignKey" | "select">]: never; })[] & { [K_41 in Exclude<keyof I_1["include"][number]["select"]["include"], "$type" | keyof {
                    foreignKey?: string[] | undefined;
                    select?: any | undefined;
                }[]>]: never; }) | undefined;
            } & { [K_42 in Exclude<keyof I_1["include"][number]["select"], "$type" | "tablename" | "where" | "include">]: never; }) | undefined;
        } & { [K_43 in Exclude<keyof I_1["include"][number], "$type" | "foreignKey" | "select">]: never; })[] & { [K_44 in Exclude<keyof I_1["include"], "$type" | keyof {
            foreignKey?: string[] | undefined;
            select?: any | undefined;
        }[]>]: never; }) | undefined;
    } & { [K_45 in Exclude<keyof I_1, "$type" | "tablename" | "where" | "include">]: never; }>(object: I_1): SatShapeDef_Select;
};
export declare const SatSubsDataError: {
    $type: "Electric.Satellite.SatSubsDataError";
    encode(message: SatSubsDataError, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): SatSubsDataError;
    create<I extends {
        message?: string | undefined;
        code?: SatSubsDataError_Code | undefined;
        subscriptionId?: string | undefined;
        shapeRequestError?: {
            requestId?: string | undefined;
            message?: string | undefined;
            code?: SatSubsDataError_ShapeReqError_Code | undefined;
        }[] | undefined;
    } & {
        message?: string | undefined;
        code?: SatSubsDataError_Code | undefined;
        subscriptionId?: string | undefined;
        shapeRequestError?: ({
            requestId?: string | undefined;
            message?: string | undefined;
            code?: SatSubsDataError_ShapeReqError_Code | undefined;
        }[] & ({
            requestId?: string | undefined;
            message?: string | undefined;
            code?: SatSubsDataError_ShapeReqError_Code | undefined;
        } & {
            requestId?: string | undefined;
            message?: string | undefined;
            code?: SatSubsDataError_ShapeReqError_Code | undefined;
        } & { [K in Exclude<keyof I["shapeRequestError"][number], "$type" | "requestId" | "message" | "code">]: never; })[] & { [K_1 in Exclude<keyof I["shapeRequestError"], "$type" | keyof {
            requestId?: string | undefined;
            message?: string | undefined;
            code?: SatSubsDataError_ShapeReqError_Code | undefined;
        }[]>]: never; }) | undefined;
    } & { [K_2 in Exclude<keyof I, "$type" | "message" | "code" | "subscriptionId" | "shapeRequestError">]: never; }>(base?: I): SatSubsDataError;
    fromPartial<I_1 extends {
        message?: string | undefined;
        code?: SatSubsDataError_Code | undefined;
        subscriptionId?: string | undefined;
        shapeRequestError?: {
            requestId?: string | undefined;
            message?: string | undefined;
            code?: SatSubsDataError_ShapeReqError_Code | undefined;
        }[] | undefined;
    } & {
        message?: string | undefined;
        code?: SatSubsDataError_Code | undefined;
        subscriptionId?: string | undefined;
        shapeRequestError?: ({
            requestId?: string | undefined;
            message?: string | undefined;
            code?: SatSubsDataError_ShapeReqError_Code | undefined;
        }[] & ({
            requestId?: string | undefined;
            message?: string | undefined;
            code?: SatSubsDataError_ShapeReqError_Code | undefined;
        } & {
            requestId?: string | undefined;
            message?: string | undefined;
            code?: SatSubsDataError_ShapeReqError_Code | undefined;
        } & { [K_3 in Exclude<keyof I_1["shapeRequestError"][number], "$type" | "requestId" | "message" | "code">]: never; })[] & { [K_4 in Exclude<keyof I_1["shapeRequestError"], "$type" | keyof {
            requestId?: string | undefined;
            message?: string | undefined;
            code?: SatSubsDataError_ShapeReqError_Code | undefined;
        }[]>]: never; }) | undefined;
    } & { [K_5 in Exclude<keyof I_1, "$type" | "message" | "code" | "subscriptionId" | "shapeRequestError">]: never; }>(object: I_1): SatSubsDataError;
};
export declare const SatSubsDataError_ShapeReqError: {
    $type: "Electric.Satellite.SatSubsDataError.ShapeReqError";
    encode(message: SatSubsDataError_ShapeReqError, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): SatSubsDataError_ShapeReqError;
    create<I extends {
        requestId?: string | undefined;
        message?: string | undefined;
        code?: SatSubsDataError_ShapeReqError_Code | undefined;
    } & {
        requestId?: string | undefined;
        message?: string | undefined;
        code?: SatSubsDataError_ShapeReqError_Code | undefined;
    } & { [K in Exclude<keyof I, "$type" | "requestId" | "message" | "code">]: never; }>(base?: I): SatSubsDataError_ShapeReqError;
    fromPartial<I_1 extends {
        requestId?: string | undefined;
        message?: string | undefined;
        code?: SatSubsDataError_ShapeReqError_Code | undefined;
    } & {
        requestId?: string | undefined;
        message?: string | undefined;
        code?: SatSubsDataError_ShapeReqError_Code | undefined;
    } & { [K_1 in Exclude<keyof I_1, "$type" | "requestId" | "message" | "code">]: never; }>(object: I_1): SatSubsDataError_ShapeReqError;
};
export declare const SatSubsDataBegin: {
    $type: "Electric.Satellite.SatSubsDataBegin";
    encode(message: SatSubsDataBegin, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): SatSubsDataBegin;
    create<I extends {
        lsn?: Uint8Array | undefined;
        subscriptionId?: string | undefined;
    } & {
        lsn?: Uint8Array | undefined;
        subscriptionId?: string | undefined;
    } & { [K in Exclude<keyof I, "$type" | "lsn" | "subscriptionId">]: never; }>(base?: I): SatSubsDataBegin;
    fromPartial<I_1 extends {
        lsn?: Uint8Array | undefined;
        subscriptionId?: string | undefined;
    } & {
        lsn?: Uint8Array | undefined;
        subscriptionId?: string | undefined;
    } & { [K_1 in Exclude<keyof I_1, "$type" | "lsn" | "subscriptionId">]: never; }>(object: I_1): SatSubsDataBegin;
};
export declare const SatSubsDataEnd: {
    $type: "Electric.Satellite.SatSubsDataEnd";
    encode(_: SatSubsDataEnd, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): SatSubsDataEnd;
    create<I extends {} & {} & { [K in Exclude<keyof I, "$type">]: never; }>(base?: I): SatSubsDataEnd;
    fromPartial<I_1 extends {} & {} & { [K_1 in Exclude<keyof I_1, "$type">]: never; }>(_: I_1): SatSubsDataEnd;
};
export declare const SatUnsubsDataBegin: {
    $type: "Electric.Satellite.SatUnsubsDataBegin";
    encode(message: SatUnsubsDataBegin, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): SatUnsubsDataBegin;
    create<I extends {
        lsn?: Uint8Array | undefined;
        subscriptionIds?: string[] | undefined;
    } & {
        lsn?: Uint8Array | undefined;
        subscriptionIds?: (string[] & string[] & { [K in Exclude<keyof I["subscriptionIds"], "$type" | keyof string[]>]: never; }) | undefined;
    } & { [K_1 in Exclude<keyof I, "$type" | "lsn" | "subscriptionIds">]: never; }>(base?: I): SatUnsubsDataBegin;
    fromPartial<I_1 extends {
        lsn?: Uint8Array | undefined;
        subscriptionIds?: string[] | undefined;
    } & {
        lsn?: Uint8Array | undefined;
        subscriptionIds?: (string[] & string[] & { [K_2 in Exclude<keyof I_1["subscriptionIds"], "$type" | keyof string[]>]: never; }) | undefined;
    } & { [K_3 in Exclude<keyof I_1, "$type" | "lsn" | "subscriptionIds">]: never; }>(object: I_1): SatUnsubsDataBegin;
};
export declare const SatUnsubsDataEnd: {
    $type: "Electric.Satellite.SatUnsubsDataEnd";
    encode(_: SatUnsubsDataEnd, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): SatUnsubsDataEnd;
    create<I extends {} & {} & { [K in Exclude<keyof I, "$type">]: never; }>(base?: I): SatUnsubsDataEnd;
    fromPartial<I_1 extends {} & {} & { [K_1 in Exclude<keyof I_1, "$type">]: never; }>(_: I_1): SatUnsubsDataEnd;
};
export declare const SatShapeDataBegin: {
    $type: "Electric.Satellite.SatShapeDataBegin";
    encode(message: SatShapeDataBegin, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): SatShapeDataBegin;
    create<I extends {
        requestId?: string | undefined;
        uuid?: string | undefined;
    } & {
        requestId?: string | undefined;
        uuid?: string | undefined;
    } & { [K in Exclude<keyof I, "$type" | "requestId" | "uuid">]: never; }>(base?: I): SatShapeDataBegin;
    fromPartial<I_1 extends {
        requestId?: string | undefined;
        uuid?: string | undefined;
    } & {
        requestId?: string | undefined;
        uuid?: string | undefined;
    } & { [K_1 in Exclude<keyof I_1, "$type" | "requestId" | "uuid">]: never; }>(object: I_1): SatShapeDataBegin;
};
export declare const SatShapeDataEnd: {
    $type: "Electric.Satellite.SatShapeDataEnd";
    encode(_: SatShapeDataEnd, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): SatShapeDataEnd;
    create<I extends {} & {} & { [K in Exclude<keyof I, "$type">]: never; }>(base?: I): SatShapeDataEnd;
    fromPartial<I_1 extends {} & {} & { [K_1 in Exclude<keyof I_1, "$type">]: never; }>(_: I_1): SatShapeDataEnd;
};
/** Main RPC service that the Electric server fulfills */
export interface Root {
    authenticate(request: SatAuthReq): Promise<SatAuthResp>;
    startReplication(request: SatInStartReplicationReq): Promise<SatInStartReplicationResp>;
    stopReplication(request: SatInStopReplicationReq): Promise<SatInStopReplicationResp>;
    subscribe(request: SatSubsReq): Promise<SatSubsResp>;
    unsubscribe(request: SatUnsubsReq): Promise<SatUnsubsResp>;
}
export declare const RootServiceName = "Electric.Satellite.Root";
export declare class RootClientImpl implements Root {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    authenticate(request: SatAuthReq): Promise<SatAuthResp>;
    startReplication(request: SatInStartReplicationReq): Promise<SatInStartReplicationResp>;
    stopReplication(request: SatInStopReplicationReq): Promise<SatInStopReplicationResp>;
    subscribe(request: SatSubsReq): Promise<SatSubsResp>;
    unsubscribe(request: SatUnsubsReq): Promise<SatUnsubsResp>;
}
/** RPC calls that the server makes to the client */
export interface ClientRoot {
    startReplication(request: SatInStartReplicationReq): Promise<SatInStartReplicationResp>;
    stopReplication(request: SatInStopReplicationReq): Promise<SatInStopReplicationResp>;
}
export declare const ClientRootServiceName = "Electric.Satellite.ClientRoot";
export declare class ClientRootClientImpl implements ClientRoot {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    startReplication(request: SatInStartReplicationReq): Promise<SatInStartReplicationResp>;
    stopReplication(request: SatInStopReplicationReq): Promise<SatInStopReplicationResp>;
}
interface Rpc {
    request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export type DeepPartial<T> = T extends Builtin ? T : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]>;
} : Partial<T>;
type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P : P & {
    [K in keyof P]: Exact<P[K], I[K]>;
} & {
    [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never;
};
export {};
