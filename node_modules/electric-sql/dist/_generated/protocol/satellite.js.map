{"version":3,"sources":["../../../src/_generated/protocol/satellite.ts"],"sourcesContent":["// Code generated by protoc-gen-ts_proto. DO NOT EDIT.\n// versions:\n//   protoc-gen-ts_proto  v1.175.0\n//   protoc               v4.25.3\n// source: protocol/satellite.proto\n\n/* eslint-disable */\nimport Long from \"long\";\nimport _m0 from \"protobufjs/minimal.js\";\nimport { messageTypeRegistry } from \"../typeRegistry.js\";\n\nexport const protobufPackage = \"Electric.Satellite\";\n\n/**\n * This file defines protobuf protocol for Satellite <> Electric replication\n *\n * In this document there is a notation of the Client/Server and\n * Producer/Consumer which are used to annotate messages.\n *\n * This protocol uses a custom RPC implementation that allows bidirectional RPC calls (usually the client\n * calls the server, but the server makes some RPC calls to the client too) and non-RPC messages.\n *\n * Any RPC call should be done as an `SatRpcRequest` message, with `message` field being a method-appropriate\n * encoded message from this protocol. The answering side should then respond with `SatRpcResponse` with the same\n * method and request id. If RPC call fully failed, the `error` field will be filled. Otherwise, the message field\n * will be field, which may or may not have its own internal error fields.\n *\n * Any message not wrapped in rpc request or response should not warrant a direct response from the other side.\n */\n\nexport enum SatAuthHeader {\n  /** UNSPECIFIED - Required by the Protobuf spec. */\n  UNSPECIFIED = 0,\n  UNRECOGNIZED = -1,\n}\n\n/** RPC request transport message, must be used to implement service RPC calls in the protocol */\nexport interface SatRpcRequest {\n  $type: \"Electric.Satellite.SatRpcRequest\";\n  method: string;\n  requestId: number;\n  message: Uint8Array;\n}\n\n/** RPC response transport message, must be used to implement service RPC calls in the protocol */\nexport interface SatRpcResponse {\n  $type: \"Electric.Satellite.SatRpcResponse\";\n  method: string;\n  requestId: number;\n  message?: Uint8Array | undefined;\n  error?: SatErrorResp | undefined;\n}\n\nexport interface SatAuthHeaderPair {\n  $type: \"Electric.Satellite.SatAuthHeaderPair\";\n  key: SatAuthHeader;\n  value: string;\n}\n\n/**\n * (Client) Auth request\n *\n * Client request is the first request that the client should send before\n * executing any other request.\n */\nexport interface SatAuthReq {\n  $type: \"Electric.Satellite.SatAuthReq\";\n  /**\n   * Identity of the Satellite application. Is expected to be something like\n   * UUID. Required field\n   */\n  id: string;\n  /** Authentication token, auth method specific, required */\n  token: string;\n  /** Headers, required */\n  headers: SatAuthHeaderPair[];\n}\n\n/** (Server) Auth response */\nexport interface SatAuthResp {\n  $type: \"Electric.Satellite.SatAuthResp\";\n  /** Identity of the Server */\n  id: string;\n  /** Headers optional */\n  headers: SatAuthHeaderPair[];\n}\n\n/**\n * General purpose error message, that could be sent to any request from any\n * side. FIXME: We might want to separate that into Client/Server parts.\n */\nexport interface SatErrorResp {\n  $type: \"Electric.Satellite.SatErrorResp\";\n  errorType: SatErrorResp_ErrorCode;\n  /** lsn of the txn that caused the problem, if available */\n  lsn?:\n    | Uint8Array\n    | undefined;\n  /** human readable explanation of what went wrong */\n  message?: string | undefined;\n}\n\nexport enum SatErrorResp_ErrorCode {\n  INTERNAL = 0,\n  AUTH_REQUIRED = 1,\n  AUTH_FAILED = 2,\n  REPLICATION_FAILED = 3,\n  INVALID_REQUEST = 4,\n  PROTO_VSN_MISMATCH = 5,\n  SCHEMA_VSN_MISMATCH = 6,\n  UNRECOGNIZED = -1,\n}\n\n/** (Consumer) Starts replication stream from producer to consumer */\nexport interface SatInStartReplicationReq {\n  $type: \"Electric.Satellite.SatInStartReplicationReq\";\n  /** LSN position of the log on the producer side */\n  lsn: Uint8Array;\n  options: SatInStartReplicationReq_Option[];\n  /** the subscriptions identifiers the client wants to resume subscription */\n  subscriptionIds: string[];\n  /** The version of the most recent migration seen by the client. */\n  schemaVersion?:\n    | string\n    | undefined;\n  /**\n   * List of transaction IDs for which the client\n   * observed additional data before disconnect\n   */\n  observedTransactionData: Long[];\n  /**\n   * The SQL dialect used by the client\n   * Defaults to SQLite if not specified\n   */\n  sqlDialect?:\n    | SatInStartReplicationReq_Dialect\n    | undefined;\n  /** List of subscription IDs for which the client observed a GONE batch after unsubscribing */\n  observedGoneBatch: string[];\n}\n\nexport enum SatInStartReplicationReq_Option {\n  /** NONE - Required by the Protobuf spec. */\n  NONE = 0,\n  UNRECOGNIZED = -1,\n}\n\nexport enum SatInStartReplicationReq_Dialect {\n  SQLITE = 0,\n  POSTGRES = 1,\n  UNRECOGNIZED = -1,\n}\n\n/** (Producer) The result of the start replication requests */\nexport interface SatInStartReplicationResp {\n  $type: \"Electric.Satellite.SatInStartReplicationResp\";\n  /** returned in case replication fails to start */\n  err?:\n    | SatInStartReplicationResp_ReplicationError\n    | undefined;\n  /** How many unacked transactions the producer is willing to send */\n  unackedWindowSize?: number | undefined;\n}\n\n/** Error returned by the Producer when replication fails to start */\nexport interface SatInStartReplicationResp_ReplicationError {\n  $type: \"Electric.Satellite.SatInStartReplicationResp.ReplicationError\";\n  /** error code */\n  code: SatInStartReplicationResp_ReplicationError_Code;\n  /** a human-readable description of the error */\n  message: string;\n}\n\n/** error code enum */\nexport enum SatInStartReplicationResp_ReplicationError_Code {\n  /** CODE_UNSPECIFIED - Required by the Protobuf spec. */\n  CODE_UNSPECIFIED = 0,\n  /** BEHIND_WINDOW - requested LSN is behind the current replication window */\n  BEHIND_WINDOW = 1,\n  /** INVALID_POSITION - e.g. jumping ahead of the subscriptions cursor */\n  INVALID_POSITION = 2,\n  /** SUBSCRIPTION_NOT_FOUND - requested subscription not found */\n  SUBSCRIPTION_NOT_FOUND = 3,\n  /** MALFORMED_LSN - the replication request has malformed LSN */\n  MALFORMED_LSN = 4,\n  /**\n   * UNKNOWN_SCHEMA_VSN - consumer requested replication at schema version that is\n   * not known to the producer\n   */\n  UNKNOWN_SCHEMA_VSN = 5,\n  UNRECOGNIZED = -1,\n}\n\n/** (Consumer) Request to stop replication */\nexport interface SatInStopReplicationReq {\n  $type: \"Electric.Satellite.SatInStopReplicationReq\";\n}\n\n/** (Producer) Acknowledgement that replication has been stopped */\nexport interface SatInStopReplicationResp {\n  $type: \"Electric.Satellite.SatInStopReplicationResp\";\n}\n\nexport interface SatRelationColumn {\n  $type: \"Electric.Satellite.SatRelationColumn\";\n  name: string;\n  type: string;\n  primaryKey: boolean;\n  isNullable: boolean;\n}\n\nexport interface SatRelation {\n  $type: \"Electric.Satellite.SatRelation\";\n  schemaName: string;\n  tableType: SatRelation_RelationType;\n  tableName: string;\n  /**\n   * Volatile identity defined at the start of the replication protocol may or\n   * may not be persisted is used in SatTransOp operations, to indicate\n   * relation the operation is working on.\n   */\n  relationId: number;\n  columns: SatRelationColumn[];\n}\n\nexport enum SatRelation_RelationType {\n  TABLE = 0,\n  INDEX = 1,\n  VIEW = 2,\n  TRIGGER = 3,\n  UNRECOGNIZED = -1,\n}\n\n/**\n * (Producer) Type defines replication messages, that flow from Producer once\n * the replication is established. Message contains operations log. Operations\n * should go in the LSN order. Begin and Commit operations corresponds to\n * transaction boundaries.\n * Transactions are guranteed not to be mixed, and will follow one by one.\n */\nexport interface SatOpLog {\n  $type: \"Electric.Satellite.SatOpLog\";\n  ops: SatTransOp[];\n}\n\n/**\n * Acknowledgement message that the transaction with given LSN has been incorporated by the client.\n * Sent by the consumer and used by the producer to regulate garbage collection & backpressure.\n * Clients that don't send it after a certain number of transactions will be considered non-responsive\n * and the producer may choose to pause sending further information to such a client.\n *\n * It's also important the the producer may deny connection requests from clients who try to connect with\n * LSN number less than the most recently acknowledged one, as the acknowledgement may have caused a\n * cleanup of information for this client before this point in time.\n */\nexport interface SatOpLogAck {\n  $type: \"Electric.Satellite.SatOpLogAck\";\n  /** Timestamp on the sending side */\n  ackTimestamp: Long;\n  /** LSN of the most recent incorporated transaction */\n  lsn: Uint8Array;\n  /** Transaction ID of the most recent incorporated transaction */\n  transactionId: Long;\n  /** Subscription IDs for data that was received immediately after this transaction */\n  subscriptionIds: string[];\n  /** Transaction IDs for which additional data was received immediately after this transaction */\n  additionalDataSourceIds: Long[];\n  /** Subscription IDs for GONE batches received at this LSN */\n  goneSubscriptionIds: string[];\n}\n\n/**\n * (Producer) Single operation, should be only send as part of the SatOplog\n * message\n */\nexport interface SatTransOp {\n  $type: \"Electric.Satellite.SatTransOp\";\n  begin?: SatOpBegin | undefined;\n  commit?: SatOpCommit | undefined;\n  update?: SatOpUpdate | undefined;\n  insert?: SatOpInsert | undefined;\n  delete?: SatOpDelete | undefined;\n  migrate?: SatOpMigrate | undefined;\n  compensation?: SatOpCompensation | undefined;\n  gone?: SatOpGone | undefined;\n  additionalBegin?: SatOpAdditionalBegin | undefined;\n  additionalCommit?: SatOpAdditionalCommit | undefined;\n}\n\n/**\n * (Producer) Replication message that indicates transaction boundaries\n * should be only send as payload in the SatTransOp message\n */\nexport interface SatOpBegin {\n  $type: \"Electric.Satellite.SatOpBegin\";\n  commitTimestamp: Long;\n  /**\n   * Lsn position that points to first data segment of transaction in the\n   * WAL\n   */\n  lsn: Uint8Array;\n  /**\n   * Globally unique id of the source that transaction originated from. For\n   * data coming from Satellite this field is ignored. For data coming from\n   * Electric this field can be used to deduce if the incoming transaction\n   * originated on this Satellite instance or not.\n   */\n  origin?:\n    | string\n    | undefined;\n  /** does this transaction contain ddl statements? */\n  isMigration: boolean;\n  /**\n   * If not 0, a transient reference for additional data pseudo-transaction\n   * that will be sent at a later point in the stream. It may be shared by multiple transactions\n   * sent by the server at the same time, because this additional data will be queried at the same\n   * time. Duplicated on SatOpCommit.\n   */\n  additionalDataRef: Long;\n  /** Unique transaction ID, sent only by the server. No guarantees of monotonicity. */\n  transactionId?: Long | undefined;\n}\n\n/**\n * (Producer) Replication message that indicates a transaction boundary for additional data that existed on the server\n * but the client can now see\n */\nexport interface SatOpAdditionalBegin {\n  $type: \"Electric.Satellite.SatOpAdditionalBegin\";\n  ref: Long;\n}\n\n/**\n * (Producer) Replication message that indicates transaction boundaries\n * should be only send as payload in the SatTransOp message\n */\nexport interface SatOpCommit {\n  $type: \"Electric.Satellite.SatOpCommit\";\n  commitTimestamp: Long;\n  lsn: Uint8Array;\n  /**\n   * If not 0, a transient reference for additional data pseudo-transaction\n   * that will be sent at a later point in the stream. It may be shared by multiple transactions\n   * sent by the server at the same time, because this additional data will be queried at the same\n   * time. Duplicated on SatOpBegin.\n   */\n  additionalDataRef: Long;\n  /** Unique transaction ID, sent only by the server. No guarantees of monotonicity. */\n  transactionId?: Long | undefined;\n}\n\nexport interface SatOpAdditionalCommit {\n  $type: \"Electric.Satellite.SatOpAdditionalCommit\";\n  ref: Long;\n}\n\n/**\n * (Producer) Data manipulation message, that only should be part of the\n * SatTransOp message\n */\nexport interface SatOpInsert {\n  $type: \"Electric.Satellite.SatOpInsert\";\n  relationId: number;\n  rowData:\n    | SatOpRow\n    | undefined;\n  /** dependency information */\n  tags: string[];\n}\n\n/**\n * (Producer) Data manipulation message, that only should be part of the\n * SatTransOp message\n */\nexport interface SatOpUpdate {\n  $type: \"Electric.Satellite.SatOpUpdate\";\n  relationId: number;\n  rowData: SatOpRow | undefined;\n  oldRowData:\n    | SatOpRow\n    | undefined;\n  /** dependency information */\n  tags: string[];\n}\n\n/**\n * (Producer) Data manipulation message, that only should be part of the\n * SatTransOp message\n */\nexport interface SatOpDelete {\n  $type: \"Electric.Satellite.SatOpDelete\";\n  relationId: number;\n  oldRowData:\n    | SatOpRow\n    | undefined;\n  /** dependency information */\n  tags: string[];\n}\n\nexport interface SatOpCompensation {\n  $type: \"Electric.Satellite.SatOpCompensation\";\n  relationId: number;\n  pkData:\n    | SatOpRow\n    | undefined;\n  /** dependency information */\n  tags: string[];\n}\n\nexport interface SatOpGone {\n  $type: \"Electric.Satellite.SatOpGone\";\n  relationId: number;\n  pkData: SatOpRow | undefined;\n}\n\n/** Message that corresponds to the single row. */\nexport interface SatOpRow {\n  $type: \"Electric.Satellite.SatOpRow\";\n  nullsBitmask: Uint8Array;\n  /**\n   * values may contain binaries with size 0 for NULLs and empty values\n   * check nulls_bitmask to differentiate between the two\n   */\n  values: Uint8Array[];\n}\n\n/**\n * A migration message, originating in Postgres, captured via event triggers,\n * propagated to electric, converted from postgres to the equivalent sqlite\n * statement and inserted into the replication stream\n *\n * Each migration message includes the sql strings to execute on the satellite\n * client as well as metadata information about the resulting structure of the\n * changed tables.\n */\nexport interface SatOpMigrate {\n  $type: \"Electric.Satellite.SatOpMigrate\";\n  /**\n   * the migration version as specified by the developer and put into\n   * the postgresql migration as an electric function call\n   */\n  version: string;\n  /**\n   * A list of SQL DDL statements to apply, translated from Postgres to SQLite dialect.\n   *\n   * The migration machinery converts an `ALTER TABLE action1, action2, action3;`\n   * query into a set of 3: `ALTER TABLE action1; ALTER TABLE action2,` etc\n   * so we need to support 1+ statements for every migration event.\n   *\n   * There is an exception for enum types. Since SQLite does not have a matching concept,\n   * the original Postgres DDL statement `CREATE TYPE ... AS ENUM (...)` is included as is,\n   * without translation.\n   */\n  stmts: SatOpMigrate_Stmt[];\n  /**\n   * The resulting table definition after applying these migrations\n   * (a DDL statement can only affect one table at a time).\n   */\n  table?:\n    | SatOpMigrate_Table\n    | undefined;\n  /** This field is set if stmts includes a single item which is an enum type definition. */\n  enumType?: SatOpMigrate_EnumType | undefined;\n}\n\nexport enum SatOpMigrate_Type {\n  CREATE_TABLE = 0,\n  CREATE_INDEX = 1,\n  CREATE_ENUM_TYPE = 2,\n  ALTER_ADD_COLUMN = 6,\n  UNRECOGNIZED = -1,\n}\n\nexport interface SatOpMigrate_Stmt {\n  $type: \"Electric.Satellite.SatOpMigrate.Stmt\";\n  type: SatOpMigrate_Type;\n  sql: string;\n}\n\nexport interface SatOpMigrate_PgColumnType {\n  $type: \"Electric.Satellite.SatOpMigrate.PgColumnType\";\n  /** the pg type name, e.g. int4, char */\n  name: string;\n  /**\n   * array dimensions, or [] for scalar types\n   * e.g. for a column declared as int4[][3], size = [-1, 3]\n   */\n  array: number[];\n  /** any size information, e.g. for varchar(SIZE) or [] for no size */\n  size: number[];\n}\n\n/** reserved 2; */\nexport interface SatOpMigrate_Column {\n  $type: \"Electric.Satellite.SatOpMigrate.Column\";\n  name: string;\n  /**\n   * deprecated\n   * leaving it here to avoid breaking TypeScript tests that have hard-coded,\n   * base64-encoded SatOpMigrate messages.\n   */\n  sqliteType: string;\n  pgType: SatOpMigrate_PgColumnType | undefined;\n}\n\nexport interface SatOpMigrate_ForeignKey {\n  $type: \"Electric.Satellite.SatOpMigrate.ForeignKey\";\n  /** the columns in the child table that point to the parent */\n  fkCols: string[];\n  /** the parent table */\n  pkTable: string;\n  /** the cols in the parent table */\n  pkCols: string[];\n}\n\nexport interface SatOpMigrate_Table {\n  $type: \"Electric.Satellite.SatOpMigrate.Table\";\n  name: string;\n  columns: SatOpMigrate_Column[];\n  fks: SatOpMigrate_ForeignKey[];\n  pks: string[];\n}\n\nexport interface SatOpMigrate_EnumType {\n  $type: \"Electric.Satellite.SatOpMigrate.EnumType\";\n  name: string;\n  values: string[];\n}\n\n/** (Consumer) Request for new subscriptions */\nexport interface SatSubsReq {\n  $type: \"Electric.Satellite.SatSubsReq\";\n  /** a client-generated identifier to track the subscription */\n  subscriptionId: string;\n  /** Shape requests */\n  shapeRequests: SatShapeReq[];\n}\n\n/** (Producer) Response for a subscription request */\nexport interface SatSubsResp {\n  $type: \"Electric.Satellite.SatSubsResp\";\n  /** identifier of the subscription this response refers to */\n  subscriptionId: string;\n  /** the error details if the request failed */\n  err?: SatSubsResp_SatSubsError | undefined;\n}\n\n/**\n * Error message returned by the Producer when it encounters\n * an error handling subscription request\n */\nexport interface SatSubsResp_SatSubsError {\n  $type: \"Electric.Satellite.SatSubsResp.SatSubsError\";\n  /** error code */\n  code: SatSubsResp_SatSubsError_Code;\n  /** A human-readable description of the error */\n  message: string;\n  /** Details of the shape request error */\n  shapeRequestError: SatSubsResp_SatSubsError_ShapeReqError[];\n}\n\n/** error code enum */\nexport enum SatSubsResp_SatSubsError_Code {\n  /** CODE_UNSPECIFIED - Required by the Protobuf spec. */\n  CODE_UNSPECIFIED = 0,\n  /** SUBSCRIPTION_ID_ALREADY_EXISTS - DUPLICATE IDENTIFIER */\n  SUBSCRIPTION_ID_ALREADY_EXISTS = 1,\n  /** SHAPE_REQUEST_ERROR - Error requesting shape */\n  SHAPE_REQUEST_ERROR = 2,\n  UNRECOGNIZED = -1,\n}\n\n/** Shape request error */\nexport interface SatSubsResp_SatSubsError_ShapeReqError {\n  $type: \"Electric.Satellite.SatSubsResp.SatSubsError.ShapeReqError\";\n  /** error code */\n  code: SatSubsResp_SatSubsError_ShapeReqError_Code;\n  /** a human-readable description of the error */\n  message: string;\n  /** the shape request identifier that this error refers to */\n  requestId: string;\n}\n\n/** error code enum */\nexport enum SatSubsResp_SatSubsError_ShapeReqError_Code {\n  /** CODE_UNSPECIFIED - Required by the Protobuf spec. */\n  CODE_UNSPECIFIED = 0,\n  /** TABLE_NOT_FOUND - Table does not exist in current schema version */\n  TABLE_NOT_FOUND = 1,\n  /** REFERENTIAL_INTEGRITY_VIOLATION - Requested shape does not maintain referential integirty */\n  REFERENTIAL_INTEGRITY_VIOLATION = 2,\n  /** EMPTY_SHAPE_DEFINITION - The shape request contains an empty shape definition */\n  EMPTY_SHAPE_DEFINITION = 3,\n  /** DUPLICATE_TABLE_IN_SHAPE_DEFINITION - Attempt to request the same table more than once in one shape */\n  DUPLICATE_TABLE_IN_SHAPE_DEFINITION = 4,\n  /** INVALID_WHERE_CLAUSE - Malformed WHERE clause on a table */\n  INVALID_WHERE_CLAUSE = 5,\n  /** INVALID_INCLUDE_TREE - Specified include tree does not match known schema */\n  INVALID_INCLUDE_TREE = 6,\n  UNRECOGNIZED = -1,\n}\n\n/** (Consumer) Request to cancel subscriptions */\nexport interface SatUnsubsReq {\n  $type: \"Electric.Satellite.SatUnsubsReq\";\n  /** Identifiers of the subscriptions */\n  subscriptionIds: string[];\n}\n\n/** (Producer) Acknowledgment that the subscriptions were cancelled */\nexport interface SatUnsubsResp {\n  $type: \"Electric.Satellite.SatUnsubsResp\";\n}\n\n/** Shape request */\nexport interface SatShapeReq {\n  $type: \"Electric.Satellite.SatShapeReq\";\n  /** Identifier of the request */\n  requestId: string;\n  /** The shape definition */\n  shapeDefinition: SatShapeDef | undefined;\n}\n\n/** Top-level structure of a shape definition */\nexport interface SatShapeDef {\n  $type: \"Electric.Satellite.SatShapeDef\";\n  /** Selects for the Shape definition */\n  selects: SatShapeDef_Select[];\n}\n\nexport interface SatShapeDef_Relation {\n  $type: \"Electric.Satellite.SatShapeDef.Relation\";\n  foreignKey: string[];\n  select: SatShapeDef_Select | undefined;\n}\n\n/** Select structure */\nexport interface SatShapeDef_Select {\n  $type: \"Electric.Satellite.SatShapeDef.Select\";\n  /** table name for this select */\n  tablename: string;\n  where: string;\n  include: SatShapeDef_Relation[];\n}\n\n/**\n * Error message returned by the Producer when it encounters\n * an error handling subscription data\n */\nexport interface SatSubsDataError {\n  $type: \"Electric.Satellite.SatSubsDataError\";\n  /** error code */\n  code: SatSubsDataError_Code;\n  /** A human-readable description of the error */\n  message: string;\n  /** Subscription identifier this error refers to */\n  subscriptionId: string;\n  /** Details of the shape request error */\n  shapeRequestError: SatSubsDataError_ShapeReqError[];\n}\n\n/** error code enum */\nexport enum SatSubsDataError_Code {\n  /** CODE_UNSPECIFIED - Required by the Protobuf spec. */\n  CODE_UNSPECIFIED = 0,\n  /** SHAPE_DELIVERY_ERROR - Error delivering shape */\n  SHAPE_DELIVERY_ERROR = 1,\n  UNRECOGNIZED = -1,\n}\n\n/** Shape request error */\nexport interface SatSubsDataError_ShapeReqError {\n  $type: \"Electric.Satellite.SatSubsDataError.ShapeReqError\";\n  /** error code */\n  code: SatSubsDataError_ShapeReqError_Code;\n  /** a human-readable description of the error */\n  message: string;\n  /** the shape request identifier that this error refers to */\n  requestId: string;\n}\n\n/** error code enum */\nexport enum SatSubsDataError_ShapeReqError_Code {\n  /** CODE_UNSPECIFIED - Required by the Protobuf spec. */\n  CODE_UNSPECIFIED = 0,\n  /** SHAPE_SIZE_LIMIT_EXCEEDED - Requested shape exceed the maximum allowed shape size */\n  SHAPE_SIZE_LIMIT_EXCEEDED = 1,\n  UNRECOGNIZED = -1,\n}\n\n/** Begin delimiter for the incoming subscription data */\nexport interface SatSubsDataBegin {\n  $type: \"Electric.Satellite.SatSubsDataBegin\";\n  /** Identifier of the subscription */\n  subscriptionId: string;\n  /** LSN at which this data is being sent. May be a duplicate of a transaction that was sent immediately before. */\n  lsn: Uint8Array;\n}\n\n/** End delimiter for the incoming subscription data */\nexport interface SatSubsDataEnd {\n  $type: \"Electric.Satellite.SatSubsDataEnd\";\n}\n\n/** Begin delimiter for the incoming subscription data */\nexport interface SatUnsubsDataBegin {\n  $type: \"Electric.Satellite.SatUnsubsDataBegin\";\n  /** Identifier of the subscriptions that were handled as unsubbed */\n  subscriptionIds: string[];\n  /** LSN at which this data is being sent. May be a duplicate of a transaction that was sent immediately before. */\n  lsn: Uint8Array;\n}\n\n/** End delimiter for the incoming subscription data */\nexport interface SatUnsubsDataEnd {\n  $type: \"Electric.Satellite.SatUnsubsDataEnd\";\n}\n\n/** Begin delimiter for the initial shape data */\nexport interface SatShapeDataBegin {\n  $type: \"Electric.Satellite.SatShapeDataBegin\";\n  /** Identifier of the request */\n  requestId: string;\n  /** The UUID of the shape on the Producer */\n  uuid: string;\n}\n\n/** End delimiter for the initial shape data */\nexport interface SatShapeDataEnd {\n  $type: \"Electric.Satellite.SatShapeDataEnd\";\n}\n\nfunction createBaseSatRpcRequest(): SatRpcRequest {\n  return { $type: \"Electric.Satellite.SatRpcRequest\", method: \"\", requestId: 0, message: new Uint8Array(0) };\n}\n\nexport const SatRpcRequest = {\n  $type: \"Electric.Satellite.SatRpcRequest\" as const,\n\n  encode(message: SatRpcRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {\n    if (message.method !== \"\") {\n      writer.uint32(10).string(message.method);\n    }\n    if (message.requestId !== 0) {\n      writer.uint32(16).uint32(message.requestId);\n    }\n    if (message.message.length !== 0) {\n      writer.uint32(26).bytes(message.message);\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): SatRpcRequest {\n    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseSatRpcRequest();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          if (tag !== 10) {\n            break;\n          }\n\n          message.method = reader.string();\n          continue;\n        case 2:\n          if (tag !== 16) {\n            break;\n          }\n\n          message.requestId = reader.uint32();\n          continue;\n        case 3:\n          if (tag !== 26) {\n            break;\n          }\n\n          message.message = reader.bytes();\n          continue;\n      }\n      if ((tag & 7) === 4 || tag === 0) {\n        break;\n      }\n      reader.skipType(tag & 7);\n    }\n    return message;\n  },\n\n  create<I extends Exact<DeepPartial<SatRpcRequest>, I>>(base?: I): SatRpcRequest {\n    return SatRpcRequest.fromPartial(base ?? ({} as any));\n  },\n  fromPartial<I extends Exact<DeepPartial<SatRpcRequest>, I>>(object: I): SatRpcRequest {\n    const message = createBaseSatRpcRequest();\n    message.method = object.method ?? \"\";\n    message.requestId = object.requestId ?? 0;\n    message.message = object.message ?? new Uint8Array(0);\n    return message;\n  },\n};\n\nmessageTypeRegistry.set(SatRpcRequest.$type, SatRpcRequest);\n\nfunction createBaseSatRpcResponse(): SatRpcResponse {\n  return { $type: \"Electric.Satellite.SatRpcResponse\", method: \"\", requestId: 0, message: undefined, error: undefined };\n}\n\nexport const SatRpcResponse = {\n  $type: \"Electric.Satellite.SatRpcResponse\" as const,\n\n  encode(message: SatRpcResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {\n    if (message.method !== \"\") {\n      writer.uint32(10).string(message.method);\n    }\n    if (message.requestId !== 0) {\n      writer.uint32(16).uint32(message.requestId);\n    }\n    if (message.message !== undefined) {\n      writer.uint32(26).bytes(message.message);\n    }\n    if (message.error !== undefined) {\n      SatErrorResp.encode(message.error, writer.uint32(34).fork()).ldelim();\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): SatRpcResponse {\n    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseSatRpcResponse();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          if (tag !== 10) {\n            break;\n          }\n\n          message.method = reader.string();\n          continue;\n        case 2:\n          if (tag !== 16) {\n            break;\n          }\n\n          message.requestId = reader.uint32();\n          continue;\n        case 3:\n          if (tag !== 26) {\n            break;\n          }\n\n          message.message = reader.bytes();\n          continue;\n        case 4:\n          if (tag !== 34) {\n            break;\n          }\n\n          message.error = SatErrorResp.decode(reader, reader.uint32());\n          continue;\n      }\n      if ((tag & 7) === 4 || tag === 0) {\n        break;\n      }\n      reader.skipType(tag & 7);\n    }\n    return message;\n  },\n\n  create<I extends Exact<DeepPartial<SatRpcResponse>, I>>(base?: I): SatRpcResponse {\n    return SatRpcResponse.fromPartial(base ?? ({} as any));\n  },\n  fromPartial<I extends Exact<DeepPartial<SatRpcResponse>, I>>(object: I): SatRpcResponse {\n    const message = createBaseSatRpcResponse();\n    message.method = object.method ?? \"\";\n    message.requestId = object.requestId ?? 0;\n    message.message = object.message ?? undefined;\n    message.error = (object.error !== undefined && object.error !== null)\n      ? SatErrorResp.fromPartial(object.error)\n      : undefined;\n    return message;\n  },\n};\n\nmessageTypeRegistry.set(SatRpcResponse.$type, SatRpcResponse);\n\nfunction createBaseSatAuthHeaderPair(): SatAuthHeaderPair {\n  return { $type: \"Electric.Satellite.SatAuthHeaderPair\", key: 0, value: \"\" };\n}\n\nexport const SatAuthHeaderPair = {\n  $type: \"Electric.Satellite.SatAuthHeaderPair\" as const,\n\n  encode(message: SatAuthHeaderPair, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {\n    if (message.key !== 0) {\n      writer.uint32(8).int32(message.key);\n    }\n    if (message.value !== \"\") {\n      writer.uint32(18).string(message.value);\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): SatAuthHeaderPair {\n    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseSatAuthHeaderPair();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          if (tag !== 8) {\n            break;\n          }\n\n          message.key = reader.int32() as any;\n          continue;\n        case 2:\n          if (tag !== 18) {\n            break;\n          }\n\n          message.value = reader.string();\n          continue;\n      }\n      if ((tag & 7) === 4 || tag === 0) {\n        break;\n      }\n      reader.skipType(tag & 7);\n    }\n    return message;\n  },\n\n  create<I extends Exact<DeepPartial<SatAuthHeaderPair>, I>>(base?: I): SatAuthHeaderPair {\n    return SatAuthHeaderPair.fromPartial(base ?? ({} as any));\n  },\n  fromPartial<I extends Exact<DeepPartial<SatAuthHeaderPair>, I>>(object: I): SatAuthHeaderPair {\n    const message = createBaseSatAuthHeaderPair();\n    message.key = object.key ?? 0;\n    message.value = object.value ?? \"\";\n    return message;\n  },\n};\n\nmessageTypeRegistry.set(SatAuthHeaderPair.$type, SatAuthHeaderPair);\n\nfunction createBaseSatAuthReq(): SatAuthReq {\n  return { $type: \"Electric.Satellite.SatAuthReq\", id: \"\", token: \"\", headers: [] };\n}\n\nexport const SatAuthReq = {\n  $type: \"Electric.Satellite.SatAuthReq\" as const,\n\n  encode(message: SatAuthReq, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {\n    if (message.id !== \"\") {\n      writer.uint32(10).string(message.id);\n    }\n    if (message.token !== \"\") {\n      writer.uint32(18).string(message.token);\n    }\n    for (const v of message.headers) {\n      SatAuthHeaderPair.encode(v!, writer.uint32(26).fork()).ldelim();\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): SatAuthReq {\n    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseSatAuthReq();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          if (tag !== 10) {\n            break;\n          }\n\n          message.id = reader.string();\n          continue;\n        case 2:\n          if (tag !== 18) {\n            break;\n          }\n\n          message.token = reader.string();\n          continue;\n        case 3:\n          if (tag !== 26) {\n            break;\n          }\n\n          message.headers.push(SatAuthHeaderPair.decode(reader, reader.uint32()));\n          continue;\n      }\n      if ((tag & 7) === 4 || tag === 0) {\n        break;\n      }\n      reader.skipType(tag & 7);\n    }\n    return message;\n  },\n\n  create<I extends Exact<DeepPartial<SatAuthReq>, I>>(base?: I): SatAuthReq {\n    return SatAuthReq.fromPartial(base ?? ({} as any));\n  },\n  fromPartial<I extends Exact<DeepPartial<SatAuthReq>, I>>(object: I): SatAuthReq {\n    const message = createBaseSatAuthReq();\n    message.id = object.id ?? \"\";\n    message.token = object.token ?? \"\";\n    message.headers = object.headers?.map((e) => SatAuthHeaderPair.fromPartial(e)) || [];\n    return message;\n  },\n};\n\nmessageTypeRegistry.set(SatAuthReq.$type, SatAuthReq);\n\nfunction createBaseSatAuthResp(): SatAuthResp {\n  return { $type: \"Electric.Satellite.SatAuthResp\", id: \"\", headers: [] };\n}\n\nexport const SatAuthResp = {\n  $type: \"Electric.Satellite.SatAuthResp\" as const,\n\n  encode(message: SatAuthResp, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {\n    if (message.id !== \"\") {\n      writer.uint32(10).string(message.id);\n    }\n    for (const v of message.headers) {\n      SatAuthHeaderPair.encode(v!, writer.uint32(26).fork()).ldelim();\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): SatAuthResp {\n    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseSatAuthResp();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          if (tag !== 10) {\n            break;\n          }\n\n          message.id = reader.string();\n          continue;\n        case 3:\n          if (tag !== 26) {\n            break;\n          }\n\n          message.headers.push(SatAuthHeaderPair.decode(reader, reader.uint32()));\n          continue;\n      }\n      if ((tag & 7) === 4 || tag === 0) {\n        break;\n      }\n      reader.skipType(tag & 7);\n    }\n    return message;\n  },\n\n  create<I extends Exact<DeepPartial<SatAuthResp>, I>>(base?: I): SatAuthResp {\n    return SatAuthResp.fromPartial(base ?? ({} as any));\n  },\n  fromPartial<I extends Exact<DeepPartial<SatAuthResp>, I>>(object: I): SatAuthResp {\n    const message = createBaseSatAuthResp();\n    message.id = object.id ?? \"\";\n    message.headers = object.headers?.map((e) => SatAuthHeaderPair.fromPartial(e)) || [];\n    return message;\n  },\n};\n\nmessageTypeRegistry.set(SatAuthResp.$type, SatAuthResp);\n\nfunction createBaseSatErrorResp(): SatErrorResp {\n  return { $type: \"Electric.Satellite.SatErrorResp\", errorType: 0, lsn: undefined, message: undefined };\n}\n\nexport const SatErrorResp = {\n  $type: \"Electric.Satellite.SatErrorResp\" as const,\n\n  encode(message: SatErrorResp, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {\n    if (message.errorType !== 0) {\n      writer.uint32(8).int32(message.errorType);\n    }\n    if (message.lsn !== undefined) {\n      writer.uint32(18).bytes(message.lsn);\n    }\n    if (message.message !== undefined) {\n      writer.uint32(26).string(message.message);\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): SatErrorResp {\n    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseSatErrorResp();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          if (tag !== 8) {\n            break;\n          }\n\n          message.errorType = reader.int32() as any;\n          continue;\n        case 2:\n          if (tag !== 18) {\n            break;\n          }\n\n          message.lsn = reader.bytes();\n          continue;\n        case 3:\n          if (tag !== 26) {\n            break;\n          }\n\n          message.message = reader.string();\n          continue;\n      }\n      if ((tag & 7) === 4 || tag === 0) {\n        break;\n      }\n      reader.skipType(tag & 7);\n    }\n    return message;\n  },\n\n  create<I extends Exact<DeepPartial<SatErrorResp>, I>>(base?: I): SatErrorResp {\n    return SatErrorResp.fromPartial(base ?? ({} as any));\n  },\n  fromPartial<I extends Exact<DeepPartial<SatErrorResp>, I>>(object: I): SatErrorResp {\n    const message = createBaseSatErrorResp();\n    message.errorType = object.errorType ?? 0;\n    message.lsn = object.lsn ?? undefined;\n    message.message = object.message ?? undefined;\n    return message;\n  },\n};\n\nmessageTypeRegistry.set(SatErrorResp.$type, SatErrorResp);\n\nfunction createBaseSatInStartReplicationReq(): SatInStartReplicationReq {\n  return {\n    $type: \"Electric.Satellite.SatInStartReplicationReq\",\n    lsn: new Uint8Array(0),\n    options: [],\n    subscriptionIds: [],\n    schemaVersion: undefined,\n    observedTransactionData: [],\n    sqlDialect: undefined,\n    observedGoneBatch: [],\n  };\n}\n\nexport const SatInStartReplicationReq = {\n  $type: \"Electric.Satellite.SatInStartReplicationReq\" as const,\n\n  encode(message: SatInStartReplicationReq, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {\n    if (message.lsn.length !== 0) {\n      writer.uint32(10).bytes(message.lsn);\n    }\n    writer.uint32(18).fork();\n    for (const v of message.options) {\n      writer.int32(v);\n    }\n    writer.ldelim();\n    for (const v of message.subscriptionIds) {\n      writer.uint32(34).string(v!);\n    }\n    if (message.schemaVersion !== undefined) {\n      writer.uint32(42).string(message.schemaVersion);\n    }\n    writer.uint32(50).fork();\n    for (const v of message.observedTransactionData) {\n      writer.uint64(v);\n    }\n    writer.ldelim();\n    if (message.sqlDialect !== undefined) {\n      writer.uint32(56).int32(message.sqlDialect);\n    }\n    for (const v of message.observedGoneBatch) {\n      writer.uint32(66).string(v!);\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): SatInStartReplicationReq {\n    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseSatInStartReplicationReq();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          if (tag !== 10) {\n            break;\n          }\n\n          message.lsn = reader.bytes();\n          continue;\n        case 2:\n          if (tag === 16) {\n            message.options.push(reader.int32() as any);\n\n            continue;\n          }\n\n          if (tag === 18) {\n            const end2 = reader.uint32() + reader.pos;\n            while (reader.pos < end2) {\n              message.options.push(reader.int32() as any);\n            }\n\n            continue;\n          }\n\n          break;\n        case 4:\n          if (tag !== 34) {\n            break;\n          }\n\n          message.subscriptionIds.push(reader.string());\n          continue;\n        case 5:\n          if (tag !== 42) {\n            break;\n          }\n\n          message.schemaVersion = reader.string();\n          continue;\n        case 6:\n          if (tag === 48) {\n            message.observedTransactionData.push(reader.uint64() as Long);\n\n            continue;\n          }\n\n          if (tag === 50) {\n            const end2 = reader.uint32() + reader.pos;\n            while (reader.pos < end2) {\n              message.observedTransactionData.push(reader.uint64() as Long);\n            }\n\n            continue;\n          }\n\n          break;\n        case 7:\n          if (tag !== 56) {\n            break;\n          }\n\n          message.sqlDialect = reader.int32() as any;\n          continue;\n        case 8:\n          if (tag !== 66) {\n            break;\n          }\n\n          message.observedGoneBatch.push(reader.string());\n          continue;\n      }\n      if ((tag & 7) === 4 || tag === 0) {\n        break;\n      }\n      reader.skipType(tag & 7);\n    }\n    return message;\n  },\n\n  create<I extends Exact<DeepPartial<SatInStartReplicationReq>, I>>(base?: I): SatInStartReplicationReq {\n    return SatInStartReplicationReq.fromPartial(base ?? ({} as any));\n  },\n  fromPartial<I extends Exact<DeepPartial<SatInStartReplicationReq>, I>>(object: I): SatInStartReplicationReq {\n    const message = createBaseSatInStartReplicationReq();\n    message.lsn = object.lsn ?? new Uint8Array(0);\n    message.options = object.options?.map((e) => e) || [];\n    message.subscriptionIds = object.subscriptionIds?.map((e) => e) || [];\n    message.schemaVersion = object.schemaVersion ?? undefined;\n    message.observedTransactionData = object.observedTransactionData?.map((e) => Long.fromValue(e)) || [];\n    message.sqlDialect = object.sqlDialect ?? undefined;\n    message.observedGoneBatch = object.observedGoneBatch?.map((e) => e) || [];\n    return message;\n  },\n};\n\nmessageTypeRegistry.set(SatInStartReplicationReq.$type, SatInStartReplicationReq);\n\nfunction createBaseSatInStartReplicationResp(): SatInStartReplicationResp {\n  return { $type: \"Electric.Satellite.SatInStartReplicationResp\", err: undefined, unackedWindowSize: undefined };\n}\n\nexport const SatInStartReplicationResp = {\n  $type: \"Electric.Satellite.SatInStartReplicationResp\" as const,\n\n  encode(message: SatInStartReplicationResp, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {\n    if (message.err !== undefined) {\n      SatInStartReplicationResp_ReplicationError.encode(message.err, writer.uint32(10).fork()).ldelim();\n    }\n    if (message.unackedWindowSize !== undefined) {\n      writer.uint32(16).uint32(message.unackedWindowSize);\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): SatInStartReplicationResp {\n    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseSatInStartReplicationResp();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          if (tag !== 10) {\n            break;\n          }\n\n          message.err = SatInStartReplicationResp_ReplicationError.decode(reader, reader.uint32());\n          continue;\n        case 2:\n          if (tag !== 16) {\n            break;\n          }\n\n          message.unackedWindowSize = reader.uint32();\n          continue;\n      }\n      if ((tag & 7) === 4 || tag === 0) {\n        break;\n      }\n      reader.skipType(tag & 7);\n    }\n    return message;\n  },\n\n  create<I extends Exact<DeepPartial<SatInStartReplicationResp>, I>>(base?: I): SatInStartReplicationResp {\n    return SatInStartReplicationResp.fromPartial(base ?? ({} as any));\n  },\n  fromPartial<I extends Exact<DeepPartial<SatInStartReplicationResp>, I>>(object: I): SatInStartReplicationResp {\n    const message = createBaseSatInStartReplicationResp();\n    message.err = (object.err !== undefined && object.err !== null)\n      ? SatInStartReplicationResp_ReplicationError.fromPartial(object.err)\n      : undefined;\n    message.unackedWindowSize = object.unackedWindowSize ?? undefined;\n    return message;\n  },\n};\n\nmessageTypeRegistry.set(SatInStartReplicationResp.$type, SatInStartReplicationResp);\n\nfunction createBaseSatInStartReplicationResp_ReplicationError(): SatInStartReplicationResp_ReplicationError {\n  return { $type: \"Electric.Satellite.SatInStartReplicationResp.ReplicationError\", code: 0, message: \"\" };\n}\n\nexport const SatInStartReplicationResp_ReplicationError = {\n  $type: \"Electric.Satellite.SatInStartReplicationResp.ReplicationError\" as const,\n\n  encode(message: SatInStartReplicationResp_ReplicationError, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {\n    if (message.code !== 0) {\n      writer.uint32(8).int32(message.code);\n    }\n    if (message.message !== \"\") {\n      writer.uint32(18).string(message.message);\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): SatInStartReplicationResp_ReplicationError {\n    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseSatInStartReplicationResp_ReplicationError();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          if (tag !== 8) {\n            break;\n          }\n\n          message.code = reader.int32() as any;\n          continue;\n        case 2:\n          if (tag !== 18) {\n            break;\n          }\n\n          message.message = reader.string();\n          continue;\n      }\n      if ((tag & 7) === 4 || tag === 0) {\n        break;\n      }\n      reader.skipType(tag & 7);\n    }\n    return message;\n  },\n\n  create<I extends Exact<DeepPartial<SatInStartReplicationResp_ReplicationError>, I>>(\n    base?: I,\n  ): SatInStartReplicationResp_ReplicationError {\n    return SatInStartReplicationResp_ReplicationError.fromPartial(base ?? ({} as any));\n  },\n  fromPartial<I extends Exact<DeepPartial<SatInStartReplicationResp_ReplicationError>, I>>(\n    object: I,\n  ): SatInStartReplicationResp_ReplicationError {\n    const message = createBaseSatInStartReplicationResp_ReplicationError();\n    message.code = object.code ?? 0;\n    message.message = object.message ?? \"\";\n    return message;\n  },\n};\n\nmessageTypeRegistry.set(SatInStartReplicationResp_ReplicationError.$type, SatInStartReplicationResp_ReplicationError);\n\nfunction createBaseSatInStopReplicationReq(): SatInStopReplicationReq {\n  return { $type: \"Electric.Satellite.SatInStopReplicationReq\" };\n}\n\nexport const SatInStopReplicationReq = {\n  $type: \"Electric.Satellite.SatInStopReplicationReq\" as const,\n\n  encode(_: SatInStopReplicationReq, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): SatInStopReplicationReq {\n    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseSatInStopReplicationReq();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n      }\n      if ((tag & 7) === 4 || tag === 0) {\n        break;\n      }\n      reader.skipType(tag & 7);\n    }\n    return message;\n  },\n\n  create<I extends Exact<DeepPartial<SatInStopReplicationReq>, I>>(base?: I): SatInStopReplicationReq {\n    return SatInStopReplicationReq.fromPartial(base ?? ({} as any));\n  },\n  fromPartial<I extends Exact<DeepPartial<SatInStopReplicationReq>, I>>(_: I): SatInStopReplicationReq {\n    const message = createBaseSatInStopReplicationReq();\n    return message;\n  },\n};\n\nmessageTypeRegistry.set(SatInStopReplicationReq.$type, SatInStopReplicationReq);\n\nfunction createBaseSatInStopReplicationResp(): SatInStopReplicationResp {\n  return { $type: \"Electric.Satellite.SatInStopReplicationResp\" };\n}\n\nexport const SatInStopReplicationResp = {\n  $type: \"Electric.Satellite.SatInStopReplicationResp\" as const,\n\n  encode(_: SatInStopReplicationResp, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): SatInStopReplicationResp {\n    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseSatInStopReplicationResp();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n      }\n      if ((tag & 7) === 4 || tag === 0) {\n        break;\n      }\n      reader.skipType(tag & 7);\n    }\n    return message;\n  },\n\n  create<I extends Exact<DeepPartial<SatInStopReplicationResp>, I>>(base?: I): SatInStopReplicationResp {\n    return SatInStopReplicationResp.fromPartial(base ?? ({} as any));\n  },\n  fromPartial<I extends Exact<DeepPartial<SatInStopReplicationResp>, I>>(_: I): SatInStopReplicationResp {\n    const message = createBaseSatInStopReplicationResp();\n    return message;\n  },\n};\n\nmessageTypeRegistry.set(SatInStopReplicationResp.$type, SatInStopReplicationResp);\n\nfunction createBaseSatRelationColumn(): SatRelationColumn {\n  return { $type: \"Electric.Satellite.SatRelationColumn\", name: \"\", type: \"\", primaryKey: false, isNullable: false };\n}\n\nexport const SatRelationColumn = {\n  $type: \"Electric.Satellite.SatRelationColumn\" as const,\n\n  encode(message: SatRelationColumn, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {\n    if (message.name !== \"\") {\n      writer.uint32(10).string(message.name);\n    }\n    if (message.type !== \"\") {\n      writer.uint32(18).string(message.type);\n    }\n    if (message.primaryKey !== false) {\n      writer.uint32(24).bool(message.primaryKey);\n    }\n    if (message.isNullable !== false) {\n      writer.uint32(32).bool(message.isNullable);\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): SatRelationColumn {\n    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseSatRelationColumn();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          if (tag !== 10) {\n            break;\n          }\n\n          message.name = reader.string();\n          continue;\n        case 2:\n          if (tag !== 18) {\n            break;\n          }\n\n          message.type = reader.string();\n          continue;\n        case 3:\n          if (tag !== 24) {\n            break;\n          }\n\n          message.primaryKey = reader.bool();\n          continue;\n        case 4:\n          if (tag !== 32) {\n            break;\n          }\n\n          message.isNullable = reader.bool();\n          continue;\n      }\n      if ((tag & 7) === 4 || tag === 0) {\n        break;\n      }\n      reader.skipType(tag & 7);\n    }\n    return message;\n  },\n\n  create<I extends Exact<DeepPartial<SatRelationColumn>, I>>(base?: I): SatRelationColumn {\n    return SatRelationColumn.fromPartial(base ?? ({} as any));\n  },\n  fromPartial<I extends Exact<DeepPartial<SatRelationColumn>, I>>(object: I): SatRelationColumn {\n    const message = createBaseSatRelationColumn();\n    message.name = object.name ?? \"\";\n    message.type = object.type ?? \"\";\n    message.primaryKey = object.primaryKey ?? false;\n    message.isNullable = object.isNullable ?? false;\n    return message;\n  },\n};\n\nmessageTypeRegistry.set(SatRelationColumn.$type, SatRelationColumn);\n\nfunction createBaseSatRelation(): SatRelation {\n  return {\n    $type: \"Electric.Satellite.SatRelation\",\n    schemaName: \"\",\n    tableType: 0,\n    tableName: \"\",\n    relationId: 0,\n    columns: [],\n  };\n}\n\nexport const SatRelation = {\n  $type: \"Electric.Satellite.SatRelation\" as const,\n\n  encode(message: SatRelation, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {\n    if (message.schemaName !== \"\") {\n      writer.uint32(10).string(message.schemaName);\n    }\n    if (message.tableType !== 0) {\n      writer.uint32(16).int32(message.tableType);\n    }\n    if (message.tableName !== \"\") {\n      writer.uint32(26).string(message.tableName);\n    }\n    if (message.relationId !== 0) {\n      writer.uint32(32).uint32(message.relationId);\n    }\n    for (const v of message.columns) {\n      SatRelationColumn.encode(v!, writer.uint32(42).fork()).ldelim();\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): SatRelation {\n    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseSatRelation();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          if (tag !== 10) {\n            break;\n          }\n\n          message.schemaName = reader.string();\n          continue;\n        case 2:\n          if (tag !== 16) {\n            break;\n          }\n\n          message.tableType = reader.int32() as any;\n          continue;\n        case 3:\n          if (tag !== 26) {\n            break;\n          }\n\n          message.tableName = reader.string();\n          continue;\n        case 4:\n          if (tag !== 32) {\n            break;\n          }\n\n          message.relationId = reader.uint32();\n          continue;\n        case 5:\n          if (tag !== 42) {\n            break;\n          }\n\n          message.columns.push(SatRelationColumn.decode(reader, reader.uint32()));\n          continue;\n      }\n      if ((tag & 7) === 4 || tag === 0) {\n        break;\n      }\n      reader.skipType(tag & 7);\n    }\n    return message;\n  },\n\n  create<I extends Exact<DeepPartial<SatRelation>, I>>(base?: I): SatRelation {\n    return SatRelation.fromPartial(base ?? ({} as any));\n  },\n  fromPartial<I extends Exact<DeepPartial<SatRelation>, I>>(object: I): SatRelation {\n    const message = createBaseSatRelation();\n    message.schemaName = object.schemaName ?? \"\";\n    message.tableType = object.tableType ?? 0;\n    message.tableName = object.tableName ?? \"\";\n    message.relationId = object.relationId ?? 0;\n    message.columns = object.columns?.map((e) => SatRelationColumn.fromPartial(e)) || [];\n    return message;\n  },\n};\n\nmessageTypeRegistry.set(SatRelation.$type, SatRelation);\n\nfunction createBaseSatOpLog(): SatOpLog {\n  return { $type: \"Electric.Satellite.SatOpLog\", ops: [] };\n}\n\nexport const SatOpLog = {\n  $type: \"Electric.Satellite.SatOpLog\" as const,\n\n  encode(message: SatOpLog, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {\n    for (const v of message.ops) {\n      SatTransOp.encode(v!, writer.uint32(10).fork()).ldelim();\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): SatOpLog {\n    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseSatOpLog();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          if (tag !== 10) {\n            break;\n          }\n\n          message.ops.push(SatTransOp.decode(reader, reader.uint32()));\n          continue;\n      }\n      if ((tag & 7) === 4 || tag === 0) {\n        break;\n      }\n      reader.skipType(tag & 7);\n    }\n    return message;\n  },\n\n  create<I extends Exact<DeepPartial<SatOpLog>, I>>(base?: I): SatOpLog {\n    return SatOpLog.fromPartial(base ?? ({} as any));\n  },\n  fromPartial<I extends Exact<DeepPartial<SatOpLog>, I>>(object: I): SatOpLog {\n    const message = createBaseSatOpLog();\n    message.ops = object.ops?.map((e) => SatTransOp.fromPartial(e)) || [];\n    return message;\n  },\n};\n\nmessageTypeRegistry.set(SatOpLog.$type, SatOpLog);\n\nfunction createBaseSatOpLogAck(): SatOpLogAck {\n  return {\n    $type: \"Electric.Satellite.SatOpLogAck\",\n    ackTimestamp: Long.UZERO,\n    lsn: new Uint8Array(0),\n    transactionId: Long.UZERO,\n    subscriptionIds: [],\n    additionalDataSourceIds: [],\n    goneSubscriptionIds: [],\n  };\n}\n\nexport const SatOpLogAck = {\n  $type: \"Electric.Satellite.SatOpLogAck\" as const,\n\n  encode(message: SatOpLogAck, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {\n    if (!message.ackTimestamp.equals(Long.UZERO)) {\n      writer.uint32(8).uint64(message.ackTimestamp);\n    }\n    if (message.lsn.length !== 0) {\n      writer.uint32(18).bytes(message.lsn);\n    }\n    if (!message.transactionId.equals(Long.UZERO)) {\n      writer.uint32(24).uint64(message.transactionId);\n    }\n    for (const v of message.subscriptionIds) {\n      writer.uint32(34).string(v!);\n    }\n    writer.uint32(42).fork();\n    for (const v of message.additionalDataSourceIds) {\n      writer.uint64(v);\n    }\n    writer.ldelim();\n    for (const v of message.goneSubscriptionIds) {\n      writer.uint32(50).string(v!);\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): SatOpLogAck {\n    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseSatOpLogAck();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          if (tag !== 8) {\n            break;\n          }\n\n          message.ackTimestamp = reader.uint64() as Long;\n          continue;\n        case 2:\n          if (tag !== 18) {\n            break;\n          }\n\n          message.lsn = reader.bytes();\n          continue;\n        case 3:\n          if (tag !== 24) {\n            break;\n          }\n\n          message.transactionId = reader.uint64() as Long;\n          continue;\n        case 4:\n          if (tag !== 34) {\n            break;\n          }\n\n          message.subscriptionIds.push(reader.string());\n          continue;\n        case 5:\n          if (tag === 40) {\n            message.additionalDataSourceIds.push(reader.uint64() as Long);\n\n            continue;\n          }\n\n          if (tag === 42) {\n            const end2 = reader.uint32() + reader.pos;\n            while (reader.pos < end2) {\n              message.additionalDataSourceIds.push(reader.uint64() as Long);\n            }\n\n            continue;\n          }\n\n          break;\n        case 6:\n          if (tag !== 50) {\n            break;\n          }\n\n          message.goneSubscriptionIds.push(reader.string());\n          continue;\n      }\n      if ((tag & 7) === 4 || tag === 0) {\n        break;\n      }\n      reader.skipType(tag & 7);\n    }\n    return message;\n  },\n\n  create<I extends Exact<DeepPartial<SatOpLogAck>, I>>(base?: I): SatOpLogAck {\n    return SatOpLogAck.fromPartial(base ?? ({} as any));\n  },\n  fromPartial<I extends Exact<DeepPartial<SatOpLogAck>, I>>(object: I): SatOpLogAck {\n    const message = createBaseSatOpLogAck();\n    message.ackTimestamp = (object.ackTimestamp !== undefined && object.ackTimestamp !== null)\n      ? Long.fromValue(object.ackTimestamp)\n      : Long.UZERO;\n    message.lsn = object.lsn ?? new Uint8Array(0);\n    message.transactionId = (object.transactionId !== undefined && object.transactionId !== null)\n      ? Long.fromValue(object.transactionId)\n      : Long.UZERO;\n    message.subscriptionIds = object.subscriptionIds?.map((e) => e) || [];\n    message.additionalDataSourceIds = object.additionalDataSourceIds?.map((e) => Long.fromValue(e)) || [];\n    message.goneSubscriptionIds = object.goneSubscriptionIds?.map((e) => e) || [];\n    return message;\n  },\n};\n\nmessageTypeRegistry.set(SatOpLogAck.$type, SatOpLogAck);\n\nfunction createBaseSatTransOp(): SatTransOp {\n  return {\n    $type: \"Electric.Satellite.SatTransOp\",\n    begin: undefined,\n    commit: undefined,\n    update: undefined,\n    insert: undefined,\n    delete: undefined,\n    migrate: undefined,\n    compensation: undefined,\n    gone: undefined,\n    additionalBegin: undefined,\n    additionalCommit: undefined,\n  };\n}\n\nexport const SatTransOp = {\n  $type: \"Electric.Satellite.SatTransOp\" as const,\n\n  encode(message: SatTransOp, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {\n    if (message.begin !== undefined) {\n      SatOpBegin.encode(message.begin, writer.uint32(10).fork()).ldelim();\n    }\n    if (message.commit !== undefined) {\n      SatOpCommit.encode(message.commit, writer.uint32(18).fork()).ldelim();\n    }\n    if (message.update !== undefined) {\n      SatOpUpdate.encode(message.update, writer.uint32(26).fork()).ldelim();\n    }\n    if (message.insert !== undefined) {\n      SatOpInsert.encode(message.insert, writer.uint32(34).fork()).ldelim();\n    }\n    if (message.delete !== undefined) {\n      SatOpDelete.encode(message.delete, writer.uint32(42).fork()).ldelim();\n    }\n    if (message.migrate !== undefined) {\n      SatOpMigrate.encode(message.migrate, writer.uint32(50).fork()).ldelim();\n    }\n    if (message.compensation !== undefined) {\n      SatOpCompensation.encode(message.compensation, writer.uint32(58).fork()).ldelim();\n    }\n    if (message.gone !== undefined) {\n      SatOpGone.encode(message.gone, writer.uint32(66).fork()).ldelim();\n    }\n    if (message.additionalBegin !== undefined) {\n      SatOpAdditionalBegin.encode(message.additionalBegin, writer.uint32(74).fork()).ldelim();\n    }\n    if (message.additionalCommit !== undefined) {\n      SatOpAdditionalCommit.encode(message.additionalCommit, writer.uint32(82).fork()).ldelim();\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): SatTransOp {\n    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseSatTransOp();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          if (tag !== 10) {\n            break;\n          }\n\n          message.begin = SatOpBegin.decode(reader, reader.uint32());\n          continue;\n        case 2:\n          if (tag !== 18) {\n            break;\n          }\n\n          message.commit = SatOpCommit.decode(reader, reader.uint32());\n          continue;\n        case 3:\n          if (tag !== 26) {\n            break;\n          }\n\n          message.update = SatOpUpdate.decode(reader, reader.uint32());\n          continue;\n        case 4:\n          if (tag !== 34) {\n            break;\n          }\n\n          message.insert = SatOpInsert.decode(reader, reader.uint32());\n          continue;\n        case 5:\n          if (tag !== 42) {\n            break;\n          }\n\n          message.delete = SatOpDelete.decode(reader, reader.uint32());\n          continue;\n        case 6:\n          if (tag !== 50) {\n            break;\n          }\n\n          message.migrate = SatOpMigrate.decode(reader, reader.uint32());\n          continue;\n        case 7:\n          if (tag !== 58) {\n            break;\n          }\n\n          message.compensation = SatOpCompensation.decode(reader, reader.uint32());\n          continue;\n        case 8:\n          if (tag !== 66) {\n            break;\n          }\n\n          message.gone = SatOpGone.decode(reader, reader.uint32());\n          continue;\n        case 9:\n          if (tag !== 74) {\n            break;\n          }\n\n          message.additionalBegin = SatOpAdditionalBegin.decode(reader, reader.uint32());\n          continue;\n        case 10:\n          if (tag !== 82) {\n            break;\n          }\n\n          message.additionalCommit = SatOpAdditionalCommit.decode(reader, reader.uint32());\n          continue;\n      }\n      if ((tag & 7) === 4 || tag === 0) {\n        break;\n      }\n      reader.skipType(tag & 7);\n    }\n    return message;\n  },\n\n  create<I extends Exact<DeepPartial<SatTransOp>, I>>(base?: I): SatTransOp {\n    return SatTransOp.fromPartial(base ?? ({} as any));\n  },\n  fromPartial<I extends Exact<DeepPartial<SatTransOp>, I>>(object: I): SatTransOp {\n    const message = createBaseSatTransOp();\n    message.begin = (object.begin !== undefined && object.begin !== null)\n      ? SatOpBegin.fromPartial(object.begin)\n      : undefined;\n    message.commit = (object.commit !== undefined && object.commit !== null)\n      ? SatOpCommit.fromPartial(object.commit)\n      : undefined;\n    message.update = (object.update !== undefined && object.update !== null)\n      ? SatOpUpdate.fromPartial(object.update)\n      : undefined;\n    message.insert = (object.insert !== undefined && object.insert !== null)\n      ? SatOpInsert.fromPartial(object.insert)\n      : undefined;\n    message.delete = (object.delete !== undefined && object.delete !== null)\n      ? SatOpDelete.fromPartial(object.delete)\n      : undefined;\n    message.migrate = (object.migrate !== undefined && object.migrate !== null)\n      ? SatOpMigrate.fromPartial(object.migrate)\n      : undefined;\n    message.compensation = (object.compensation !== undefined && object.compensation !== null)\n      ? SatOpCompensation.fromPartial(object.compensation)\n      : undefined;\n    message.gone = (object.gone !== undefined && object.gone !== null) ? SatOpGone.fromPartial(object.gone) : undefined;\n    message.additionalBegin = (object.additionalBegin !== undefined && object.additionalBegin !== null)\n      ? SatOpAdditionalBegin.fromPartial(object.additionalBegin)\n      : undefined;\n    message.additionalCommit = (object.additionalCommit !== undefined && object.additionalCommit !== null)\n      ? SatOpAdditionalCommit.fromPartial(object.additionalCommit)\n      : undefined;\n    return message;\n  },\n};\n\nmessageTypeRegistry.set(SatTransOp.$type, SatTransOp);\n\nfunction createBaseSatOpBegin(): SatOpBegin {\n  return {\n    $type: \"Electric.Satellite.SatOpBegin\",\n    commitTimestamp: Long.UZERO,\n    lsn: new Uint8Array(0),\n    origin: undefined,\n    isMigration: false,\n    additionalDataRef: Long.UZERO,\n    transactionId: undefined,\n  };\n}\n\nexport const SatOpBegin = {\n  $type: \"Electric.Satellite.SatOpBegin\" as const,\n\n  encode(message: SatOpBegin, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {\n    if (!message.commitTimestamp.equals(Long.UZERO)) {\n      writer.uint32(8).uint64(message.commitTimestamp);\n    }\n    if (message.lsn.length !== 0) {\n      writer.uint32(26).bytes(message.lsn);\n    }\n    if (message.origin !== undefined) {\n      writer.uint32(34).string(message.origin);\n    }\n    if (message.isMigration !== false) {\n      writer.uint32(40).bool(message.isMigration);\n    }\n    if (!message.additionalDataRef.equals(Long.UZERO)) {\n      writer.uint32(48).uint64(message.additionalDataRef);\n    }\n    if (message.transactionId !== undefined) {\n      writer.uint32(56).uint64(message.transactionId);\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): SatOpBegin {\n    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseSatOpBegin();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          if (tag !== 8) {\n            break;\n          }\n\n          message.commitTimestamp = reader.uint64() as Long;\n          continue;\n        case 3:\n          if (tag !== 26) {\n            break;\n          }\n\n          message.lsn = reader.bytes();\n          continue;\n        case 4:\n          if (tag !== 34) {\n            break;\n          }\n\n          message.origin = reader.string();\n          continue;\n        case 5:\n          if (tag !== 40) {\n            break;\n          }\n\n          message.isMigration = reader.bool();\n          continue;\n        case 6:\n          if (tag !== 48) {\n            break;\n          }\n\n          message.additionalDataRef = reader.uint64() as Long;\n          continue;\n        case 7:\n          if (tag !== 56) {\n            break;\n          }\n\n          message.transactionId = reader.uint64() as Long;\n          continue;\n      }\n      if ((tag & 7) === 4 || tag === 0) {\n        break;\n      }\n      reader.skipType(tag & 7);\n    }\n    return message;\n  },\n\n  create<I extends Exact<DeepPartial<SatOpBegin>, I>>(base?: I): SatOpBegin {\n    return SatOpBegin.fromPartial(base ?? ({} as any));\n  },\n  fromPartial<I extends Exact<DeepPartial<SatOpBegin>, I>>(object: I): SatOpBegin {\n    const message = createBaseSatOpBegin();\n    message.commitTimestamp = (object.commitTimestamp !== undefined && object.commitTimestamp !== null)\n      ? Long.fromValue(object.commitTimestamp)\n      : Long.UZERO;\n    message.lsn = object.lsn ?? new Uint8Array(0);\n    message.origin = object.origin ?? undefined;\n    message.isMigration = object.isMigration ?? false;\n    message.additionalDataRef = (object.additionalDataRef !== undefined && object.additionalDataRef !== null)\n      ? Long.fromValue(object.additionalDataRef)\n      : Long.UZERO;\n    message.transactionId = (object.transactionId !== undefined && object.transactionId !== null)\n      ? Long.fromValue(object.transactionId)\n      : undefined;\n    return message;\n  },\n};\n\nmessageTypeRegistry.set(SatOpBegin.$type, SatOpBegin);\n\nfunction createBaseSatOpAdditionalBegin(): SatOpAdditionalBegin {\n  return { $type: \"Electric.Satellite.SatOpAdditionalBegin\", ref: Long.UZERO };\n}\n\nexport const SatOpAdditionalBegin = {\n  $type: \"Electric.Satellite.SatOpAdditionalBegin\" as const,\n\n  encode(message: SatOpAdditionalBegin, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {\n    if (!message.ref.equals(Long.UZERO)) {\n      writer.uint32(8).uint64(message.ref);\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): SatOpAdditionalBegin {\n    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseSatOpAdditionalBegin();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          if (tag !== 8) {\n            break;\n          }\n\n          message.ref = reader.uint64() as Long;\n          continue;\n      }\n      if ((tag & 7) === 4 || tag === 0) {\n        break;\n      }\n      reader.skipType(tag & 7);\n    }\n    return message;\n  },\n\n  create<I extends Exact<DeepPartial<SatOpAdditionalBegin>, I>>(base?: I): SatOpAdditionalBegin {\n    return SatOpAdditionalBegin.fromPartial(base ?? ({} as any));\n  },\n  fromPartial<I extends Exact<DeepPartial<SatOpAdditionalBegin>, I>>(object: I): SatOpAdditionalBegin {\n    const message = createBaseSatOpAdditionalBegin();\n    message.ref = (object.ref !== undefined && object.ref !== null) ? Long.fromValue(object.ref) : Long.UZERO;\n    return message;\n  },\n};\n\nmessageTypeRegistry.set(SatOpAdditionalBegin.$type, SatOpAdditionalBegin);\n\nfunction createBaseSatOpCommit(): SatOpCommit {\n  return {\n    $type: \"Electric.Satellite.SatOpCommit\",\n    commitTimestamp: Long.UZERO,\n    lsn: new Uint8Array(0),\n    additionalDataRef: Long.UZERO,\n    transactionId: undefined,\n  };\n}\n\nexport const SatOpCommit = {\n  $type: \"Electric.Satellite.SatOpCommit\" as const,\n\n  encode(message: SatOpCommit, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {\n    if (!message.commitTimestamp.equals(Long.UZERO)) {\n      writer.uint32(8).uint64(message.commitTimestamp);\n    }\n    if (message.lsn.length !== 0) {\n      writer.uint32(26).bytes(message.lsn);\n    }\n    if (!message.additionalDataRef.equals(Long.UZERO)) {\n      writer.uint32(32).uint64(message.additionalDataRef);\n    }\n    if (message.transactionId !== undefined) {\n      writer.uint32(40).uint64(message.transactionId);\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): SatOpCommit {\n    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseSatOpCommit();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          if (tag !== 8) {\n            break;\n          }\n\n          message.commitTimestamp = reader.uint64() as Long;\n          continue;\n        case 3:\n          if (tag !== 26) {\n            break;\n          }\n\n          message.lsn = reader.bytes();\n          continue;\n        case 4:\n          if (tag !== 32) {\n            break;\n          }\n\n          message.additionalDataRef = reader.uint64() as Long;\n          continue;\n        case 5:\n          if (tag !== 40) {\n            break;\n          }\n\n          message.transactionId = reader.uint64() as Long;\n          continue;\n      }\n      if ((tag & 7) === 4 || tag === 0) {\n        break;\n      }\n      reader.skipType(tag & 7);\n    }\n    return message;\n  },\n\n  create<I extends Exact<DeepPartial<SatOpCommit>, I>>(base?: I): SatOpCommit {\n    return SatOpCommit.fromPartial(base ?? ({} as any));\n  },\n  fromPartial<I extends Exact<DeepPartial<SatOpCommit>, I>>(object: I): SatOpCommit {\n    const message = createBaseSatOpCommit();\n    message.commitTimestamp = (object.commitTimestamp !== undefined && object.commitTimestamp !== null)\n      ? Long.fromValue(object.commitTimestamp)\n      : Long.UZERO;\n    message.lsn = object.lsn ?? new Uint8Array(0);\n    message.additionalDataRef = (object.additionalDataRef !== undefined && object.additionalDataRef !== null)\n      ? Long.fromValue(object.additionalDataRef)\n      : Long.UZERO;\n    message.transactionId = (object.transactionId !== undefined && object.transactionId !== null)\n      ? Long.fromValue(object.transactionId)\n      : undefined;\n    return message;\n  },\n};\n\nmessageTypeRegistry.set(SatOpCommit.$type, SatOpCommit);\n\nfunction createBaseSatOpAdditionalCommit(): SatOpAdditionalCommit {\n  return { $type: \"Electric.Satellite.SatOpAdditionalCommit\", ref: Long.UZERO };\n}\n\nexport const SatOpAdditionalCommit = {\n  $type: \"Electric.Satellite.SatOpAdditionalCommit\" as const,\n\n  encode(message: SatOpAdditionalCommit, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {\n    if (!message.ref.equals(Long.UZERO)) {\n      writer.uint32(8).uint64(message.ref);\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): SatOpAdditionalCommit {\n    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseSatOpAdditionalCommit();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          if (tag !== 8) {\n            break;\n          }\n\n          message.ref = reader.uint64() as Long;\n          continue;\n      }\n      if ((tag & 7) === 4 || tag === 0) {\n        break;\n      }\n      reader.skipType(tag & 7);\n    }\n    return message;\n  },\n\n  create<I extends Exact<DeepPartial<SatOpAdditionalCommit>, I>>(base?: I): SatOpAdditionalCommit {\n    return SatOpAdditionalCommit.fromPartial(base ?? ({} as any));\n  },\n  fromPartial<I extends Exact<DeepPartial<SatOpAdditionalCommit>, I>>(object: I): SatOpAdditionalCommit {\n    const message = createBaseSatOpAdditionalCommit();\n    message.ref = (object.ref !== undefined && object.ref !== null) ? Long.fromValue(object.ref) : Long.UZERO;\n    return message;\n  },\n};\n\nmessageTypeRegistry.set(SatOpAdditionalCommit.$type, SatOpAdditionalCommit);\n\nfunction createBaseSatOpInsert(): SatOpInsert {\n  return { $type: \"Electric.Satellite.SatOpInsert\", relationId: 0, rowData: undefined, tags: [] };\n}\n\nexport const SatOpInsert = {\n  $type: \"Electric.Satellite.SatOpInsert\" as const,\n\n  encode(message: SatOpInsert, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {\n    if (message.relationId !== 0) {\n      writer.uint32(8).uint32(message.relationId);\n    }\n    if (message.rowData !== undefined) {\n      SatOpRow.encode(message.rowData, writer.uint32(18).fork()).ldelim();\n    }\n    for (const v of message.tags) {\n      writer.uint32(26).string(v!);\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): SatOpInsert {\n    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseSatOpInsert();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          if (tag !== 8) {\n            break;\n          }\n\n          message.relationId = reader.uint32();\n          continue;\n        case 2:\n          if (tag !== 18) {\n            break;\n          }\n\n          message.rowData = SatOpRow.decode(reader, reader.uint32());\n          continue;\n        case 3:\n          if (tag !== 26) {\n            break;\n          }\n\n          message.tags.push(reader.string());\n          continue;\n      }\n      if ((tag & 7) === 4 || tag === 0) {\n        break;\n      }\n      reader.skipType(tag & 7);\n    }\n    return message;\n  },\n\n  create<I extends Exact<DeepPartial<SatOpInsert>, I>>(base?: I): SatOpInsert {\n    return SatOpInsert.fromPartial(base ?? ({} as any));\n  },\n  fromPartial<I extends Exact<DeepPartial<SatOpInsert>, I>>(object: I): SatOpInsert {\n    const message = createBaseSatOpInsert();\n    message.relationId = object.relationId ?? 0;\n    message.rowData = (object.rowData !== undefined && object.rowData !== null)\n      ? SatOpRow.fromPartial(object.rowData)\n      : undefined;\n    message.tags = object.tags?.map((e) => e) || [];\n    return message;\n  },\n};\n\nmessageTypeRegistry.set(SatOpInsert.$type, SatOpInsert);\n\nfunction createBaseSatOpUpdate(): SatOpUpdate {\n  return {\n    $type: \"Electric.Satellite.SatOpUpdate\",\n    relationId: 0,\n    rowData: undefined,\n    oldRowData: undefined,\n    tags: [],\n  };\n}\n\nexport const SatOpUpdate = {\n  $type: \"Electric.Satellite.SatOpUpdate\" as const,\n\n  encode(message: SatOpUpdate, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {\n    if (message.relationId !== 0) {\n      writer.uint32(8).uint32(message.relationId);\n    }\n    if (message.rowData !== undefined) {\n      SatOpRow.encode(message.rowData, writer.uint32(18).fork()).ldelim();\n    }\n    if (message.oldRowData !== undefined) {\n      SatOpRow.encode(message.oldRowData, writer.uint32(26).fork()).ldelim();\n    }\n    for (const v of message.tags) {\n      writer.uint32(34).string(v!);\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): SatOpUpdate {\n    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseSatOpUpdate();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          if (tag !== 8) {\n            break;\n          }\n\n          message.relationId = reader.uint32();\n          continue;\n        case 2:\n          if (tag !== 18) {\n            break;\n          }\n\n          message.rowData = SatOpRow.decode(reader, reader.uint32());\n          continue;\n        case 3:\n          if (tag !== 26) {\n            break;\n          }\n\n          message.oldRowData = SatOpRow.decode(reader, reader.uint32());\n          continue;\n        case 4:\n          if (tag !== 34) {\n            break;\n          }\n\n          message.tags.push(reader.string());\n          continue;\n      }\n      if ((tag & 7) === 4 || tag === 0) {\n        break;\n      }\n      reader.skipType(tag & 7);\n    }\n    return message;\n  },\n\n  create<I extends Exact<DeepPartial<SatOpUpdate>, I>>(base?: I): SatOpUpdate {\n    return SatOpUpdate.fromPartial(base ?? ({} as any));\n  },\n  fromPartial<I extends Exact<DeepPartial<SatOpUpdate>, I>>(object: I): SatOpUpdate {\n    const message = createBaseSatOpUpdate();\n    message.relationId = object.relationId ?? 0;\n    message.rowData = (object.rowData !== undefined && object.rowData !== null)\n      ? SatOpRow.fromPartial(object.rowData)\n      : undefined;\n    message.oldRowData = (object.oldRowData !== undefined && object.oldRowData !== null)\n      ? SatOpRow.fromPartial(object.oldRowData)\n      : undefined;\n    message.tags = object.tags?.map((e) => e) || [];\n    return message;\n  },\n};\n\nmessageTypeRegistry.set(SatOpUpdate.$type, SatOpUpdate);\n\nfunction createBaseSatOpDelete(): SatOpDelete {\n  return { $type: \"Electric.Satellite.SatOpDelete\", relationId: 0, oldRowData: undefined, tags: [] };\n}\n\nexport const SatOpDelete = {\n  $type: \"Electric.Satellite.SatOpDelete\" as const,\n\n  encode(message: SatOpDelete, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {\n    if (message.relationId !== 0) {\n      writer.uint32(8).uint32(message.relationId);\n    }\n    if (message.oldRowData !== undefined) {\n      SatOpRow.encode(message.oldRowData, writer.uint32(18).fork()).ldelim();\n    }\n    for (const v of message.tags) {\n      writer.uint32(26).string(v!);\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): SatOpDelete {\n    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseSatOpDelete();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          if (tag !== 8) {\n            break;\n          }\n\n          message.relationId = reader.uint32();\n          continue;\n        case 2:\n          if (tag !== 18) {\n            break;\n          }\n\n          message.oldRowData = SatOpRow.decode(reader, reader.uint32());\n          continue;\n        case 3:\n          if (tag !== 26) {\n            break;\n          }\n\n          message.tags.push(reader.string());\n          continue;\n      }\n      if ((tag & 7) === 4 || tag === 0) {\n        break;\n      }\n      reader.skipType(tag & 7);\n    }\n    return message;\n  },\n\n  create<I extends Exact<DeepPartial<SatOpDelete>, I>>(base?: I): SatOpDelete {\n    return SatOpDelete.fromPartial(base ?? ({} as any));\n  },\n  fromPartial<I extends Exact<DeepPartial<SatOpDelete>, I>>(object: I): SatOpDelete {\n    const message = createBaseSatOpDelete();\n    message.relationId = object.relationId ?? 0;\n    message.oldRowData = (object.oldRowData !== undefined && object.oldRowData !== null)\n      ? SatOpRow.fromPartial(object.oldRowData)\n      : undefined;\n    message.tags = object.tags?.map((e) => e) || [];\n    return message;\n  },\n};\n\nmessageTypeRegistry.set(SatOpDelete.$type, SatOpDelete);\n\nfunction createBaseSatOpCompensation(): SatOpCompensation {\n  return { $type: \"Electric.Satellite.SatOpCompensation\", relationId: 0, pkData: undefined, tags: [] };\n}\n\nexport const SatOpCompensation = {\n  $type: \"Electric.Satellite.SatOpCompensation\" as const,\n\n  encode(message: SatOpCompensation, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {\n    if (message.relationId !== 0) {\n      writer.uint32(8).uint32(message.relationId);\n    }\n    if (message.pkData !== undefined) {\n      SatOpRow.encode(message.pkData, writer.uint32(18).fork()).ldelim();\n    }\n    for (const v of message.tags) {\n      writer.uint32(34).string(v!);\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): SatOpCompensation {\n    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseSatOpCompensation();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          if (tag !== 8) {\n            break;\n          }\n\n          message.relationId = reader.uint32();\n          continue;\n        case 2:\n          if (tag !== 18) {\n            break;\n          }\n\n          message.pkData = SatOpRow.decode(reader, reader.uint32());\n          continue;\n        case 4:\n          if (tag !== 34) {\n            break;\n          }\n\n          message.tags.push(reader.string());\n          continue;\n      }\n      if ((tag & 7) === 4 || tag === 0) {\n        break;\n      }\n      reader.skipType(tag & 7);\n    }\n    return message;\n  },\n\n  create<I extends Exact<DeepPartial<SatOpCompensation>, I>>(base?: I): SatOpCompensation {\n    return SatOpCompensation.fromPartial(base ?? ({} as any));\n  },\n  fromPartial<I extends Exact<DeepPartial<SatOpCompensation>, I>>(object: I): SatOpCompensation {\n    const message = createBaseSatOpCompensation();\n    message.relationId = object.relationId ?? 0;\n    message.pkData = (object.pkData !== undefined && object.pkData !== null)\n      ? SatOpRow.fromPartial(object.pkData)\n      : undefined;\n    message.tags = object.tags?.map((e) => e) || [];\n    return message;\n  },\n};\n\nmessageTypeRegistry.set(SatOpCompensation.$type, SatOpCompensation);\n\nfunction createBaseSatOpGone(): SatOpGone {\n  return { $type: \"Electric.Satellite.SatOpGone\", relationId: 0, pkData: undefined };\n}\n\nexport const SatOpGone = {\n  $type: \"Electric.Satellite.SatOpGone\" as const,\n\n  encode(message: SatOpGone, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {\n    if (message.relationId !== 0) {\n      writer.uint32(8).uint32(message.relationId);\n    }\n    if (message.pkData !== undefined) {\n      SatOpRow.encode(message.pkData, writer.uint32(18).fork()).ldelim();\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): SatOpGone {\n    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseSatOpGone();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          if (tag !== 8) {\n            break;\n          }\n\n          message.relationId = reader.uint32();\n          continue;\n        case 2:\n          if (tag !== 18) {\n            break;\n          }\n\n          message.pkData = SatOpRow.decode(reader, reader.uint32());\n          continue;\n      }\n      if ((tag & 7) === 4 || tag === 0) {\n        break;\n      }\n      reader.skipType(tag & 7);\n    }\n    return message;\n  },\n\n  create<I extends Exact<DeepPartial<SatOpGone>, I>>(base?: I): SatOpGone {\n    return SatOpGone.fromPartial(base ?? ({} as any));\n  },\n  fromPartial<I extends Exact<DeepPartial<SatOpGone>, I>>(object: I): SatOpGone {\n    const message = createBaseSatOpGone();\n    message.relationId = object.relationId ?? 0;\n    message.pkData = (object.pkData !== undefined && object.pkData !== null)\n      ? SatOpRow.fromPartial(object.pkData)\n      : undefined;\n    return message;\n  },\n};\n\nmessageTypeRegistry.set(SatOpGone.$type, SatOpGone);\n\nfunction createBaseSatOpRow(): SatOpRow {\n  return { $type: \"Electric.Satellite.SatOpRow\", nullsBitmask: new Uint8Array(0), values: [] };\n}\n\nexport const SatOpRow = {\n  $type: \"Electric.Satellite.SatOpRow\" as const,\n\n  encode(message: SatOpRow, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {\n    if (message.nullsBitmask.length !== 0) {\n      writer.uint32(10).bytes(message.nullsBitmask);\n    }\n    for (const v of message.values) {\n      writer.uint32(18).bytes(v!);\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): SatOpRow {\n    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseSatOpRow();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          if (tag !== 10) {\n            break;\n          }\n\n          message.nullsBitmask = reader.bytes();\n          continue;\n        case 2:\n          if (tag !== 18) {\n            break;\n          }\n\n          message.values.push(reader.bytes());\n          continue;\n      }\n      if ((tag & 7) === 4 || tag === 0) {\n        break;\n      }\n      reader.skipType(tag & 7);\n    }\n    return message;\n  },\n\n  create<I extends Exact<DeepPartial<SatOpRow>, I>>(base?: I): SatOpRow {\n    return SatOpRow.fromPartial(base ?? ({} as any));\n  },\n  fromPartial<I extends Exact<DeepPartial<SatOpRow>, I>>(object: I): SatOpRow {\n    const message = createBaseSatOpRow();\n    message.nullsBitmask = object.nullsBitmask ?? new Uint8Array(0);\n    message.values = object.values?.map((e) => e) || [];\n    return message;\n  },\n};\n\nmessageTypeRegistry.set(SatOpRow.$type, SatOpRow);\n\nfunction createBaseSatOpMigrate(): SatOpMigrate {\n  return { $type: \"Electric.Satellite.SatOpMigrate\", version: \"\", stmts: [], table: undefined, enumType: undefined };\n}\n\nexport const SatOpMigrate = {\n  $type: \"Electric.Satellite.SatOpMigrate\" as const,\n\n  encode(message: SatOpMigrate, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {\n    if (message.version !== \"\") {\n      writer.uint32(10).string(message.version);\n    }\n    for (const v of message.stmts) {\n      SatOpMigrate_Stmt.encode(v!, writer.uint32(18).fork()).ldelim();\n    }\n    if (message.table !== undefined) {\n      SatOpMigrate_Table.encode(message.table, writer.uint32(26).fork()).ldelim();\n    }\n    if (message.enumType !== undefined) {\n      SatOpMigrate_EnumType.encode(message.enumType, writer.uint32(34).fork()).ldelim();\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): SatOpMigrate {\n    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseSatOpMigrate();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          if (tag !== 10) {\n            break;\n          }\n\n          message.version = reader.string();\n          continue;\n        case 2:\n          if (tag !== 18) {\n            break;\n          }\n\n          message.stmts.push(SatOpMigrate_Stmt.decode(reader, reader.uint32()));\n          continue;\n        case 3:\n          if (tag !== 26) {\n            break;\n          }\n\n          message.table = SatOpMigrate_Table.decode(reader, reader.uint32());\n          continue;\n        case 4:\n          if (tag !== 34) {\n            break;\n          }\n\n          message.enumType = SatOpMigrate_EnumType.decode(reader, reader.uint32());\n          continue;\n      }\n      if ((tag & 7) === 4 || tag === 0) {\n        break;\n      }\n      reader.skipType(tag & 7);\n    }\n    return message;\n  },\n\n  create<I extends Exact<DeepPartial<SatOpMigrate>, I>>(base?: I): SatOpMigrate {\n    return SatOpMigrate.fromPartial(base ?? ({} as any));\n  },\n  fromPartial<I extends Exact<DeepPartial<SatOpMigrate>, I>>(object: I): SatOpMigrate {\n    const message = createBaseSatOpMigrate();\n    message.version = object.version ?? \"\";\n    message.stmts = object.stmts?.map((e) => SatOpMigrate_Stmt.fromPartial(e)) || [];\n    message.table = (object.table !== undefined && object.table !== null)\n      ? SatOpMigrate_Table.fromPartial(object.table)\n      : undefined;\n    message.enumType = (object.enumType !== undefined && object.enumType !== null)\n      ? SatOpMigrate_EnumType.fromPartial(object.enumType)\n      : undefined;\n    return message;\n  },\n};\n\nmessageTypeRegistry.set(SatOpMigrate.$type, SatOpMigrate);\n\nfunction createBaseSatOpMigrate_Stmt(): SatOpMigrate_Stmt {\n  return { $type: \"Electric.Satellite.SatOpMigrate.Stmt\", type: 0, sql: \"\" };\n}\n\nexport const SatOpMigrate_Stmt = {\n  $type: \"Electric.Satellite.SatOpMigrate.Stmt\" as const,\n\n  encode(message: SatOpMigrate_Stmt, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {\n    if (message.type !== 0) {\n      writer.uint32(8).int32(message.type);\n    }\n    if (message.sql !== \"\") {\n      writer.uint32(18).string(message.sql);\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): SatOpMigrate_Stmt {\n    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseSatOpMigrate_Stmt();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          if (tag !== 8) {\n            break;\n          }\n\n          message.type = reader.int32() as any;\n          continue;\n        case 2:\n          if (tag !== 18) {\n            break;\n          }\n\n          message.sql = reader.string();\n          continue;\n      }\n      if ((tag & 7) === 4 || tag === 0) {\n        break;\n      }\n      reader.skipType(tag & 7);\n    }\n    return message;\n  },\n\n  create<I extends Exact<DeepPartial<SatOpMigrate_Stmt>, I>>(base?: I): SatOpMigrate_Stmt {\n    return SatOpMigrate_Stmt.fromPartial(base ?? ({} as any));\n  },\n  fromPartial<I extends Exact<DeepPartial<SatOpMigrate_Stmt>, I>>(object: I): SatOpMigrate_Stmt {\n    const message = createBaseSatOpMigrate_Stmt();\n    message.type = object.type ?? 0;\n    message.sql = object.sql ?? \"\";\n    return message;\n  },\n};\n\nmessageTypeRegistry.set(SatOpMigrate_Stmt.$type, SatOpMigrate_Stmt);\n\nfunction createBaseSatOpMigrate_PgColumnType(): SatOpMigrate_PgColumnType {\n  return { $type: \"Electric.Satellite.SatOpMigrate.PgColumnType\", name: \"\", array: [], size: [] };\n}\n\nexport const SatOpMigrate_PgColumnType = {\n  $type: \"Electric.Satellite.SatOpMigrate.PgColumnType\" as const,\n\n  encode(message: SatOpMigrate_PgColumnType, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {\n    if (message.name !== \"\") {\n      writer.uint32(10).string(message.name);\n    }\n    writer.uint32(18).fork();\n    for (const v of message.array) {\n      writer.int32(v);\n    }\n    writer.ldelim();\n    writer.uint32(26).fork();\n    for (const v of message.size) {\n      writer.int32(v);\n    }\n    writer.ldelim();\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): SatOpMigrate_PgColumnType {\n    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseSatOpMigrate_PgColumnType();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          if (tag !== 10) {\n            break;\n          }\n\n          message.name = reader.string();\n          continue;\n        case 2:\n          if (tag === 16) {\n            message.array.push(reader.int32());\n\n            continue;\n          }\n\n          if (tag === 18) {\n            const end2 = reader.uint32() + reader.pos;\n            while (reader.pos < end2) {\n              message.array.push(reader.int32());\n            }\n\n            continue;\n          }\n\n          break;\n        case 3:\n          if (tag === 24) {\n            message.size.push(reader.int32());\n\n            continue;\n          }\n\n          if (tag === 26) {\n            const end2 = reader.uint32() + reader.pos;\n            while (reader.pos < end2) {\n              message.size.push(reader.int32());\n            }\n\n            continue;\n          }\n\n          break;\n      }\n      if ((tag & 7) === 4 || tag === 0) {\n        break;\n      }\n      reader.skipType(tag & 7);\n    }\n    return message;\n  },\n\n  create<I extends Exact<DeepPartial<SatOpMigrate_PgColumnType>, I>>(base?: I): SatOpMigrate_PgColumnType {\n    return SatOpMigrate_PgColumnType.fromPartial(base ?? ({} as any));\n  },\n  fromPartial<I extends Exact<DeepPartial<SatOpMigrate_PgColumnType>, I>>(object: I): SatOpMigrate_PgColumnType {\n    const message = createBaseSatOpMigrate_PgColumnType();\n    message.name = object.name ?? \"\";\n    message.array = object.array?.map((e) => e) || [];\n    message.size = object.size?.map((e) => e) || [];\n    return message;\n  },\n};\n\nmessageTypeRegistry.set(SatOpMigrate_PgColumnType.$type, SatOpMigrate_PgColumnType);\n\nfunction createBaseSatOpMigrate_Column(): SatOpMigrate_Column {\n  return { $type: \"Electric.Satellite.SatOpMigrate.Column\", name: \"\", sqliteType: \"\", pgType: undefined };\n}\n\nexport const SatOpMigrate_Column = {\n  $type: \"Electric.Satellite.SatOpMigrate.Column\" as const,\n\n  encode(message: SatOpMigrate_Column, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {\n    if (message.name !== \"\") {\n      writer.uint32(10).string(message.name);\n    }\n    if (message.sqliteType !== \"\") {\n      writer.uint32(18).string(message.sqliteType);\n    }\n    if (message.pgType !== undefined) {\n      SatOpMigrate_PgColumnType.encode(message.pgType, writer.uint32(26).fork()).ldelim();\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): SatOpMigrate_Column {\n    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseSatOpMigrate_Column();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          if (tag !== 10) {\n            break;\n          }\n\n          message.name = reader.string();\n          continue;\n        case 2:\n          if (tag !== 18) {\n            break;\n          }\n\n          message.sqliteType = reader.string();\n          continue;\n        case 3:\n          if (tag !== 26) {\n            break;\n          }\n\n          message.pgType = SatOpMigrate_PgColumnType.decode(reader, reader.uint32());\n          continue;\n      }\n      if ((tag & 7) === 4 || tag === 0) {\n        break;\n      }\n      reader.skipType(tag & 7);\n    }\n    return message;\n  },\n\n  create<I extends Exact<DeepPartial<SatOpMigrate_Column>, I>>(base?: I): SatOpMigrate_Column {\n    return SatOpMigrate_Column.fromPartial(base ?? ({} as any));\n  },\n  fromPartial<I extends Exact<DeepPartial<SatOpMigrate_Column>, I>>(object: I): SatOpMigrate_Column {\n    const message = createBaseSatOpMigrate_Column();\n    message.name = object.name ?? \"\";\n    message.sqliteType = object.sqliteType ?? \"\";\n    message.pgType = (object.pgType !== undefined && object.pgType !== null)\n      ? SatOpMigrate_PgColumnType.fromPartial(object.pgType)\n      : undefined;\n    return message;\n  },\n};\n\nmessageTypeRegistry.set(SatOpMigrate_Column.$type, SatOpMigrate_Column);\n\nfunction createBaseSatOpMigrate_ForeignKey(): SatOpMigrate_ForeignKey {\n  return { $type: \"Electric.Satellite.SatOpMigrate.ForeignKey\", fkCols: [], pkTable: \"\", pkCols: [] };\n}\n\nexport const SatOpMigrate_ForeignKey = {\n  $type: \"Electric.Satellite.SatOpMigrate.ForeignKey\" as const,\n\n  encode(message: SatOpMigrate_ForeignKey, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {\n    for (const v of message.fkCols) {\n      writer.uint32(10).string(v!);\n    }\n    if (message.pkTable !== \"\") {\n      writer.uint32(18).string(message.pkTable);\n    }\n    for (const v of message.pkCols) {\n      writer.uint32(26).string(v!);\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): SatOpMigrate_ForeignKey {\n    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseSatOpMigrate_ForeignKey();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          if (tag !== 10) {\n            break;\n          }\n\n          message.fkCols.push(reader.string());\n          continue;\n        case 2:\n          if (tag !== 18) {\n            break;\n          }\n\n          message.pkTable = reader.string();\n          continue;\n        case 3:\n          if (tag !== 26) {\n            break;\n          }\n\n          message.pkCols.push(reader.string());\n          continue;\n      }\n      if ((tag & 7) === 4 || tag === 0) {\n        break;\n      }\n      reader.skipType(tag & 7);\n    }\n    return message;\n  },\n\n  create<I extends Exact<DeepPartial<SatOpMigrate_ForeignKey>, I>>(base?: I): SatOpMigrate_ForeignKey {\n    return SatOpMigrate_ForeignKey.fromPartial(base ?? ({} as any));\n  },\n  fromPartial<I extends Exact<DeepPartial<SatOpMigrate_ForeignKey>, I>>(object: I): SatOpMigrate_ForeignKey {\n    const message = createBaseSatOpMigrate_ForeignKey();\n    message.fkCols = object.fkCols?.map((e) => e) || [];\n    message.pkTable = object.pkTable ?? \"\";\n    message.pkCols = object.pkCols?.map((e) => e) || [];\n    return message;\n  },\n};\n\nmessageTypeRegistry.set(SatOpMigrate_ForeignKey.$type, SatOpMigrate_ForeignKey);\n\nfunction createBaseSatOpMigrate_Table(): SatOpMigrate_Table {\n  return { $type: \"Electric.Satellite.SatOpMigrate.Table\", name: \"\", columns: [], fks: [], pks: [] };\n}\n\nexport const SatOpMigrate_Table = {\n  $type: \"Electric.Satellite.SatOpMigrate.Table\" as const,\n\n  encode(message: SatOpMigrate_Table, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {\n    if (message.name !== \"\") {\n      writer.uint32(10).string(message.name);\n    }\n    for (const v of message.columns) {\n      SatOpMigrate_Column.encode(v!, writer.uint32(18).fork()).ldelim();\n    }\n    for (const v of message.fks) {\n      SatOpMigrate_ForeignKey.encode(v!, writer.uint32(26).fork()).ldelim();\n    }\n    for (const v of message.pks) {\n      writer.uint32(34).string(v!);\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): SatOpMigrate_Table {\n    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseSatOpMigrate_Table();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          if (tag !== 10) {\n            break;\n          }\n\n          message.name = reader.string();\n          continue;\n        case 2:\n          if (tag !== 18) {\n            break;\n          }\n\n          message.columns.push(SatOpMigrate_Column.decode(reader, reader.uint32()));\n          continue;\n        case 3:\n          if (tag !== 26) {\n            break;\n          }\n\n          message.fks.push(SatOpMigrate_ForeignKey.decode(reader, reader.uint32()));\n          continue;\n        case 4:\n          if (tag !== 34) {\n            break;\n          }\n\n          message.pks.push(reader.string());\n          continue;\n      }\n      if ((tag & 7) === 4 || tag === 0) {\n        break;\n      }\n      reader.skipType(tag & 7);\n    }\n    return message;\n  },\n\n  create<I extends Exact<DeepPartial<SatOpMigrate_Table>, I>>(base?: I): SatOpMigrate_Table {\n    return SatOpMigrate_Table.fromPartial(base ?? ({} as any));\n  },\n  fromPartial<I extends Exact<DeepPartial<SatOpMigrate_Table>, I>>(object: I): SatOpMigrate_Table {\n    const message = createBaseSatOpMigrate_Table();\n    message.name = object.name ?? \"\";\n    message.columns = object.columns?.map((e) => SatOpMigrate_Column.fromPartial(e)) || [];\n    message.fks = object.fks?.map((e) => SatOpMigrate_ForeignKey.fromPartial(e)) || [];\n    message.pks = object.pks?.map((e) => e) || [];\n    return message;\n  },\n};\n\nmessageTypeRegistry.set(SatOpMigrate_Table.$type, SatOpMigrate_Table);\n\nfunction createBaseSatOpMigrate_EnumType(): SatOpMigrate_EnumType {\n  return { $type: \"Electric.Satellite.SatOpMigrate.EnumType\", name: \"\", values: [] };\n}\n\nexport const SatOpMigrate_EnumType = {\n  $type: \"Electric.Satellite.SatOpMigrate.EnumType\" as const,\n\n  encode(message: SatOpMigrate_EnumType, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {\n    if (message.name !== \"\") {\n      writer.uint32(10).string(message.name);\n    }\n    for (const v of message.values) {\n      writer.uint32(18).string(v!);\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): SatOpMigrate_EnumType {\n    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseSatOpMigrate_EnumType();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          if (tag !== 10) {\n            break;\n          }\n\n          message.name = reader.string();\n          continue;\n        case 2:\n          if (tag !== 18) {\n            break;\n          }\n\n          message.values.push(reader.string());\n          continue;\n      }\n      if ((tag & 7) === 4 || tag === 0) {\n        break;\n      }\n      reader.skipType(tag & 7);\n    }\n    return message;\n  },\n\n  create<I extends Exact<DeepPartial<SatOpMigrate_EnumType>, I>>(base?: I): SatOpMigrate_EnumType {\n    return SatOpMigrate_EnumType.fromPartial(base ?? ({} as any));\n  },\n  fromPartial<I extends Exact<DeepPartial<SatOpMigrate_EnumType>, I>>(object: I): SatOpMigrate_EnumType {\n    const message = createBaseSatOpMigrate_EnumType();\n    message.name = object.name ?? \"\";\n    message.values = object.values?.map((e) => e) || [];\n    return message;\n  },\n};\n\nmessageTypeRegistry.set(SatOpMigrate_EnumType.$type, SatOpMigrate_EnumType);\n\nfunction createBaseSatSubsReq(): SatSubsReq {\n  return { $type: \"Electric.Satellite.SatSubsReq\", subscriptionId: \"\", shapeRequests: [] };\n}\n\nexport const SatSubsReq = {\n  $type: \"Electric.Satellite.SatSubsReq\" as const,\n\n  encode(message: SatSubsReq, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {\n    if (message.subscriptionId !== \"\") {\n      writer.uint32(10).string(message.subscriptionId);\n    }\n    for (const v of message.shapeRequests) {\n      SatShapeReq.encode(v!, writer.uint32(18).fork()).ldelim();\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): SatSubsReq {\n    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseSatSubsReq();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          if (tag !== 10) {\n            break;\n          }\n\n          message.subscriptionId = reader.string();\n          continue;\n        case 2:\n          if (tag !== 18) {\n            break;\n          }\n\n          message.shapeRequests.push(SatShapeReq.decode(reader, reader.uint32()));\n          continue;\n      }\n      if ((tag & 7) === 4 || tag === 0) {\n        break;\n      }\n      reader.skipType(tag & 7);\n    }\n    return message;\n  },\n\n  create<I extends Exact<DeepPartial<SatSubsReq>, I>>(base?: I): SatSubsReq {\n    return SatSubsReq.fromPartial(base ?? ({} as any));\n  },\n  fromPartial<I extends Exact<DeepPartial<SatSubsReq>, I>>(object: I): SatSubsReq {\n    const message = createBaseSatSubsReq();\n    message.subscriptionId = object.subscriptionId ?? \"\";\n    message.shapeRequests = object.shapeRequests?.map((e) => SatShapeReq.fromPartial(e)) || [];\n    return message;\n  },\n};\n\nmessageTypeRegistry.set(SatSubsReq.$type, SatSubsReq);\n\nfunction createBaseSatSubsResp(): SatSubsResp {\n  return { $type: \"Electric.Satellite.SatSubsResp\", subscriptionId: \"\", err: undefined };\n}\n\nexport const SatSubsResp = {\n  $type: \"Electric.Satellite.SatSubsResp\" as const,\n\n  encode(message: SatSubsResp, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {\n    if (message.subscriptionId !== \"\") {\n      writer.uint32(10).string(message.subscriptionId);\n    }\n    if (message.err !== undefined) {\n      SatSubsResp_SatSubsError.encode(message.err, writer.uint32(18).fork()).ldelim();\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): SatSubsResp {\n    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseSatSubsResp();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          if (tag !== 10) {\n            break;\n          }\n\n          message.subscriptionId = reader.string();\n          continue;\n        case 2:\n          if (tag !== 18) {\n            break;\n          }\n\n          message.err = SatSubsResp_SatSubsError.decode(reader, reader.uint32());\n          continue;\n      }\n      if ((tag & 7) === 4 || tag === 0) {\n        break;\n      }\n      reader.skipType(tag & 7);\n    }\n    return message;\n  },\n\n  create<I extends Exact<DeepPartial<SatSubsResp>, I>>(base?: I): SatSubsResp {\n    return SatSubsResp.fromPartial(base ?? ({} as any));\n  },\n  fromPartial<I extends Exact<DeepPartial<SatSubsResp>, I>>(object: I): SatSubsResp {\n    const message = createBaseSatSubsResp();\n    message.subscriptionId = object.subscriptionId ?? \"\";\n    message.err = (object.err !== undefined && object.err !== null)\n      ? SatSubsResp_SatSubsError.fromPartial(object.err)\n      : undefined;\n    return message;\n  },\n};\n\nmessageTypeRegistry.set(SatSubsResp.$type, SatSubsResp);\n\nfunction createBaseSatSubsResp_SatSubsError(): SatSubsResp_SatSubsError {\n  return { $type: \"Electric.Satellite.SatSubsResp.SatSubsError\", code: 0, message: \"\", shapeRequestError: [] };\n}\n\nexport const SatSubsResp_SatSubsError = {\n  $type: \"Electric.Satellite.SatSubsResp.SatSubsError\" as const,\n\n  encode(message: SatSubsResp_SatSubsError, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {\n    if (message.code !== 0) {\n      writer.uint32(16).int32(message.code);\n    }\n    if (message.message !== \"\") {\n      writer.uint32(26).string(message.message);\n    }\n    for (const v of message.shapeRequestError) {\n      SatSubsResp_SatSubsError_ShapeReqError.encode(v!, writer.uint32(34).fork()).ldelim();\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): SatSubsResp_SatSubsError {\n    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseSatSubsResp_SatSubsError();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 2:\n          if (tag !== 16) {\n            break;\n          }\n\n          message.code = reader.int32() as any;\n          continue;\n        case 3:\n          if (tag !== 26) {\n            break;\n          }\n\n          message.message = reader.string();\n          continue;\n        case 4:\n          if (tag !== 34) {\n            break;\n          }\n\n          message.shapeRequestError.push(SatSubsResp_SatSubsError_ShapeReqError.decode(reader, reader.uint32()));\n          continue;\n      }\n      if ((tag & 7) === 4 || tag === 0) {\n        break;\n      }\n      reader.skipType(tag & 7);\n    }\n    return message;\n  },\n\n  create<I extends Exact<DeepPartial<SatSubsResp_SatSubsError>, I>>(base?: I): SatSubsResp_SatSubsError {\n    return SatSubsResp_SatSubsError.fromPartial(base ?? ({} as any));\n  },\n  fromPartial<I extends Exact<DeepPartial<SatSubsResp_SatSubsError>, I>>(object: I): SatSubsResp_SatSubsError {\n    const message = createBaseSatSubsResp_SatSubsError();\n    message.code = object.code ?? 0;\n    message.message = object.message ?? \"\";\n    message.shapeRequestError =\n      object.shapeRequestError?.map((e) => SatSubsResp_SatSubsError_ShapeReqError.fromPartial(e)) || [];\n    return message;\n  },\n};\n\nmessageTypeRegistry.set(SatSubsResp_SatSubsError.$type, SatSubsResp_SatSubsError);\n\nfunction createBaseSatSubsResp_SatSubsError_ShapeReqError(): SatSubsResp_SatSubsError_ShapeReqError {\n  return { $type: \"Electric.Satellite.SatSubsResp.SatSubsError.ShapeReqError\", code: 0, message: \"\", requestId: \"\" };\n}\n\nexport const SatSubsResp_SatSubsError_ShapeReqError = {\n  $type: \"Electric.Satellite.SatSubsResp.SatSubsError.ShapeReqError\" as const,\n\n  encode(message: SatSubsResp_SatSubsError_ShapeReqError, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {\n    if (message.code !== 0) {\n      writer.uint32(8).int32(message.code);\n    }\n    if (message.message !== \"\") {\n      writer.uint32(18).string(message.message);\n    }\n    if (message.requestId !== \"\") {\n      writer.uint32(26).string(message.requestId);\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): SatSubsResp_SatSubsError_ShapeReqError {\n    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseSatSubsResp_SatSubsError_ShapeReqError();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          if (tag !== 8) {\n            break;\n          }\n\n          message.code = reader.int32() as any;\n          continue;\n        case 2:\n          if (tag !== 18) {\n            break;\n          }\n\n          message.message = reader.string();\n          continue;\n        case 3:\n          if (tag !== 26) {\n            break;\n          }\n\n          message.requestId = reader.string();\n          continue;\n      }\n      if ((tag & 7) === 4 || tag === 0) {\n        break;\n      }\n      reader.skipType(tag & 7);\n    }\n    return message;\n  },\n\n  create<I extends Exact<DeepPartial<SatSubsResp_SatSubsError_ShapeReqError>, I>>(\n    base?: I,\n  ): SatSubsResp_SatSubsError_ShapeReqError {\n    return SatSubsResp_SatSubsError_ShapeReqError.fromPartial(base ?? ({} as any));\n  },\n  fromPartial<I extends Exact<DeepPartial<SatSubsResp_SatSubsError_ShapeReqError>, I>>(\n    object: I,\n  ): SatSubsResp_SatSubsError_ShapeReqError {\n    const message = createBaseSatSubsResp_SatSubsError_ShapeReqError();\n    message.code = object.code ?? 0;\n    message.message = object.message ?? \"\";\n    message.requestId = object.requestId ?? \"\";\n    return message;\n  },\n};\n\nmessageTypeRegistry.set(SatSubsResp_SatSubsError_ShapeReqError.$type, SatSubsResp_SatSubsError_ShapeReqError);\n\nfunction createBaseSatUnsubsReq(): SatUnsubsReq {\n  return { $type: \"Electric.Satellite.SatUnsubsReq\", subscriptionIds: [] };\n}\n\nexport const SatUnsubsReq = {\n  $type: \"Electric.Satellite.SatUnsubsReq\" as const,\n\n  encode(message: SatUnsubsReq, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {\n    for (const v of message.subscriptionIds) {\n      writer.uint32(10).string(v!);\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): SatUnsubsReq {\n    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseSatUnsubsReq();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          if (tag !== 10) {\n            break;\n          }\n\n          message.subscriptionIds.push(reader.string());\n          continue;\n      }\n      if ((tag & 7) === 4 || tag === 0) {\n        break;\n      }\n      reader.skipType(tag & 7);\n    }\n    return message;\n  },\n\n  create<I extends Exact<DeepPartial<SatUnsubsReq>, I>>(base?: I): SatUnsubsReq {\n    return SatUnsubsReq.fromPartial(base ?? ({} as any));\n  },\n  fromPartial<I extends Exact<DeepPartial<SatUnsubsReq>, I>>(object: I): SatUnsubsReq {\n    const message = createBaseSatUnsubsReq();\n    message.subscriptionIds = object.subscriptionIds?.map((e) => e) || [];\n    return message;\n  },\n};\n\nmessageTypeRegistry.set(SatUnsubsReq.$type, SatUnsubsReq);\n\nfunction createBaseSatUnsubsResp(): SatUnsubsResp {\n  return { $type: \"Electric.Satellite.SatUnsubsResp\" };\n}\n\nexport const SatUnsubsResp = {\n  $type: \"Electric.Satellite.SatUnsubsResp\" as const,\n\n  encode(_: SatUnsubsResp, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): SatUnsubsResp {\n    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseSatUnsubsResp();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n      }\n      if ((tag & 7) === 4 || tag === 0) {\n        break;\n      }\n      reader.skipType(tag & 7);\n    }\n    return message;\n  },\n\n  create<I extends Exact<DeepPartial<SatUnsubsResp>, I>>(base?: I): SatUnsubsResp {\n    return SatUnsubsResp.fromPartial(base ?? ({} as any));\n  },\n  fromPartial<I extends Exact<DeepPartial<SatUnsubsResp>, I>>(_: I): SatUnsubsResp {\n    const message = createBaseSatUnsubsResp();\n    return message;\n  },\n};\n\nmessageTypeRegistry.set(SatUnsubsResp.$type, SatUnsubsResp);\n\nfunction createBaseSatShapeReq(): SatShapeReq {\n  return { $type: \"Electric.Satellite.SatShapeReq\", requestId: \"\", shapeDefinition: undefined };\n}\n\nexport const SatShapeReq = {\n  $type: \"Electric.Satellite.SatShapeReq\" as const,\n\n  encode(message: SatShapeReq, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {\n    if (message.requestId !== \"\") {\n      writer.uint32(10).string(message.requestId);\n    }\n    if (message.shapeDefinition !== undefined) {\n      SatShapeDef.encode(message.shapeDefinition, writer.uint32(18).fork()).ldelim();\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): SatShapeReq {\n    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseSatShapeReq();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          if (tag !== 10) {\n            break;\n          }\n\n          message.requestId = reader.string();\n          continue;\n        case 2:\n          if (tag !== 18) {\n            break;\n          }\n\n          message.shapeDefinition = SatShapeDef.decode(reader, reader.uint32());\n          continue;\n      }\n      if ((tag & 7) === 4 || tag === 0) {\n        break;\n      }\n      reader.skipType(tag & 7);\n    }\n    return message;\n  },\n\n  create<I extends Exact<DeepPartial<SatShapeReq>, I>>(base?: I): SatShapeReq {\n    return SatShapeReq.fromPartial(base ?? ({} as any));\n  },\n  fromPartial<I extends Exact<DeepPartial<SatShapeReq>, I>>(object: I): SatShapeReq {\n    const message = createBaseSatShapeReq();\n    message.requestId = object.requestId ?? \"\";\n    message.shapeDefinition = (object.shapeDefinition !== undefined && object.shapeDefinition !== null)\n      ? SatShapeDef.fromPartial(object.shapeDefinition)\n      : undefined;\n    return message;\n  },\n};\n\nmessageTypeRegistry.set(SatShapeReq.$type, SatShapeReq);\n\nfunction createBaseSatShapeDef(): SatShapeDef {\n  return { $type: \"Electric.Satellite.SatShapeDef\", selects: [] };\n}\n\nexport const SatShapeDef = {\n  $type: \"Electric.Satellite.SatShapeDef\" as const,\n\n  encode(message: SatShapeDef, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {\n    for (const v of message.selects) {\n      SatShapeDef_Select.encode(v!, writer.uint32(10).fork()).ldelim();\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): SatShapeDef {\n    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseSatShapeDef();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          if (tag !== 10) {\n            break;\n          }\n\n          message.selects.push(SatShapeDef_Select.decode(reader, reader.uint32()));\n          continue;\n      }\n      if ((tag & 7) === 4 || tag === 0) {\n        break;\n      }\n      reader.skipType(tag & 7);\n    }\n    return message;\n  },\n\n  create<I extends Exact<DeepPartial<SatShapeDef>, I>>(base?: I): SatShapeDef {\n    return SatShapeDef.fromPartial(base ?? ({} as any));\n  },\n  fromPartial<I extends Exact<DeepPartial<SatShapeDef>, I>>(object: I): SatShapeDef {\n    const message = createBaseSatShapeDef();\n    message.selects = object.selects?.map((e) => SatShapeDef_Select.fromPartial(e)) || [];\n    return message;\n  },\n};\n\nmessageTypeRegistry.set(SatShapeDef.$type, SatShapeDef);\n\nfunction createBaseSatShapeDef_Relation(): SatShapeDef_Relation {\n  return { $type: \"Electric.Satellite.SatShapeDef.Relation\", foreignKey: [], select: undefined };\n}\n\nexport const SatShapeDef_Relation = {\n  $type: \"Electric.Satellite.SatShapeDef.Relation\" as const,\n\n  encode(message: SatShapeDef_Relation, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {\n    for (const v of message.foreignKey) {\n      writer.uint32(10).string(v!);\n    }\n    if (message.select !== undefined) {\n      SatShapeDef_Select.encode(message.select, writer.uint32(18).fork()).ldelim();\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): SatShapeDef_Relation {\n    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseSatShapeDef_Relation();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          if (tag !== 10) {\n            break;\n          }\n\n          message.foreignKey.push(reader.string());\n          continue;\n        case 2:\n          if (tag !== 18) {\n            break;\n          }\n\n          message.select = SatShapeDef_Select.decode(reader, reader.uint32());\n          continue;\n      }\n      if ((tag & 7) === 4 || tag === 0) {\n        break;\n      }\n      reader.skipType(tag & 7);\n    }\n    return message;\n  },\n\n  create<I extends Exact<DeepPartial<SatShapeDef_Relation>, I>>(base?: I): SatShapeDef_Relation {\n    return SatShapeDef_Relation.fromPartial(base ?? ({} as any));\n  },\n  fromPartial<I extends Exact<DeepPartial<SatShapeDef_Relation>, I>>(object: I): SatShapeDef_Relation {\n    const message = createBaseSatShapeDef_Relation();\n    message.foreignKey = object.foreignKey?.map((e) => e) || [];\n    message.select = (object.select !== undefined && object.select !== null)\n      ? SatShapeDef_Select.fromPartial(object.select)\n      : undefined;\n    return message;\n  },\n};\n\nmessageTypeRegistry.set(SatShapeDef_Relation.$type, SatShapeDef_Relation);\n\nfunction createBaseSatShapeDef_Select(): SatShapeDef_Select {\n  return { $type: \"Electric.Satellite.SatShapeDef.Select\", tablename: \"\", where: \"\", include: [] };\n}\n\nexport const SatShapeDef_Select = {\n  $type: \"Electric.Satellite.SatShapeDef.Select\" as const,\n\n  encode(message: SatShapeDef_Select, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {\n    if (message.tablename !== \"\") {\n      writer.uint32(10).string(message.tablename);\n    }\n    if (message.where !== \"\") {\n      writer.uint32(18).string(message.where);\n    }\n    for (const v of message.include) {\n      SatShapeDef_Relation.encode(v!, writer.uint32(26).fork()).ldelim();\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): SatShapeDef_Select {\n    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseSatShapeDef_Select();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          if (tag !== 10) {\n            break;\n          }\n\n          message.tablename = reader.string();\n          continue;\n        case 2:\n          if (tag !== 18) {\n            break;\n          }\n\n          message.where = reader.string();\n          continue;\n        case 3:\n          if (tag !== 26) {\n            break;\n          }\n\n          message.include.push(SatShapeDef_Relation.decode(reader, reader.uint32()));\n          continue;\n      }\n      if ((tag & 7) === 4 || tag === 0) {\n        break;\n      }\n      reader.skipType(tag & 7);\n    }\n    return message;\n  },\n\n  create<I extends Exact<DeepPartial<SatShapeDef_Select>, I>>(base?: I): SatShapeDef_Select {\n    return SatShapeDef_Select.fromPartial(base ?? ({} as any));\n  },\n  fromPartial<I extends Exact<DeepPartial<SatShapeDef_Select>, I>>(object: I): SatShapeDef_Select {\n    const message = createBaseSatShapeDef_Select();\n    message.tablename = object.tablename ?? \"\";\n    message.where = object.where ?? \"\";\n    message.include = object.include?.map((e) => SatShapeDef_Relation.fromPartial(e)) || [];\n    return message;\n  },\n};\n\nmessageTypeRegistry.set(SatShapeDef_Select.$type, SatShapeDef_Select);\n\nfunction createBaseSatSubsDataError(): SatSubsDataError {\n  return {\n    $type: \"Electric.Satellite.SatSubsDataError\",\n    code: 0,\n    message: \"\",\n    subscriptionId: \"\",\n    shapeRequestError: [],\n  };\n}\n\nexport const SatSubsDataError = {\n  $type: \"Electric.Satellite.SatSubsDataError\" as const,\n\n  encode(message: SatSubsDataError, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {\n    if (message.code !== 0) {\n      writer.uint32(8).int32(message.code);\n    }\n    if (message.message !== \"\") {\n      writer.uint32(18).string(message.message);\n    }\n    if (message.subscriptionId !== \"\") {\n      writer.uint32(26).string(message.subscriptionId);\n    }\n    for (const v of message.shapeRequestError) {\n      SatSubsDataError_ShapeReqError.encode(v!, writer.uint32(34).fork()).ldelim();\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): SatSubsDataError {\n    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseSatSubsDataError();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          if (tag !== 8) {\n            break;\n          }\n\n          message.code = reader.int32() as any;\n          continue;\n        case 2:\n          if (tag !== 18) {\n            break;\n          }\n\n          message.message = reader.string();\n          continue;\n        case 3:\n          if (tag !== 26) {\n            break;\n          }\n\n          message.subscriptionId = reader.string();\n          continue;\n        case 4:\n          if (tag !== 34) {\n            break;\n          }\n\n          message.shapeRequestError.push(SatSubsDataError_ShapeReqError.decode(reader, reader.uint32()));\n          continue;\n      }\n      if ((tag & 7) === 4 || tag === 0) {\n        break;\n      }\n      reader.skipType(tag & 7);\n    }\n    return message;\n  },\n\n  create<I extends Exact<DeepPartial<SatSubsDataError>, I>>(base?: I): SatSubsDataError {\n    return SatSubsDataError.fromPartial(base ?? ({} as any));\n  },\n  fromPartial<I extends Exact<DeepPartial<SatSubsDataError>, I>>(object: I): SatSubsDataError {\n    const message = createBaseSatSubsDataError();\n    message.code = object.code ?? 0;\n    message.message = object.message ?? \"\";\n    message.subscriptionId = object.subscriptionId ?? \"\";\n    message.shapeRequestError = object.shapeRequestError?.map((e) => SatSubsDataError_ShapeReqError.fromPartial(e)) ||\n      [];\n    return message;\n  },\n};\n\nmessageTypeRegistry.set(SatSubsDataError.$type, SatSubsDataError);\n\nfunction createBaseSatSubsDataError_ShapeReqError(): SatSubsDataError_ShapeReqError {\n  return { $type: \"Electric.Satellite.SatSubsDataError.ShapeReqError\", code: 0, message: \"\", requestId: \"\" };\n}\n\nexport const SatSubsDataError_ShapeReqError = {\n  $type: \"Electric.Satellite.SatSubsDataError.ShapeReqError\" as const,\n\n  encode(message: SatSubsDataError_ShapeReqError, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {\n    if (message.code !== 0) {\n      writer.uint32(8).int32(message.code);\n    }\n    if (message.message !== \"\") {\n      writer.uint32(18).string(message.message);\n    }\n    if (message.requestId !== \"\") {\n      writer.uint32(26).string(message.requestId);\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): SatSubsDataError_ShapeReqError {\n    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseSatSubsDataError_ShapeReqError();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          if (tag !== 8) {\n            break;\n          }\n\n          message.code = reader.int32() as any;\n          continue;\n        case 2:\n          if (tag !== 18) {\n            break;\n          }\n\n          message.message = reader.string();\n          continue;\n        case 3:\n          if (tag !== 26) {\n            break;\n          }\n\n          message.requestId = reader.string();\n          continue;\n      }\n      if ((tag & 7) === 4 || tag === 0) {\n        break;\n      }\n      reader.skipType(tag & 7);\n    }\n    return message;\n  },\n\n  create<I extends Exact<DeepPartial<SatSubsDataError_ShapeReqError>, I>>(base?: I): SatSubsDataError_ShapeReqError {\n    return SatSubsDataError_ShapeReqError.fromPartial(base ?? ({} as any));\n  },\n  fromPartial<I extends Exact<DeepPartial<SatSubsDataError_ShapeReqError>, I>>(\n    object: I,\n  ): SatSubsDataError_ShapeReqError {\n    const message = createBaseSatSubsDataError_ShapeReqError();\n    message.code = object.code ?? 0;\n    message.message = object.message ?? \"\";\n    message.requestId = object.requestId ?? \"\";\n    return message;\n  },\n};\n\nmessageTypeRegistry.set(SatSubsDataError_ShapeReqError.$type, SatSubsDataError_ShapeReqError);\n\nfunction createBaseSatSubsDataBegin(): SatSubsDataBegin {\n  return { $type: \"Electric.Satellite.SatSubsDataBegin\", subscriptionId: \"\", lsn: new Uint8Array(0) };\n}\n\nexport const SatSubsDataBegin = {\n  $type: \"Electric.Satellite.SatSubsDataBegin\" as const,\n\n  encode(message: SatSubsDataBegin, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {\n    if (message.subscriptionId !== \"\") {\n      writer.uint32(10).string(message.subscriptionId);\n    }\n    if (message.lsn.length !== 0) {\n      writer.uint32(18).bytes(message.lsn);\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): SatSubsDataBegin {\n    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseSatSubsDataBegin();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          if (tag !== 10) {\n            break;\n          }\n\n          message.subscriptionId = reader.string();\n          continue;\n        case 2:\n          if (tag !== 18) {\n            break;\n          }\n\n          message.lsn = reader.bytes();\n          continue;\n      }\n      if ((tag & 7) === 4 || tag === 0) {\n        break;\n      }\n      reader.skipType(tag & 7);\n    }\n    return message;\n  },\n\n  create<I extends Exact<DeepPartial<SatSubsDataBegin>, I>>(base?: I): SatSubsDataBegin {\n    return SatSubsDataBegin.fromPartial(base ?? ({} as any));\n  },\n  fromPartial<I extends Exact<DeepPartial<SatSubsDataBegin>, I>>(object: I): SatSubsDataBegin {\n    const message = createBaseSatSubsDataBegin();\n    message.subscriptionId = object.subscriptionId ?? \"\";\n    message.lsn = object.lsn ?? new Uint8Array(0);\n    return message;\n  },\n};\n\nmessageTypeRegistry.set(SatSubsDataBegin.$type, SatSubsDataBegin);\n\nfunction createBaseSatSubsDataEnd(): SatSubsDataEnd {\n  return { $type: \"Electric.Satellite.SatSubsDataEnd\" };\n}\n\nexport const SatSubsDataEnd = {\n  $type: \"Electric.Satellite.SatSubsDataEnd\" as const,\n\n  encode(_: SatSubsDataEnd, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): SatSubsDataEnd {\n    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseSatSubsDataEnd();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n      }\n      if ((tag & 7) === 4 || tag === 0) {\n        break;\n      }\n      reader.skipType(tag & 7);\n    }\n    return message;\n  },\n\n  create<I extends Exact<DeepPartial<SatSubsDataEnd>, I>>(base?: I): SatSubsDataEnd {\n    return SatSubsDataEnd.fromPartial(base ?? ({} as any));\n  },\n  fromPartial<I extends Exact<DeepPartial<SatSubsDataEnd>, I>>(_: I): SatSubsDataEnd {\n    const message = createBaseSatSubsDataEnd();\n    return message;\n  },\n};\n\nmessageTypeRegistry.set(SatSubsDataEnd.$type, SatSubsDataEnd);\n\nfunction createBaseSatUnsubsDataBegin(): SatUnsubsDataBegin {\n  return { $type: \"Electric.Satellite.SatUnsubsDataBegin\", subscriptionIds: [], lsn: new Uint8Array(0) };\n}\n\nexport const SatUnsubsDataBegin = {\n  $type: \"Electric.Satellite.SatUnsubsDataBegin\" as const,\n\n  encode(message: SatUnsubsDataBegin, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {\n    for (const v of message.subscriptionIds) {\n      writer.uint32(10).string(v!);\n    }\n    if (message.lsn.length !== 0) {\n      writer.uint32(18).bytes(message.lsn);\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): SatUnsubsDataBegin {\n    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseSatUnsubsDataBegin();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          if (tag !== 10) {\n            break;\n          }\n\n          message.subscriptionIds.push(reader.string());\n          continue;\n        case 2:\n          if (tag !== 18) {\n            break;\n          }\n\n          message.lsn = reader.bytes();\n          continue;\n      }\n      if ((tag & 7) === 4 || tag === 0) {\n        break;\n      }\n      reader.skipType(tag & 7);\n    }\n    return message;\n  },\n\n  create<I extends Exact<DeepPartial<SatUnsubsDataBegin>, I>>(base?: I): SatUnsubsDataBegin {\n    return SatUnsubsDataBegin.fromPartial(base ?? ({} as any));\n  },\n  fromPartial<I extends Exact<DeepPartial<SatUnsubsDataBegin>, I>>(object: I): SatUnsubsDataBegin {\n    const message = createBaseSatUnsubsDataBegin();\n    message.subscriptionIds = object.subscriptionIds?.map((e) => e) || [];\n    message.lsn = object.lsn ?? new Uint8Array(0);\n    return message;\n  },\n};\n\nmessageTypeRegistry.set(SatUnsubsDataBegin.$type, SatUnsubsDataBegin);\n\nfunction createBaseSatUnsubsDataEnd(): SatUnsubsDataEnd {\n  return { $type: \"Electric.Satellite.SatUnsubsDataEnd\" };\n}\n\nexport const SatUnsubsDataEnd = {\n  $type: \"Electric.Satellite.SatUnsubsDataEnd\" as const,\n\n  encode(_: SatUnsubsDataEnd, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): SatUnsubsDataEnd {\n    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseSatUnsubsDataEnd();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n      }\n      if ((tag & 7) === 4 || tag === 0) {\n        break;\n      }\n      reader.skipType(tag & 7);\n    }\n    return message;\n  },\n\n  create<I extends Exact<DeepPartial<SatUnsubsDataEnd>, I>>(base?: I): SatUnsubsDataEnd {\n    return SatUnsubsDataEnd.fromPartial(base ?? ({} as any));\n  },\n  fromPartial<I extends Exact<DeepPartial<SatUnsubsDataEnd>, I>>(_: I): SatUnsubsDataEnd {\n    const message = createBaseSatUnsubsDataEnd();\n    return message;\n  },\n};\n\nmessageTypeRegistry.set(SatUnsubsDataEnd.$type, SatUnsubsDataEnd);\n\nfunction createBaseSatShapeDataBegin(): SatShapeDataBegin {\n  return { $type: \"Electric.Satellite.SatShapeDataBegin\", requestId: \"\", uuid: \"\" };\n}\n\nexport const SatShapeDataBegin = {\n  $type: \"Electric.Satellite.SatShapeDataBegin\" as const,\n\n  encode(message: SatShapeDataBegin, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {\n    if (message.requestId !== \"\") {\n      writer.uint32(10).string(message.requestId);\n    }\n    if (message.uuid !== \"\") {\n      writer.uint32(18).string(message.uuid);\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): SatShapeDataBegin {\n    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseSatShapeDataBegin();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          if (tag !== 10) {\n            break;\n          }\n\n          message.requestId = reader.string();\n          continue;\n        case 2:\n          if (tag !== 18) {\n            break;\n          }\n\n          message.uuid = reader.string();\n          continue;\n      }\n      if ((tag & 7) === 4 || tag === 0) {\n        break;\n      }\n      reader.skipType(tag & 7);\n    }\n    return message;\n  },\n\n  create<I extends Exact<DeepPartial<SatShapeDataBegin>, I>>(base?: I): SatShapeDataBegin {\n    return SatShapeDataBegin.fromPartial(base ?? ({} as any));\n  },\n  fromPartial<I extends Exact<DeepPartial<SatShapeDataBegin>, I>>(object: I): SatShapeDataBegin {\n    const message = createBaseSatShapeDataBegin();\n    message.requestId = object.requestId ?? \"\";\n    message.uuid = object.uuid ?? \"\";\n    return message;\n  },\n};\n\nmessageTypeRegistry.set(SatShapeDataBegin.$type, SatShapeDataBegin);\n\nfunction createBaseSatShapeDataEnd(): SatShapeDataEnd {\n  return { $type: \"Electric.Satellite.SatShapeDataEnd\" };\n}\n\nexport const SatShapeDataEnd = {\n  $type: \"Electric.Satellite.SatShapeDataEnd\" as const,\n\n  encode(_: SatShapeDataEnd, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): SatShapeDataEnd {\n    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseSatShapeDataEnd();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n      }\n      if ((tag & 7) === 4 || tag === 0) {\n        break;\n      }\n      reader.skipType(tag & 7);\n    }\n    return message;\n  },\n\n  create<I extends Exact<DeepPartial<SatShapeDataEnd>, I>>(base?: I): SatShapeDataEnd {\n    return SatShapeDataEnd.fromPartial(base ?? ({} as any));\n  },\n  fromPartial<I extends Exact<DeepPartial<SatShapeDataEnd>, I>>(_: I): SatShapeDataEnd {\n    const message = createBaseSatShapeDataEnd();\n    return message;\n  },\n};\n\nmessageTypeRegistry.set(SatShapeDataEnd.$type, SatShapeDataEnd);\n\n/** Main RPC service that the Electric server fulfills */\nexport interface Root {\n  authenticate(request: SatAuthReq): Promise<SatAuthResp>;\n  startReplication(request: SatInStartReplicationReq): Promise<SatInStartReplicationResp>;\n  stopReplication(request: SatInStopReplicationReq): Promise<SatInStopReplicationResp>;\n  subscribe(request: SatSubsReq): Promise<SatSubsResp>;\n  unsubscribe(request: SatUnsubsReq): Promise<SatUnsubsResp>;\n}\n\nexport const RootServiceName = \"Electric.Satellite.Root\";\nexport class RootClientImpl implements Root {\n  private readonly rpc: Rpc;\n  private readonly service: string;\n  constructor(rpc: Rpc, opts?: { service?: string }) {\n    this.service = opts?.service || RootServiceName;\n    this.rpc = rpc;\n    this.authenticate = this.authenticate.bind(this);\n    this.startReplication = this.startReplication.bind(this);\n    this.stopReplication = this.stopReplication.bind(this);\n    this.subscribe = this.subscribe.bind(this);\n    this.unsubscribe = this.unsubscribe.bind(this);\n  }\n  authenticate(request: SatAuthReq): Promise<SatAuthResp> {\n    const data = SatAuthReq.encode(request).finish();\n    const promise = this.rpc.request(this.service, \"authenticate\", data);\n    return promise.then((data) => SatAuthResp.decode(_m0.Reader.create(data)));\n  }\n\n  startReplication(request: SatInStartReplicationReq): Promise<SatInStartReplicationResp> {\n    const data = SatInStartReplicationReq.encode(request).finish();\n    const promise = this.rpc.request(this.service, \"startReplication\", data);\n    return promise.then((data) => SatInStartReplicationResp.decode(_m0.Reader.create(data)));\n  }\n\n  stopReplication(request: SatInStopReplicationReq): Promise<SatInStopReplicationResp> {\n    const data = SatInStopReplicationReq.encode(request).finish();\n    const promise = this.rpc.request(this.service, \"stopReplication\", data);\n    return promise.then((data) => SatInStopReplicationResp.decode(_m0.Reader.create(data)));\n  }\n\n  subscribe(request: SatSubsReq): Promise<SatSubsResp> {\n    const data = SatSubsReq.encode(request).finish();\n    const promise = this.rpc.request(this.service, \"subscribe\", data);\n    return promise.then((data) => SatSubsResp.decode(_m0.Reader.create(data)));\n  }\n\n  unsubscribe(request: SatUnsubsReq): Promise<SatUnsubsResp> {\n    const data = SatUnsubsReq.encode(request).finish();\n    const promise = this.rpc.request(this.service, \"unsubscribe\", data);\n    return promise.then((data) => SatUnsubsResp.decode(_m0.Reader.create(data)));\n  }\n}\n\n/** RPC calls that the server makes to the client */\nexport interface ClientRoot {\n  startReplication(request: SatInStartReplicationReq): Promise<SatInStartReplicationResp>;\n  stopReplication(request: SatInStopReplicationReq): Promise<SatInStopReplicationResp>;\n}\n\nexport const ClientRootServiceName = \"Electric.Satellite.ClientRoot\";\nexport class ClientRootClientImpl implements ClientRoot {\n  private readonly rpc: Rpc;\n  private readonly service: string;\n  constructor(rpc: Rpc, opts?: { service?: string }) {\n    this.service = opts?.service || ClientRootServiceName;\n    this.rpc = rpc;\n    this.startReplication = this.startReplication.bind(this);\n    this.stopReplication = this.stopReplication.bind(this);\n  }\n  startReplication(request: SatInStartReplicationReq): Promise<SatInStartReplicationResp> {\n    const data = SatInStartReplicationReq.encode(request).finish();\n    const promise = this.rpc.request(this.service, \"startReplication\", data);\n    return promise.then((data) => SatInStartReplicationResp.decode(_m0.Reader.create(data)));\n  }\n\n  stopReplication(request: SatInStopReplicationReq): Promise<SatInStopReplicationResp> {\n    const data = SatInStopReplicationReq.encode(request).finish();\n    const promise = this.rpc.request(this.service, \"stopReplication\", data);\n    return promise.then((data) => SatInStopReplicationResp.decode(_m0.Reader.create(data)));\n  }\n}\n\ninterface Rpc {\n  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;\n}\n\ntype Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;\n\nexport type DeepPartial<T> = T extends Builtin ? T\n  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>\n  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>\n  : T extends {} ? { [K in Exclude<keyof T, \"$type\">]?: DeepPartial<T[K]> }\n  : Partial<T>;\n\ntype KeysOfUnion<T> = T extends T ? keyof T : never;\nexport type Exact<P, I extends P> = P extends Builtin ? P\n  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | \"$type\">]: never };\n\nif (_m0.util.Long !== Long) {\n  _m0.util.Long = Long as any;\n  _m0.configure();\n}\n"],"mappings":"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","names":["SatAuthHeader","SatErrorResp_ErrorCode","SatInStartReplicationReq_Option","SatInStartReplicationReq_Dialect","SatInStartReplicationResp_ReplicationError_Code","SatRelation_RelationType","SatOpMigrate_Type","SatSubsResp_SatSubsError_Code","SatSubsResp_SatSubsError_ShapeReqError_Code","SatSubsDataError_Code","SatSubsDataError_ShapeReqError_Code","data"]}