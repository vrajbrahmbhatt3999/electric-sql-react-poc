{"version":3,"sources":["../../src/config/index.ts"],"sourcesContent":["import { AuthConfig } from '../auth'\nimport {\n  ConnectionBackoffOptions as ConnectionBackOffOptions,\n  satelliteDefaults,\n} from '../satellite/config'\n\nexport interface ElectricConfig {\n  /**\n   * Optional authentication configuration.\n   * If not provided, a client ID is generated.\n   */\n  auth?: AuthConfig\n  /**\n   * Optional URL string to connect to the Electric sync service.\n   *\n   * Should have the following format:\n   * `protocol://<host>:<port>[?ssl=true]`\n   *\n   * If the protocol is `https` or `wss` then `ssl`\n   * defaults to true. Otherwise it defaults to false.\n   *\n   * If port is not provided, defaults to 443 when\n   * ssl is enabled or 80 when it isn't.\n   *\n   * Defaults to:\n   * `http://localhost:5133`\n   */\n  url?: string\n  /**\n   * Timeout (in milliseconds) for RPC requests.\n   * Needs to be large enough for the server to have time to deliver the full initial subscription data\n   * when the client subscribes to a shape for the first time.\n   */\n  timeout?: number\n  /**\n   * Optional flag to activate debug mode\n   * which produces more verbose output.\n   * Defaults to `false`.\n   */\n  debug?: boolean\n  /**\n   * Optional backoff options for connecting with Electric\n   */\n  connectionBackOffOptions?: ConnectionBackOffOptions\n  /**\n   * Whether to check foreign keys when applying downstream (i.e. incoming) transactions to the local SQLite database.\n   * Defaults to `disabled`, meaning that FKs are not checked.\n   * When using Postgres, this option cannot be changed.\n   */\n  foreignKeyChecksDownstream?: ForeignKeyChecks\n}\n\nexport enum ForeignKeyChecks {\n  enabled = 'enabled',\n  disabled = 'disabled',\n  inherit = 'inherit',\n}\n\nexport type ElectricConfigWithDialect = ElectricConfig & {\n  /** defaults to SQLite */\n  dialect?: 'SQLite' | 'Postgres'\n}\n\nexport type HydratedConfig = {\n  auth: AuthConfig\n  replication: {\n    host: string\n    port: number\n    ssl: boolean\n    timeout: number\n    dialect: 'SQLite' | 'Postgres'\n  }\n  debug: boolean\n  connectionBackOffOptions: ConnectionBackOffOptions\n  namespace: string\n  fkChecks: ForeignKeyChecks\n}\n\nexport type InternalElectricConfig = {\n  auth: AuthConfig\n  replication?: {\n    host: string\n    port: number\n    ssl: boolean\n    timeout: number\n  }\n  debug?: boolean\n  connectionBackOffOptions?: ConnectionBackOffOptions\n  fkChecks: ForeignKeyChecks\n}\n\nexport const hydrateConfig = (\n  config: ElectricConfigWithDialect\n): HydratedConfig => {\n  const auth = config.auth ?? {}\n\n  const debug = config.debug ?? false\n  const url = new URL(config.url ?? 'http://localhost:5133')\n\n  const isSecureProtocol = url.protocol === 'https:' || url.protocol === 'wss:'\n  const sslEnabled = isSecureProtocol || url.searchParams.get('ssl') === 'true'\n\n  const defaultPort = sslEnabled ? 443 : 80\n  const portInt = parseInt(url.port, 10)\n  const port = Number.isNaN(portInt) ? defaultPort : portInt\n\n  const defaultNamespace = config.dialect === 'Postgres' ? 'public' : 'main'\n\n  const fkChecks =\n    config.foreignKeyChecksDownstream ?? ForeignKeyChecks.disabled\n\n  const replication = {\n    host: url.hostname,\n    port: port,\n    ssl: sslEnabled,\n    timeout: config.timeout ?? 3000,\n    dialect: config.dialect ?? 'SQLite',\n  }\n\n  const {\n    delayFirstAttempt,\n    jitter,\n    maxDelay,\n    numOfAttempts,\n    startingDelay,\n    timeMultiple,\n  } =\n    config.connectionBackOffOptions ??\n    satelliteDefaults(defaultNamespace).connectionBackOffOptions\n\n  const connectionBackOffOptions = {\n    delayFirstAttempt,\n    jitter,\n    maxDelay,\n    numOfAttempts,\n    startingDelay,\n    timeMultiple,\n  }\n\n  return {\n    auth,\n    replication,\n    debug,\n    connectionBackOffOptions,\n    namespace: defaultNamespace,\n    fkChecks,\n  }\n}\n"],"mappings":"AACA;AAAA,EAEE;AAAA,OACK;AAgDA,IAAK,mBAAL,kBAAKA,sBAAL;AACL,EAAAA,kBAAA,aAAU;AACV,EAAAA,kBAAA,cAAW;AACX,EAAAA,kBAAA,aAAU;AAHA,SAAAA;AAAA,GAAA;AAuCL,MAAM,gBAAgB,CAC3B,WACmB;AACnB,QAAM,OAAO,OAAO,QAAQ,CAAC;AAE7B,QAAM,QAAQ,OAAO,SAAS;AAC9B,QAAM,MAAM,IAAI,IAAI,OAAO,OAAO,uBAAuB;AAEzD,QAAM,mBAAmB,IAAI,aAAa,YAAY,IAAI,aAAa;AACvE,QAAM,aAAa,oBAAoB,IAAI,aAAa,IAAI,KAAK,MAAM;AAEvE,QAAM,cAAc,aAAa,MAAM;AACvC,QAAM,UAAU,SAAS,IAAI,MAAM,EAAE;AACrC,QAAM,OAAO,OAAO,MAAM,OAAO,IAAI,cAAc;AAEnD,QAAM,mBAAmB,OAAO,YAAY,aAAa,WAAW;AAEpE,QAAM,WACJ,OAAO,8BAA8B;AAEvC,QAAM,cAAc;AAAA,IAClB,MAAM,IAAI;AAAA,IACV;AAAA,IACA,KAAK;AAAA,IACL,SAAS,OAAO,WAAW;AAAA,IAC3B,SAAS,OAAO,WAAW;AAAA,EAC7B;AAEA,QAAM;AAAA,IACJ;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACF,IACE,OAAO,4BACP,kBAAkB,gBAAgB,EAAE;AAEtC,QAAM,2BAA2B;AAAA,IAC/B;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACF;AAEA,SAAO;AAAA,IACL;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA,WAAW;AAAA,IACX;AAAA,EACF;AACF;","names":["ForeignKeyChecks"]}