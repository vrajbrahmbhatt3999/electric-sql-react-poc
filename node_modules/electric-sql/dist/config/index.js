import {
  satelliteDefaults
} from '../satellite/config.js';
var ForeignKeyChecks = /* @__PURE__ */ ((ForeignKeyChecks2) => {
  ForeignKeyChecks2["enabled"] = "enabled";
  ForeignKeyChecks2["disabled"] = "disabled";
  ForeignKeyChecks2["inherit"] = "inherit";
  return ForeignKeyChecks2;
})(ForeignKeyChecks || {});
const hydrateConfig = (config) => {
  const auth = config.auth ?? {};
  const debug = config.debug ?? false;
  const url = new URL(config.url ?? "http://localhost:5133");
  const isSecureProtocol = url.protocol === "https:" || url.protocol === "wss:";
  const sslEnabled = isSecureProtocol || url.searchParams.get("ssl") === "true";
  const defaultPort = sslEnabled ? 443 : 80;
  const portInt = parseInt(url.port, 10);
  const port = Number.isNaN(portInt) ? defaultPort : portInt;
  const defaultNamespace = config.dialect === "Postgres" ? "public" : "main";
  const fkChecks = config.foreignKeyChecksDownstream ?? "disabled" /* disabled */;
  const replication = {
    host: url.hostname,
    port,
    ssl: sslEnabled,
    timeout: config.timeout ?? 3e3,
    dialect: config.dialect ?? "SQLite"
  };
  const {
    delayFirstAttempt,
    jitter,
    maxDelay,
    numOfAttempts,
    startingDelay,
    timeMultiple
  } = config.connectionBackOffOptions ?? satelliteDefaults(defaultNamespace).connectionBackOffOptions;
  const connectionBackOffOptions = {
    delayFirstAttempt,
    jitter,
    maxDelay,
    numOfAttempts,
    startingDelay,
    timeMultiple
  };
  return {
    auth,
    replication,
    debug,
    connectionBackOffOptions,
    namespace: defaultNamespace,
    fkChecks
  };
};
export {
  ForeignKeyChecks,
  hydrateConfig
};
//# sourceMappingURL=index.js.map