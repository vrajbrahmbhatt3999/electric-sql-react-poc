import { hydrateConfig } from '../config/index.js';
import { EventNotifier } from '../notifiers/index.js';
import { globalRegistry } from '../satellite/index.js';
import { setLogLevel } from '../util/debug/index.js';
import { ElectricNamespace } from './namespace.js';
import { ElectricClient } from '../client/model/client.js';
import { SqliteBundleMigrator } from '../migrators/bundle.js';
const defaultPrepare = async (connection) => {
  await connection.run({ sql: "PRAGMA foreign_keys = ON;" });
};
const electrify = async (dbName, dbDescription, adapter, socketFactory, config = {}, opts) => {
  setLogLevel(config.debug ? "TRACE" : "WARN");
  const prepare = opts?.prepare ?? defaultPrepare;
  await prepare(adapter);
  const configWithDefaults = hydrateConfig(config);
  const migrator = opts?.migrator || new SqliteBundleMigrator(adapter, dbDescription.migrations);
  const notifier = opts?.notifier || new EventNotifier(dbName);
  const registry = opts?.registry || globalRegistry;
  const satellite = await registry.ensureStarted(
    dbName,
    dbDescription,
    adapter,
    migrator,
    notifier,
    socketFactory,
    configWithDefaults
  );
  const dialect = configWithDefaults.replication.dialect;
  const electric = ElectricClient.create(
    dbName,
    dbDescription,
    adapter,
    notifier,
    satellite,
    registry,
    dialect
  );
  if (satellite.connectivityState !== void 0) {
    electric.setIsConnected(satellite.connectivityState);
  }
  return electric;
};
export {
  ElectricNamespace,
  electrify
};
//# sourceMappingURL=index.js.map