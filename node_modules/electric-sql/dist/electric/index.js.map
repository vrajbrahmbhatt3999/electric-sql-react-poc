{"version":3,"sources":["../../src/electric/index.ts"],"sourcesContent":["import { ElectricConfigWithDialect, hydrateConfig } from '../config/index'\nimport { DatabaseAdapter } from '../electric/adapter'\nimport { Migrator } from '../migrators/index'\nimport { EventNotifier, Notifier } from '../notifiers/index'\nimport { globalRegistry, Registry } from '../satellite/index'\nimport { SocketFactory } from '../sockets/index'\nimport { DbName } from '../util/types'\nimport { setLogLevel } from '../util/debug'\nimport { ElectricNamespace } from './namespace'\nimport { ElectricClient } from '../client/model/client'\nimport { DbSchema } from '../client/model/schema'\nimport { SqliteBundleMigrator } from '../migrators/bundle'\n\nexport { ElectricNamespace }\nexport type * from './adapter'\n\n// These are the options that should be provided to the adapter's electrify\n// entrypoint. They are all optional to optionally allow different / mock\n// implementations to be passed in to facilitate testing.\nexport interface ElectrifyOptions {\n  adapter?: DatabaseAdapter\n  /**\n   * Defaults to the migrator for SQLite.\n   */\n  migrator?: Migrator\n  notifier?: Notifier\n  socketFactory?: SocketFactory\n  registry?: Registry\n  /**\n   * Function that prepares the database connection.\n   * If not overridden, the default prepare function\n   * enables the `foreign_key` pragma on the DB connection.\n   * @param connection The database connection.\n   * @returns A promise that resolves when the database connection is prepared.\n   */\n  prepare?: (connection: DatabaseAdapter) => Promise<void>\n}\n\nconst defaultPrepare = async (connection: DatabaseAdapter) => {\n  await connection.run({ sql: 'PRAGMA foreign_keys = ON;' })\n}\n\n/**\n * This is the primary `electrify()` endpoint that the individual drivers\n * call once they've constructed their implementations. This function can\n * also be called directly by tests that don't want to go via the adapter\n * entrypoints in order to avoid loading the environment dependencies.\n */\nexport const electrify = async <DB extends DbSchema<any>>(\n  dbName: DbName,\n  dbDescription: DB,\n  adapter: DatabaseAdapter,\n  socketFactory: SocketFactory,\n  config: ElectricConfigWithDialect = {},\n  opts?: Omit<ElectrifyOptions, 'adapter' | 'socketFactory'>\n): Promise<ElectricClient<DB>> => {\n  setLogLevel(config.debug ? 'TRACE' : 'WARN')\n  const prepare = opts?.prepare ?? defaultPrepare\n  await prepare(adapter)\n\n  const configWithDefaults = hydrateConfig(config)\n  const migrator =\n    opts?.migrator ||\n    new SqliteBundleMigrator(adapter, dbDescription.migrations)\n  const notifier = opts?.notifier || new EventNotifier(dbName)\n  const registry = opts?.registry || globalRegistry\n\n  const satellite = await registry.ensureStarted(\n    dbName,\n    dbDescription,\n    adapter,\n    migrator,\n    notifier,\n    socketFactory,\n    configWithDefaults\n  )\n\n  const dialect = configWithDefaults.replication.dialect\n  const electric = ElectricClient.create(\n    dbName,\n    dbDescription,\n    adapter,\n    notifier,\n    satellite,\n    registry,\n    dialect\n  )\n\n  if (satellite.connectivityState !== undefined) {\n    electric.setIsConnected(satellite.connectivityState)\n  }\n\n  return electric\n}\n"],"mappings":"AAAA,SAAoC,qBAAqB;AAGzD,SAAS,qBAA+B;AACxC,SAAS,sBAAgC;AAGzC,SAAS,mBAAmB;AAC5B,SAAS,yBAAyB;AAClC,SAAS,sBAAsB;AAE/B,SAAS,4BAA4B;AA2BrC,MAAM,iBAAiB,OAAO,eAAgC;AAC5D,QAAM,WAAW,IAAI,EAAE,KAAK,4BAA4B,CAAC;AAC3D;AAQO,MAAM,YAAY,OACvB,QACA,eACA,SACA,eACA,SAAoC,CAAC,GACrC,SACgC;AAChC,cAAY,OAAO,QAAQ,UAAU,MAAM;AAC3C,QAAM,UAAU,MAAM,WAAW;AACjC,QAAM,QAAQ,OAAO;AAErB,QAAM,qBAAqB,cAAc,MAAM;AAC/C,QAAM,WACJ,MAAM,YACN,IAAI,qBAAqB,SAAS,cAAc,UAAU;AAC5D,QAAM,WAAW,MAAM,YAAY,IAAI,cAAc,MAAM;AAC3D,QAAM,WAAW,MAAM,YAAY;AAEnC,QAAM,YAAY,MAAM,SAAS;AAAA,IAC/B;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACF;AAEA,QAAM,UAAU,mBAAmB,YAAY;AAC/C,QAAM,WAAW,eAAe;AAAA,IAC9B;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACF;AAEA,MAAI,UAAU,sBAAsB,QAAW;AAC7C,aAAS,eAAe,UAAU,iBAAiB;AAAA,EACrD;AAEA,SAAO;AACT;","names":[]}