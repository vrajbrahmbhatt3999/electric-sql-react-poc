class ElectricNamespace {
  dbName;
  adapter;
  notifier;
  registry;
  _isConnected;
  get isConnected() {
    return this._isConnected;
  }
  _unsubscribeStateChanges;
  constructor(dbName, adapter, notifier, registry) {
    this.dbName = dbName;
    this.adapter = adapter;
    this.notifier = notifier;
    this.registry = registry;
    this._isConnected = false;
    this._unsubscribeStateChanges = this.notifier.subscribeToConnectivityStateChanges(
      ({ connectivityState }) => {
        this.setIsConnected(connectivityState);
      }
    );
  }
  setIsConnected(connectivityState) {
    this._isConnected = connectivityState.status === "connected";
  }
  // We lift this function a level so the user can call
  // `db.electric.potentiallyChanged()` rather than the longer / more redundant
  // `db.electric.notifier.potentiallyChanged()`.
  potentiallyChanged() {
    this.notifier.potentiallyChanged();
  }
  /**
   * Cleans up the resources used by the `ElectricNamespace`.
   */
  async close() {
    this._unsubscribeStateChanges();
    await this.registry.stop(this.dbName);
  }
}
export {
  ElectricNamespace
};
//# sourceMappingURL=namespace.js.map