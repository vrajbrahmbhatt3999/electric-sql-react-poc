{"version":3,"sources":["../../../src/cli/util/parse.ts"],"sourcesContent":["import fs from 'fs'\nimport { InvalidArgumentError } from 'commander'\nimport { appPackageJsonPath } from './paths'\n\n/**\n * Get the name of the current project.\n */\nexport function getAppName(): string | undefined {\n  return JSON.parse(fs.readFileSync(appPackageJsonPath, 'utf8')).name\n}\n\n/**\n * Parse an integer from a string and throw the given error\n * if parsing fails\n */\nfunction parseIntOrFail(str: string, error: string) {\n  const parsed = parseInt(str)\n  if (isNaN(parsed)) {\n    throw new InvalidArgumentError(error)\n  }\n  return parsed\n}\n\nexport function parsePort(str: string): number {\n  return parseIntOrFail(\n    str,\n    `Invalid port: ${str}. Must be integer between 1 and 65535.`\n  )\n}\n\nexport function parseTimeout(str: string): number {\n  return parseIntOrFail(str, `Invalid timeout: ${str}. Must be an integer.`)\n}\n\nexport function extractDatabaseURL(url: string): {\n  user: string\n  password: string\n  host: string\n  port: number | null\n  dbName: string\n} {\n  const parsed = new URL(url)\n  if (!(parsed.protocol === 'postgres:' || parsed.protocol === 'postgresql:')) {\n    throw new Error(`Invalid database URL scheme: ${url}`)\n  }\n\n  const user = decodeURIComponent(parsed.username)\n  if (!user) {\n    throw new Error(`Invalid or missing username: ${url}`)\n  }\n\n  return {\n    user: user,\n    password: decodeURIComponent(parsed.password),\n    host: decodeURIComponent(parsed.hostname),\n    port: parsed.port ? parseInt(parsed.port) : null,\n    dbName: decodeURIComponent(parsed.pathname.slice(1)) || user,\n  }\n}\n\nexport function extractServiceURL(serviceUrl: string): {\n  host: string\n  port: number | null\n} {\n  const parsed = new URL(serviceUrl)\n  if (!parsed.hostname) {\n    throw new Error(`Invalid service URL: ${serviceUrl}`)\n  }\n  return {\n    host: decodeURIComponent(parsed.hostname),\n    port: parsed.port ? parseInt(parsed.port) : null,\n  }\n}\n\n/**\n * Parse the given string or number into a port number and whether\n * it uses the HTTP proxy or not.\n * @example\n * ```\n * parsePgProxyPort('65432') // { http: false, port: 65432 }\n * parsePgProxyPort('http:5123') // { http: true, port: 5123 }\n * parsePgProxyPort('http') // { http: true, port: 65432 }\n * ```\n */\nexport function parsePgProxyPort(\n  str: number | `${number}` | `http` | `http:${number}`\n): {\n  http: boolean\n  port: number\n} {\n  if (typeof str === 'number') {\n    return { http: false, port: str }\n  } else if (str.includes(':')) {\n    const [prefix, port] = str.split(':')\n    return {\n      http: prefix.toLocaleLowerCase() === 'http',\n      port: parsePort(port),\n    }\n  } else if (str.toLocaleLowerCase() === 'http') {\n    return { http: true, port: 65432 }\n  } else {\n    return { http: false, port: parsePort(str) }\n  }\n}\n"],"mappings":"AAAA,OAAO,QAAQ;AACf,SAAS,4BAA4B;AACrC,SAAS,0BAA0B;AAK5B,SAAS,aAAiC;AAC/C,SAAO,KAAK,MAAM,GAAG,aAAa,oBAAoB,MAAM,CAAC,EAAE;AACjE;AAMA,SAAS,eAAe,KAAa,OAAe;AAClD,QAAM,SAAS,SAAS,GAAG;AAC3B,MAAI,MAAM,MAAM,GAAG;AACjB,UAAM,IAAI,qBAAqB,KAAK;AAAA,EACtC;AACA,SAAO;AACT;AAEO,SAAS,UAAU,KAAqB;AAC7C,SAAO;AAAA,IACL;AAAA,IACA,iBAAiB,GAAG;AAAA,EACtB;AACF;AAEO,SAAS,aAAa,KAAqB;AAChD,SAAO,eAAe,KAAK,oBAAoB,GAAG,uBAAuB;AAC3E;AAEO,SAAS,mBAAmB,KAMjC;AACA,QAAM,SAAS,IAAI,IAAI,GAAG;AAC1B,MAAI,EAAE,OAAO,aAAa,eAAe,OAAO,aAAa,gBAAgB;AAC3E,UAAM,IAAI,MAAM,gCAAgC,GAAG,EAAE;AAAA,EACvD;AAEA,QAAM,OAAO,mBAAmB,OAAO,QAAQ;AAC/C,MAAI,CAAC,MAAM;AACT,UAAM,IAAI,MAAM,gCAAgC,GAAG,EAAE;AAAA,EACvD;AAEA,SAAO;AAAA,IACL;AAAA,IACA,UAAU,mBAAmB,OAAO,QAAQ;AAAA,IAC5C,MAAM,mBAAmB,OAAO,QAAQ;AAAA,IACxC,MAAM,OAAO,OAAO,SAAS,OAAO,IAAI,IAAI;AAAA,IAC5C,QAAQ,mBAAmB,OAAO,SAAS,MAAM,CAAC,CAAC,KAAK;AAAA,EAC1D;AACF;AAEO,SAAS,kBAAkB,YAGhC;AACA,QAAM,SAAS,IAAI,IAAI,UAAU;AACjC,MAAI,CAAC,OAAO,UAAU;AACpB,UAAM,IAAI,MAAM,wBAAwB,UAAU,EAAE;AAAA,EACtD;AACA,SAAO;AAAA,IACL,MAAM,mBAAmB,OAAO,QAAQ;AAAA,IACxC,MAAM,OAAO,OAAO,SAAS,OAAO,IAAI,IAAI;AAAA,EAC9C;AACF;AAYO,SAAS,iBACd,KAIA;AACA,MAAI,OAAO,QAAQ,UAAU;AAC3B,WAAO,EAAE,MAAM,OAAO,MAAM,IAAI;AAAA,EAClC,WAAW,IAAI,SAAS,GAAG,GAAG;AAC5B,UAAM,CAAC,QAAQ,IAAI,IAAI,IAAI,MAAM,GAAG;AACpC,WAAO;AAAA,MACL,MAAM,OAAO,kBAAkB,MAAM;AAAA,MACrC,MAAM,UAAU,IAAI;AAAA,IACtB;AAAA,EACF,WAAW,IAAI,kBAAkB,MAAM,QAAQ;AAC7C,WAAO,EAAE,MAAM,MAAM,MAAM,MAAM;AAAA,EACnC,OAAO;AACL,WAAO,EAAE,MAAM,OAAO,MAAM,UAAU,GAAG,EAAE;AAAA,EAC7C;AACF;","names":[]}