{"version":3,"sources":["../../../src/cli/util/string.ts"],"sourcesContent":["/**\n * Tagged template literal dedent function that also unwraps lines.\n * Double newlines become a single newline.\n */\nexport function dedent(\n  strings: TemplateStringsArray,\n  ...values: unknown[]\n): string {\n  let str = strings[0]\n  for (let i = 0; i < values.length; i++) {\n    str += String(values[i]) + strings[i + 1]\n  }\n\n  const lines = str.split('\\n')\n\n  const minIndent = lines\n    .filter((line) => line.trim())\n    .reduce((minIndent, line) => {\n      const indent = line.match(/^\\s*/)?.[0].length ?? 0\n      return indent < minIndent ? indent : minIndent\n    }, Infinity)\n\n  if (lines[0] === '') {\n    // if first line is empty, remove it\n    lines.shift()\n  }\n  if (lines[lines.length - 1] === '') {\n    // if last line is empty, remove it\n    lines.pop()\n  }\n\n  return lines\n    .map((line) => {\n      line = line.slice(minIndent)\n      if (/^\\s/.test(line)) {\n        // if line starts with whitespace, prefix it with a newline\n        // to preserve the indentation\n        return '\\n' + line\n      } else if (line === '') {\n        // if line is empty, we want a newline here\n        return '\\n'\n      } else {\n        return line.trim() + ' '\n      }\n    })\n    .join('')\n    .trim()\n}\n\n/**\n * Builds the Postgres database URL for the given parameters.\n */\nexport function buildDatabaseURL(opts: {\n  user: string\n  password: string\n  host: string\n  port: number\n  dbName: string\n  ssl?: boolean\n}): string {\n  const base = new URL(`postgresql://${opts.host}`)\n  base.username = opts.user\n  base.password = opts.password\n  base.port = opts.port.toString()\n  base.pathname = opts.dbName\n  if (opts.ssl !== undefined) {\n    base.searchParams.set('sslmode', opts.ssl ? 'require' : 'disable')\n  }\n\n  return base.toString()\n}\n"],"mappings":"AAIO,SAAS,OACd,YACG,QACK;AACR,MAAI,MAAM,QAAQ,CAAC;AACnB,WAAS,IAAI,GAAG,IAAI,OAAO,QAAQ,KAAK;AACtC,WAAO,OAAO,OAAO,CAAC,CAAC,IAAI,QAAQ,IAAI,CAAC;AAAA,EAC1C;AAEA,QAAM,QAAQ,IAAI,MAAM,IAAI;AAE5B,QAAM,YAAY,MACf,OAAO,CAAC,SAAS,KAAK,KAAK,CAAC,EAC5B,OAAO,CAACA,YAAW,SAAS;AAC3B,UAAM,SAAS,KAAK,MAAM,MAAM,IAAI,CAAC,EAAE,UAAU;AACjD,WAAO,SAASA,aAAY,SAASA;AAAA,EACvC,GAAG,QAAQ;AAEb,MAAI,MAAM,CAAC,MAAM,IAAI;AAEnB,UAAM,MAAM;AAAA,EACd;AACA,MAAI,MAAM,MAAM,SAAS,CAAC,MAAM,IAAI;AAElC,UAAM,IAAI;AAAA,EACZ;AAEA,SAAO,MACJ,IAAI,CAAC,SAAS;AACb,WAAO,KAAK,MAAM,SAAS;AAC3B,QAAI,MAAM,KAAK,IAAI,GAAG;AAGpB,aAAO,OAAO;AAAA,IAChB,WAAW,SAAS,IAAI;AAEtB,aAAO;AAAA,IACT,OAAO;AACL,aAAO,KAAK,KAAK,IAAI;AAAA,IACvB;AAAA,EACF,CAAC,EACA,KAAK,EAAE,EACP,KAAK;AACV;AAKO,SAAS,iBAAiB,MAOtB;AACT,QAAM,OAAO,IAAI,IAAI,gBAAgB,KAAK,IAAI,EAAE;AAChD,OAAK,WAAW,KAAK;AACrB,OAAK,WAAW,KAAK;AACrB,OAAK,OAAO,KAAK,KAAK,SAAS;AAC/B,OAAK,WAAW,KAAK;AACrB,MAAI,KAAK,QAAQ,QAAW;AAC1B,SAAK,aAAa,IAAI,WAAW,KAAK,MAAM,YAAY,SAAS;AAAA,EACnE;AAEA,SAAO,KAAK,SAAS;AACvB;","names":["minIndent"]}