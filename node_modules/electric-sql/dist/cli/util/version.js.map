{"version":3,"sources":["../../../src/cli/util/version.ts"],"sourcesContent":["import fs from 'fs'\nimport { LIB_VERSION } from '../../version'\nimport path from 'path'\nimport { fileURLToPath } from 'url'\n\n/**\n * Reads and parses the contents of the package.json of the CLI itself\n */\nfunction readPackageJson(): Record<string, unknown> {\n  return JSON.parse(\n    fs.readFileSync(\n      path.join(\n        fileURLToPath(import.meta.url),\n        '..',\n        '..',\n        '..',\n        '..',\n        'package.json'\n      ),\n      'utf8'\n    )\n  )\n}\n\n/**\n * Check whether the CLI is a canary release.\n *\n * The LIB_VERSION export does not update for canary releases\n * so this uses the package.json explicitly for this check\n */\nexport function isCanaryRelease(): boolean {\n  return (readPackageJson().version as string).includes('canary')\n}\n\nexport const LIB_MINOR_VERSION = LIB_VERSION.split('.').slice(0, 2).join('.')\n"],"mappings":"AAAA,OAAO,QAAQ;AACf,SAAS,mBAAmB;AAC5B,OAAO,UAAU;AACjB,SAAS,qBAAqB;AAK9B,SAAS,kBAA2C;AAClD,SAAO,KAAK;AAAA,IACV,GAAG;AAAA,MACD,KAAK;AAAA,QACH,cAAc,YAAY,GAAG;AAAA,QAC7B;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,MACF;AAAA,MACA;AAAA,IACF;AAAA,EACF;AACF;AAQO,SAAS,kBAA2B;AACzC,SAAQ,gBAAgB,EAAE,QAAmB,SAAS,QAAQ;AAChE;AAEO,MAAM,oBAAoB,YAAY,MAAM,GAAG,EAAE,MAAM,GAAG,CAAC,EAAE,KAAK,GAAG;","names":[]}