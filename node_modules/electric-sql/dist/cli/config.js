import { extractDatabaseURL, extractServiceURL } from './util/index.js';
import { configOptions } from './config-options.js';
function inferDbUrlPart(part, options = {}, defaultValue) {
  const url = options.databaseUrl || options.DATABASE_URL || process.env.ELECTRIC_DATABASE_URL;
  if (url) {
    return extractDatabaseURL(url)?.[part] ?? defaultValue;
  }
  return defaultValue;
}
function inferProxyUrlPart(part, options = {}, defaultValue) {
  const url = options.proxy || options.PROXY || process.env.ELECTRIC_PROXY;
  if (url) {
    return extractDatabaseURL(url)?.[part] ?? defaultValue;
  }
  return defaultValue;
}
function inferServiceUrlPart(part, options = {}, defaultValue) {
  const url = options.service || options.SERVICE || process.env.ELECTRIC_SERVICE;
  if (url) {
    return extractServiceURL(url)?.[part] ?? defaultValue;
  }
  return defaultValue;
}
function getConfigValue(name, options) {
  if (options) {
    const strippedName = name.startsWith("ELECTRIC_") ? name.slice("ELECTRIC_".length) : name;
    const optName = snakeToCamel(strippedName.toLocaleLowerCase());
    if (options[optName] !== void 0) {
      return options[optName];
    } else if (options[name] !== void 0) {
      return options[name];
    }
  }
  const inferVal = configOptions[name].inferVal;
  if (inferVal) {
    const val = inferVal(options);
    if (val !== void 0) {
      return val;
    }
  }
  const envName = name.startsWith("ELECTRIC_") ? name : `ELECTRIC_${name}`;
  const envVal = process.env[envName];
  if (configOptions[name].valueType === Boolean) {
    return !!envVal && !["f", "false", "0", "", "no"].includes(
      envVal?.toLocaleLowerCase()
    );
  }
  if (envVal !== void 0) {
    if (configOptions[name].valueType === Number) {
      return parseInt(envVal);
    } else {
      return envVal;
    }
  }
  const defaultVal = configOptions[name].defaultVal;
  if (typeof defaultVal === "function") {
    return defaultVal(options);
  }
  return defaultVal;
}
function getConfig(options) {
  return Object.fromEntries(
    Object.keys(configOptions).map((name) => [
      name,
      getConfigValue(name, options ?? {})
    ])
  );
}
function envFromConfig(config) {
  return Object.fromEntries(
    Object.keys(config).map((name) => [
      name.startsWith("ELECTRIC_") ? name : `ELECTRIC_${name}`,
      config[name]?.toString()
    ])
  );
}
function redactConfigValue(config, stringToRedact) {
  Object.entries(config).forEach(([key, value]) => {
    if (typeof value === "string" && value.includes(stringToRedact)) {
      config[key] = value.replaceAll(stringToRedact, "******");
    }
  });
}
function redactConfigSecrets(config) {
  const valuesToRedact = Object.keys(config).filter((k) => configOptions[k]?.secret).map((k) => config[k]);
  const redactedConfig = { ...config };
  valuesToRedact.forEach((v) => redactConfigValue(redactedConfig, v));
  return redactedConfig;
}
function printConfig(config) {
  console.log(redactConfigSecrets(config));
}
function snakeToCamel(s) {
  return s.toLocaleLowerCase().replace(/(_+\w)/g, (m) => m.slice(-1).toUpperCase());
}
function addOptionToCommand(command, optionName) {
  let argName = optionName.toLocaleLowerCase().replace(/_/g, "-");
  if (argName.startsWith("electric-")) {
    argName = argName.slice("electric-".length);
  }
  let localName = optionName;
  if (!optionName.startsWith("ELECTRIC_")) {
    localName = `ELECTRIC_${optionName}`;
  }
  const opt = configOptions[optionName];
  let flags;
  if (opt.shortForm) {
    flags = `-${opt.shortForm}, --${argName}`;
  } else {
    flags = `--${argName}`;
  }
  if (opt.valueType !== Boolean) {
    if (opt.valueTypeName !== void 0) {
      flags += ` <${opt.valueTypeName}>`;
    } else if (opt.valueType === Number) {
      flags += ` <number>`;
    } else if (opt.valueType === String) {
      flags += ` <string>`;
    } else {
      throw new Error(`Unknown value type: ${opt.valueType}`);
    }
  }
  let doc = `${opt.doc}
Env var: ${localName}`;
  if (opt.constructedDefault) {
    doc += `
Default: ${opt.constructedDefault}`;
  } else if (typeof opt.defaultVal !== "function") {
    doc += `
Default: ${opt.defaultVal}`;
  }
  command.option(flags, doc);
}
function addOptionGroupToCommand(command, groupName) {
  Object.entries(configOptions).forEach(([name, opt]) => {
    const groups = opt.groups ?? [];
    if (groups.includes(groupName)) {
      addOptionToCommand(command, name);
    }
  });
}
export {
  addOptionGroupToCommand,
  addOptionToCommand,
  envFromConfig,
  getConfig,
  getConfigValue,
  inferDbUrlPart,
  inferProxyUrlPart,
  inferServiceUrlPart,
  printConfig,
  redactConfigSecrets
};
//# sourceMappingURL=config.js.map