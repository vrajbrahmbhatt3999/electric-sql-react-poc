import * as z from "zod";
import path from "path";
import * as fs from "fs/promises";
import {
  parseMetadata,
  makeMigration
} from '../../migrators/index.js';
import { isObject } from '../../util/index.js';
async function buildMigrations(migrationsFolder, migrationsFile, builder) {
  try {
    const migrations = await loadMigrations(migrationsFolder, builder);
    await fs.writeFile(
      migrationsFile,
      `export default ${JSON.stringify(migrations, null, 2)}`
    );
  } catch (e) {
    if (e instanceof z.ZodError)
      throw new Error("Could not build migrations:\n" + e.message);
    else
      throw e;
  }
}
async function getMigrationNames(migrationsFolder) {
  const contents = await fs.readdir(migrationsFolder, { withFileTypes: true });
  const dirs = contents.filter((dirent) => dirent.isDirectory());
  return dirs.map((dir) => dir.name).sort();
}
async function loadMigrations(migrationsFolder, builder) {
  const dirNames = await getMigrationNames(migrationsFolder);
  const migrationPaths = dirNames.map(
    (dirName) => path.join(migrationsFolder, dirName, "metadata.json")
  );
  const migrationMetaDatas = await Promise.all(
    migrationPaths.map(readMetadataFile)
  );
  return migrationMetaDatas.map((data) => makeMigration(data, builder));
}
async function readMetadataFile(path2) {
  try {
    const data = await fs.readFile(path2, "utf8");
    const jsonData = JSON.parse(data);
    if (isObject(jsonData)) {
      return parseMetadata(jsonData);
    } else {
      throw new Error(
        `Migration file ${path2} has wrong format, expected JSON object but found something else.`
      );
    }
  } catch (e) {
    if (e instanceof SyntaxError)
      throw new Error(`Error while parsing migration file ${path2}`);
    else
      throw e;
  }
}
export {
  buildMigrations,
  getMigrationNames,
  loadMigrations
};
//# sourceMappingURL=builder.js.map