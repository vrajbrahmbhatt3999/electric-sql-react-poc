{"version":3,"sources":["../../../src/cli/docker-commands/command-start.ts"],"sourcesContent":["import { Command } from 'commander'\nimport { buildDatabaseURL, dedent, parsePgProxyPort, parsePort } from '../util'\nimport {\n  addOptionGroupToCommand,\n  getConfig,\n  Config,\n  printConfig,\n} from '../config'\nimport { dockerCompose } from './docker-utils'\n\nexport function makeStartCommand() {\n  const command = new Command('start')\n  command.description(\n    'Start the ElectricSQL sync service, and an optional PostgreSQL'\n  )\n\n  addOptionGroupToCommand(command, 'electric')\n\n  command.option(\n    '--detach',\n    'Run in the background instead of printing logs to the console'\n  )\n\n  command.action(async (opts: any) => {\n    if (opts.databaseUrl && opts.withPostgres) {\n      console.error('You cannot set --database-url when using --with-postgres.')\n      process.exit(1)\n    }\n    const config = getConfig(opts)\n    if (!config.WITH_POSTGRES && !config.DATABASE_URL) {\n      console.error(\n        'You must set --database-url or the ELECTRIC_DATABASE_URL env var when not using --with-postgres.'\n      )\n      process.exit(1)\n    }\n    const startOptions = {\n      detach: opts.detach,\n      withPostgres: !!config.WITH_POSTGRES,\n      config: config,\n    }\n    start(startOptions)\n  })\n\n  return command\n}\n\ninterface StartSettings {\n  detach?: boolean\n  exitOnDetached?: boolean\n  withPostgres?: boolean\n  config: Config\n}\n\nexport function start(options: StartSettings) {\n  return new Promise<void>((resolve) => {\n    const exitOnDetached = options.exitOnDetached ?? true\n\n    console.log(\n      `Starting ElectricSQL sync service${\n        options.withPostgres ? ' with PostgreSQL' : ''\n      }`\n    )\n\n    const env = configToEnv(options.config)\n    // PG_PROXY_PORT can have a 'http:' prefix, which we need to remove\n    // for port mapping to work.\n    env.PG_PROXY_PORT_PARSED = parsePgProxyPort(\n      env.PG_PROXY_PORT as `${number}` | `http` | `http:${number}`\n    ).port.toString()\n\n    const dockerConfig = {\n      ...env,\n      ...(options.withPostgres\n        ? {\n            COMPOSE_PROFILES: 'with-postgres',\n            DATABASE_URL: buildDatabaseURL({\n              user: env.DATABASE_USER,\n              password: env.DATABASE_PASSWORD,\n              host: 'postgres',\n              port: parsePort(env.DATABASE_PORT),\n              dbName: env.DATABASE_NAME,\n            }),\n            LOGICAL_PUBLISHER_HOST: 'electric',\n          }\n        : {}),\n    }\n\n    console.log('Docker compose config:')\n    printConfig(dockerConfig)\n\n    const proc = dockerCompose(\n      'up',\n      [...(options.detach ? ['--detach'] : [])],\n      options.config.CONTAINER_NAME,\n      dockerConfig\n    )\n\n    proc.on('close', async (code) => {\n      if (code === 0) {\n        if (options.detach) {\n          if (options.withPostgres) {\n            await waitForPostgres(options.config.CONTAINER_NAME, dockerConfig)\n          }\n          await waitForElectric(options.config.SERVICE)\n        }\n        if (exitOnDetached) {\n          process.exit(0)\n        }\n        resolve()\n      } else {\n        console.error(\n          dedent`\n            Failed to start the Electric backend. Check the output from 'docker compose' above.\n            If the error message mentions a port already being allocated or address being already in use,\n            please change the configuration to an alternative port via the ELECTRIC_HTTP_PORT or\n            ELECTRIC_PG_PROXY_PORT environment variables.\n          `\n        )\n        process.exit(code ?? 1)\n      }\n    })\n  })\n}\n\nfunction checkPostgres(containerName: string, env: { [key: string]: string }) {\n  return new Promise((resolve, reject) => {\n    try {\n      const proc = dockerCompose(\n        'exec',\n        [\n          'postgres',\n          'pg_isready',\n          '-U',\n          `${env.DATABASE_USER}`,\n          '-p',\n          `${env.DATABASE_PORT}`,\n        ],\n        containerName,\n        env\n      )\n      proc.on('close', (code) => {\n        resolve(code === 0)\n      })\n    } catch (e) {\n      reject(e)\n    }\n  })\n}\n\nasync function waitForPostgres(containerName: string, env: any) {\n  console.log('Waiting for PostgreSQL to be ready...')\n  // Await the postgres container to be ready\n  const start = Date.now()\n  const timeout = 10 * 1000 // 10 seconds\n  while (Date.now() - start < timeout) {\n    if (await checkPostgres(containerName, env)) {\n      console.log('PostgreSQL is ready')\n      return\n    }\n    await new Promise((resolve) => setTimeout(resolve, 500))\n  }\n  console.error(\n    dedent`\n      Timed out waiting for PostgreSQL to be ready.\n      Check the output from 'docker compose' above.\n    `\n  )\n  process.exit(1)\n}\n\nasync function waitForElectric(serviceUrl: string) {\n  console.log('Waiting for Electric to be ready...')\n  const statusUrl = `${serviceUrl}/api/status`\n  // Status endpoint returns 200 when ready\n  const start = Date.now()\n  const timeout = 10 * 1000 // 10 seconds\n  while (Date.now() - start < timeout) {\n    try {\n      const res = await fetch(statusUrl)\n      if (res.ok) {\n        console.log('Electric is ready')\n        return\n      }\n    } catch (e) {\n      // ignore\n    }\n    await new Promise((resolve) => setTimeout(resolve, 500))\n  }\n  console.error(\n    dedent`\n      Timed out waiting for Electric to be ready.\n      Check the output from 'docker compose' above.\n    `\n  )\n  process.exit(1)\n}\n\nfunction configToEnv(config: Config) {\n  const env: { [key: string]: string } = {}\n  for (const [key, val] of Object.entries(config)) {\n    if (val === true) {\n      env[key] = 'true'\n    } else if (val !== undefined) {\n      env[key] = val.toString()\n    }\n  }\n  return env\n}\n"],"mappings":"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","names":["start"]}