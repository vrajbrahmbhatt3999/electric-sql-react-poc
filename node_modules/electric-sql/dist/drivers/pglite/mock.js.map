{"version":3,"sources":["../../../src/drivers/pglite/mock.ts"],"sourcesContent":["import { Database } from './database'\nimport type { PGliteOptions, QueryOptions, Results } from '@electric-sql/pglite'\n\nexport class MockDatabase implements Database {\n  dataDir?: string\n  fail: Error | undefined\n\n  constructor(dataDir?: string, _options?: PGliteOptions) {\n    this.dataDir = dataDir\n  }\n\n  async query<T>(\n    _query: string,\n    _params?: any[],\n    _options?: QueryOptions\n  ): Promise<Results<T>> {\n    if (typeof this.fail !== 'undefined') throw this.fail\n\n    return {\n      rows: [{ val: 1 } as T, { val: 2 } as T],\n      affectedRows: 0,\n      fields: [\n        {\n          name: 'val',\n          dataTypeID: 0,\n        },\n      ],\n    }\n  }\n}\n"],"mappings":"AAGO,MAAM,aAAiC;AAAA,EAC5C;AAAA,EACA;AAAA,EAEA,YAAY,SAAkB,UAA0B;AACtD,SAAK,UAAU;AAAA,EACjB;AAAA,EAEA,MAAM,MACJ,QACA,SACA,UACqB;AACrB,QAAI,OAAO,KAAK,SAAS;AAAa,YAAM,KAAK;AAEjD,WAAO;AAAA,MACL,MAAM,CAAC,EAAE,KAAK,EAAE,GAAQ,EAAE,KAAK,EAAE,CAAM;AAAA,MACvC,cAAc;AAAA,MACd,QAAQ;AAAA,QACN;AAAA,UACE,MAAM;AAAA,UACN,YAAY;AAAA,QACd;AAAA,MACF;AAAA,IACF;AAAA,EACF;AACF;","names":[]}