{"version":3,"sources":["../../../src/drivers/pglite/index.ts"],"sourcesContent":["import { DatabaseAdapter as DatabaseAdapterI } from '../../electric/adapter'\nimport { DatabaseAdapter } from './adapter'\nimport { Database } from './database'\nimport { ElectricConfig } from '../../config'\nimport { electrify as baseElectrify, ElectrifyOptions } from '../../electric'\nimport { WebSocketWeb } from '../../sockets/web'\nimport { ElectricClient, DbSchema } from '../../client/model'\nimport { PgBundleMigrator } from '../../migrators/bundle'\n\nexport { DatabaseAdapter }\nexport type { Database }\n\nexport const electrify = async <T extends Database, DB extends DbSchema<any>>(\n  db: T,\n  dbDescription: DB,\n  config: ElectricConfig,\n  opts?: ElectrifyOptions\n): Promise<ElectricClient<DB>> => {\n  const dbName = db.dataDir?.split('/').pop() ?? 'memory'\n  const adapter = opts?.adapter || new DatabaseAdapter(db)\n  const migrator =\n    opts?.migrator || new PgBundleMigrator(adapter, dbDescription.pgMigrations)\n  const socketFactory = opts?.socketFactory || WebSocketWeb\n  const prepare = async (_connection: DatabaseAdapterI) => undefined\n\n  const configWithDialect = {\n    ...config,\n    dialect: 'Postgres',\n  } as const\n\n  const client = await baseElectrify(\n    dbName,\n    dbDescription,\n    adapter,\n    socketFactory,\n    configWithDialect,\n    {\n      migrator,\n      prepare,\n      ...opts,\n    }\n  )\n\n  return client\n}\n"],"mappings":"AACA,SAAS,uBAAuB;AAGhC,SAAS,aAAa,qBAAuC;AAC7D,SAAS,oBAAoB;AAE7B,SAAS,wBAAwB;AAK1B,MAAM,YAAY,OACvB,IACA,eACA,QACA,SACgC;AAChC,QAAM,SAAS,GAAG,SAAS,MAAM,GAAG,EAAE,IAAI,KAAK;AAC/C,QAAM,UAAU,MAAM,WAAW,IAAI,gBAAgB,EAAE;AACvD,QAAM,WACJ,MAAM,YAAY,IAAI,iBAAiB,SAAS,cAAc,YAAY;AAC5E,QAAM,gBAAgB,MAAM,iBAAiB;AAC7C,QAAM,UAAU,OAAO,gBAAkC;AAEzD,QAAM,oBAAoB;AAAA,IACxB,GAAG;AAAA,IACH,SAAS;AAAA,EACX;AAEA,QAAM,SAAS,MAAM;AAAA,IACnB;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,MACE;AAAA,MACA;AAAA,MACA,GAAG;AAAA,IACL;AAAA,EACF;AAEA,SAAO;AACT;","names":[]}