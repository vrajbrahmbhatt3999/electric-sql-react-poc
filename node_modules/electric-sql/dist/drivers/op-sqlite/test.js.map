{"version":3,"sources":["../../../src/drivers/op-sqlite/test.ts"],"sourcesContent":["import { DbName } from '../../util/types'\n\nimport { electrify, ElectrifyOptions } from '../../electric/index'\n\nimport { MockMigrator } from '../../migrators/mock'\nimport { Notifier } from '../../notifiers/index'\nimport { MockNotifier } from '../../notifiers/mock'\nimport { MockRegistry } from '../../satellite/mock'\n\nimport { DatabaseAdapter as OPSqliteAdapter } from './adapter'\nimport { Database } from './database'\nimport { MockDatabase } from './mock'\nimport { MockSocket } from '../../sockets/mock'\nimport { ElectricClient } from '../../client/model/client'\nimport { ElectricConfig } from '../../config'\nimport { DbSchema } from '../../client/model'\n\nconst testToken = 'test-token'\n\ntype RetVal<DB extends DbSchema<any>, N extends Notifier> = Promise<\n  [Database, N, ElectricClient<DB>]\n>\n\nexport const initTestable = async <\n  DB extends DbSchema<any>,\n  N extends Notifier = MockNotifier\n>(\n  dbName: DbName,\n  dbDescription: DB,\n  config: ElectricConfig = {},\n  opts?: ElectrifyOptions\n): RetVal<DB, N> => {\n  const db = new MockDatabase(dbName)\n\n  const adapter = opts?.adapter || new OPSqliteAdapter(db)\n  const notifier = (opts?.notifier as N) || new MockNotifier(dbName)\n  const migrator = opts?.migrator || new MockMigrator()\n  const socketFactory = opts?.socketFactory || MockSocket\n  const registry = opts?.registry || new MockRegistry()\n\n  const client = await electrify(\n    dbName,\n    dbDescription,\n    adapter,\n    socketFactory,\n    config,\n    {\n      notifier: notifier,\n      migrator: migrator,\n      registry: registry,\n    }\n  )\n  await client.connect(testToken)\n  return [db, notifier, client]\n}\n"],"mappings":"AAEA,SAAS,iBAAmC;AAE5C,SAAS,oBAAoB;AAE7B,SAAS,oBAAoB;AAC7B,SAAS,oBAAoB;AAE7B,SAAS,mBAAmB,uBAAuB;AAEnD,SAAS,oBAAoB;AAC7B,SAAS,kBAAkB;AAK3B,MAAM,YAAY;AAMX,MAAM,eAAe,OAI1B,QACA,eACA,SAAyB,CAAC,GAC1B,SACkB;AAClB,QAAM,KAAK,IAAI,aAAa,MAAM;AAElC,QAAM,UAAU,MAAM,WAAW,IAAI,gBAAgB,EAAE;AACvD,QAAM,WAAY,MAAM,YAAkB,IAAI,aAAa,MAAM;AACjE,QAAM,WAAW,MAAM,YAAY,IAAI,aAAa;AACpD,QAAM,gBAAgB,MAAM,iBAAiB;AAC7C,QAAM,WAAW,MAAM,YAAY,IAAI,aAAa;AAEpD,QAAM,SAAS,MAAM;AAAA,IACnB;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,MACE;AAAA,MACA;AAAA,MACA;AAAA,IACF;AAAA,EACF;AACA,QAAM,OAAO,QAAQ,SAAS;AAC9B,SAAO,CAAC,IAAI,UAAU,MAAM;AAC9B;","names":[]}