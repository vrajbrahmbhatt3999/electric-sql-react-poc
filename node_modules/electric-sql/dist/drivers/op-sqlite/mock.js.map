{"version":3,"sources":["../../../src/drivers/op-sqlite/mock.ts"],"sourcesContent":["import { BatchQueryResult, QueryResult } from '@op-engineering/op-sqlite'\nimport { DbName } from '../../util/types'\nimport { Database } from './database'\n\nexport class MockDatabase implements Database {\n  constructor(public dbName: DbName, public fail?: Error) {}\n\n  executeAsync(): Promise<QueryResult> {\n    const _array = [\n      {\n        column1: 'text1',\n        column2: 'text2',\n      },\n    ]\n    return this.resolveIfNotFail({\n      rowsAffected: 1,\n      rows: {\n        _array,\n        length: 1,\n        item: (idx: number) => _array[idx],\n      },\n    })\n  }\n  executeBatchAsync(): Promise<BatchQueryResult> {\n    return this.resolveIfNotFail({ rowsAffected: 1 })\n  }\n\n  private resolveIfNotFail<T>(value: T): Promise<T> {\n    if (typeof this.fail !== 'undefined') {\n      return Promise.reject(this.fail)\n    }\n    return Promise.resolve(value)\n  }\n}\n"],"mappings":"AAIO,MAAM,aAAiC;AAAA,EAC5C,YAAmB,QAAuB,MAAc;AAArC;AAAuB;AAAA,EAAe;AAAA,EAEzD,eAAqC;AACnC,UAAM,SAAS;AAAA,MACb;AAAA,QACE,SAAS;AAAA,QACT,SAAS;AAAA,MACX;AAAA,IACF;AACA,WAAO,KAAK,iBAAiB;AAAA,MAC3B,cAAc;AAAA,MACd,MAAM;AAAA,QACJ;AAAA,QACA,QAAQ;AAAA,QACR,MAAM,CAAC,QAAgB,OAAO,GAAG;AAAA,MACnC;AAAA,IACF,CAAC;AAAA,EACH;AAAA,EACA,oBAA+C;AAC7C,WAAO,KAAK,iBAAiB,EAAE,cAAc,EAAE,CAAC;AAAA,EAClD;AAAA,EAEQ,iBAAoB,OAAsB;AAChD,QAAI,OAAO,KAAK,SAAS,aAAa;AACpC,aAAO,QAAQ,OAAO,KAAK,IAAI;AAAA,IACjC;AACA,WAAO,QAAQ,QAAQ,KAAK;AAAA,EAC9B;AACF;","names":[]}