import { DbName } from '../../util/types.js';
import { ElectrifyOptions } from '../../electric/index.js';
import { Notifier } from '../../notifiers/index.js';
import { MockNotifier } from '../../notifiers/mock.js';
import { Database } from './database.js';
import { MockDatabase } from './mock.js';
import { ElectricConfig } from '../../config/index.js';
import { ElectricClient } from '../../client/model/client.js';
import { DbSchema } from '../../client/model/index.js';
type RetVal<S extends DbSchema<any>, N extends Notifier, D extends Database = Database> = Promise<[D, N, ElectricClient<S>]>;
export declare function initTestable<S extends DbSchema<any>, N extends Notifier = MockNotifier>(name: DbName, dbDescription: S): RetVal<S, N, MockDatabase>;
export declare function initTestable<S extends DbSchema<any>, N extends Notifier = MockNotifier>(name: DbName, dbDescription: S, webSql: false, config?: ElectricConfig, opts?: ElectrifyOptions): RetVal<S, N, MockDatabase>;
export declare function initTestable<S extends DbSchema<any>, N extends Notifier = MockNotifier>(name: DbName, dbDescription: S, webSql: true, config?: ElectricConfig, opts?: ElectrifyOptions): RetVal<S, N, MockDatabase>;
export {};
