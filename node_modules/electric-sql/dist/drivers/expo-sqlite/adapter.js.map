{"version":3,"sources":["../../../src/drivers/expo-sqlite/adapter.ts"],"sourcesContent":["import { Row } from '../../util/types'\nimport { Statement } from '../../util'\nimport { SerialDatabaseAdapter as GenericDatabaseAdapter } from '../generic'\nimport { Database } from './database'\nimport { RunResult } from '../../electric/adapter'\n\nexport class DatabaseAdapter extends GenericDatabaseAdapter {\n  readonly db: Database\n  readonly defaultNamespace = 'main'\n  #rowsModified = 0\n\n  constructor(db: Database) {\n    super()\n    this.db = db\n  }\n\n  private async exec(statement: Statement): Promise<Row[]> {\n    return new Promise((resolve, reject) => {\n      const stmt = { sql: statement.sql, args: statement.args ?? [] }\n      this.db.execRawQuery([stmt], false, (err, result) => {\n        if (err) {\n          reject(err.message)\n        } else if (result) {\n          const [res] = result\n          if ('error' in res) {\n            reject(res.error.message)\n          } else {\n            this.#rowsModified = res.rowsAffected\n            resolve(res.rows)\n          }\n        } else {\n          resolve([])\n        }\n      })\n    })\n  }\n\n  private getRowsModified() {\n    return this.#rowsModified\n  }\n\n  async _run(statement: Statement): Promise<RunResult> {\n    await this.exec(statement)\n    return {\n      rowsAffected: this.getRowsModified(),\n    }\n  }\n\n  _query(statement: Statement): Promise<Row[]> {\n    return this.exec(statement)\n  }\n}\n"],"mappings":"AAEA,SAAS,yBAAyB,8BAA8B;AAIzD,MAAM,wBAAwB,uBAAuB;AAAA,EACjD;AAAA,EACA,mBAAmB;AAAA,EAC5B,gBAAgB;AAAA,EAEhB,YAAY,IAAc;AACxB,UAAM;AACN,SAAK,KAAK;AAAA,EACZ;AAAA,EAEA,MAAc,KAAK,WAAsC;AACvD,WAAO,IAAI,QAAQ,CAAC,SAAS,WAAW;AACtC,YAAM,OAAO,EAAE,KAAK,UAAU,KAAK,MAAM,UAAU,QAAQ,CAAC,EAAE;AAC9D,WAAK,GAAG,aAAa,CAAC,IAAI,GAAG,OAAO,CAAC,KAAK,WAAW;AACnD,YAAI,KAAK;AACP,iBAAO,IAAI,OAAO;AAAA,QACpB,WAAW,QAAQ;AACjB,gBAAM,CAAC,GAAG,IAAI;AACd,cAAI,WAAW,KAAK;AAClB,mBAAO,IAAI,MAAM,OAAO;AAAA,UAC1B,OAAO;AACL,iBAAK,gBAAgB,IAAI;AACzB,oBAAQ,IAAI,IAAI;AAAA,UAClB;AAAA,QACF,OAAO;AACL,kBAAQ,CAAC,CAAC;AAAA,QACZ;AAAA,MACF,CAAC;AAAA,IACH,CAAC;AAAA,EACH;AAAA,EAEQ,kBAAkB;AACxB,WAAO,KAAK;AAAA,EACd;AAAA,EAEA,MAAM,KAAK,WAA0C;AACnD,UAAM,KAAK,KAAK,SAAS;AACzB,WAAO;AAAA,MACL,cAAc,KAAK,gBAAgB;AAAA,IACrC;AAAA,EACF;AAAA,EAEA,OAAO,WAAsC;AAC3C,WAAO,KAAK,KAAK,SAAS;AAAA,EAC5B;AACF;","names":[]}