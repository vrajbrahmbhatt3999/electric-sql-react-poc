{"version":3,"sources":["../../../src/drivers/node-postgres/index.ts"],"sourcesContent":["import { DatabaseAdapter as DatabaseAdapterI } from '../../electric/adapter'\nimport { DatabaseAdapter } from './adapter'\nimport { Database, createEmbeddedPostgres } from './database'\nimport { ElectricConfig } from '../../config'\nimport { electrify as baseElectrify, ElectrifyOptions } from '../../electric'\nimport { WebSocketNode } from '../../sockets/node'\nimport { ElectricClient, DbSchema } from '../../client/model'\nimport { PgBundleMigrator } from '../../migrators/bundle'\n\nexport { DatabaseAdapter, createEmbeddedPostgres }\nexport type { Database }\n\n/**\n * This embdedded-postgres driver is used for unit testing.\n * The real driver to run Postgres is the `sqlx` driver\n * which uses Tauri as a bridge to a Postgres driver written in Rust.\n */\nexport const electrify = async <T extends Database, DB extends DbSchema<any>>(\n  db: T,\n  dbDescription: DB,\n  config: ElectricConfig,\n  opts?: ElectrifyOptions\n): Promise<ElectricClient<DB>> => {\n  const dbName = `${db.host}:${db.port}/${db.database ?? ''}`\n  const adapter = opts?.adapter || new DatabaseAdapter(db)\n  const migrator =\n    opts?.migrator || new PgBundleMigrator(adapter, dbDescription.pgMigrations)\n  const socketFactory = opts?.socketFactory || WebSocketNode\n  const prepare = async (_connection: DatabaseAdapterI) => undefined\n\n  const configWithDialect = {\n    ...config,\n    dialect: 'Postgres',\n  } as const\n\n  const client = await baseElectrify(\n    dbName,\n    dbDescription,\n    adapter,\n    socketFactory,\n    configWithDialect,\n    {\n      migrator,\n      prepare,\n      ...opts,\n    }\n  )\n\n  return client\n}\n"],"mappings":"AACA,SAAS,uBAAuB;AAChC,SAAmB,8BAA8B;AAEjD,SAAS,aAAa,qBAAuC;AAC7D,SAAS,qBAAqB;AAE9B,SAAS,wBAAwB;AAU1B,MAAM,YAAY,OACvB,IACA,eACA,QACA,SACgC;AAChC,QAAM,SAAS,GAAG,GAAG,IAAI,IAAI,GAAG,IAAI,IAAI,GAAG,YAAY,EAAE;AACzD,QAAM,UAAU,MAAM,WAAW,IAAI,gBAAgB,EAAE;AACvD,QAAM,WACJ,MAAM,YAAY,IAAI,iBAAiB,SAAS,cAAc,YAAY;AAC5E,QAAM,gBAAgB,MAAM,iBAAiB;AAC7C,QAAM,UAAU,OAAO,gBAAkC;AAEzD,QAAM,oBAAoB;AAAA,IACxB,GAAG;AAAA,IACH,SAAS;AAAA,EACX;AAEA,QAAM,SAAS,MAAM;AAAA,IACnB;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,MACE;AAAA,MACA;AAAA,MACA,GAAG;AAAA,IACL;AAAA,EACF;AAEA,SAAO;AACT;","names":[]}