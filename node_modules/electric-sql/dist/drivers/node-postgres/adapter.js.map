{"version":3,"sources":["../../../src/drivers/node-postgres/adapter.ts"],"sourcesContent":["import pg from 'pg'\nimport { Database } from './database'\nimport { Row } from '../../util/types'\nimport { Statement } from '../../util'\nimport { SerialDatabaseAdapter as GenericDatabaseAdapter } from '../generic'\nimport { RunResult } from '../../electric/adapter'\nimport { PgDateType } from '../../client/conversions/types'\nimport { deserialiseDate } from '../../client/conversions/datatypes/date'\n\nconst originalGetTypeParser = pg.types.getTypeParser\n\nexport type QueryResult = {\n  rows: Row[]\n  rowsModified: number\n}\n\nexport class DatabaseAdapter extends GenericDatabaseAdapter {\n  readonly db: Database\n  readonly defaultNamespace = 'public'\n\n  constructor(db: Database) {\n    super()\n    this.db = db\n  }\n\n  async _run(statement: Statement): Promise<RunResult> {\n    const { rowsModified } = await this.exec(statement)\n    return {\n      rowsAffected: rowsModified,\n    }\n  }\n\n  async _query(statement: Statement): Promise<Row[]> {\n    const { rows } = await this.exec(statement)\n    return rows\n  }\n\n  async exec(statement: Statement): Promise<QueryResult> {\n    try {\n      const { rows, rowCount } = await this.db.query<Row>({\n        text: statement.sql,\n        values: statement.args,\n        types: {\n          getTypeParser: ((oid: number) => {\n            /*\n              // Modify the parser to not parse JSON values\n              // Instead, return them as strings\n              // our conversions will correctly parse them\n              if (\n                oid === pg.types.builtins.JSON ||\n                oid === pg.types.builtins.JSONB\n              ) {\n                return (val) => val\n              }\n              */\n\n            if (\n              oid === pg.types.builtins.TIMESTAMP ||\n              oid === pg.types.builtins.TIMESTAMPTZ ||\n              oid === pg.types.builtins.DATE\n            ) {\n              // Parse timestamps and date values ourselves\n              // because the pg parser parses them differently from what we expect\n              const pgTypes = new Map([\n                [pg.types.builtins.TIMESTAMP, PgDateType.PG_TIMESTAMP],\n                [pg.types.builtins.TIMESTAMPTZ, PgDateType.PG_TIMESTAMPTZ],\n                [pg.types.builtins.DATE, PgDateType.PG_DATE],\n              ])\n              return (val: string) =>\n                deserialiseDate(val, pgTypes.get(oid) as PgDateType)\n            }\n            return originalGetTypeParser(oid)\n          }) as typeof pg.types.getTypeParser,\n        },\n      })\n      return {\n        rows,\n        rowsModified: rowCount ?? 0,\n      }\n    } catch (e: any) {\n      console.log('EXEC ERROR: ' + e.message)\n      console.log(\n        'STATEMENT was: ' +\n          statement.sql +\n          ' - args: ' +\n          JSON.stringify(statement.args, null, 2)\n      )\n      throw e\n    }\n  }\n}\n"],"mappings":"AAAA,OAAO,QAAQ;AAIf,SAAS,yBAAyB,8BAA8B;AAEhE,SAAS,kBAAkB;AAC3B,SAAS,uBAAuB;AAEhC,MAAM,wBAAwB,GAAG,MAAM;AAOhC,MAAM,wBAAwB,uBAAuB;AAAA,EACjD;AAAA,EACA,mBAAmB;AAAA,EAE5B,YAAY,IAAc;AACxB,UAAM;AACN,SAAK,KAAK;AAAA,EACZ;AAAA,EAEA,MAAM,KAAK,WAA0C;AACnD,UAAM,EAAE,aAAa,IAAI,MAAM,KAAK,KAAK,SAAS;AAClD,WAAO;AAAA,MACL,cAAc;AAAA,IAChB;AAAA,EACF;AAAA,EAEA,MAAM,OAAO,WAAsC;AACjD,UAAM,EAAE,KAAK,IAAI,MAAM,KAAK,KAAK,SAAS;AAC1C,WAAO;AAAA,EACT;AAAA,EAEA,MAAM,KAAK,WAA4C;AACrD,QAAI;AACF,YAAM,EAAE,MAAM,SAAS,IAAI,MAAM,KAAK,GAAG,MAAW;AAAA,QAClD,MAAM,UAAU;AAAA,QAChB,QAAQ,UAAU;AAAA,QAClB,OAAO;AAAA,UACL,eAAgB,CAAC,QAAgB;AAa/B,gBACE,QAAQ,GAAG,MAAM,SAAS,aAC1B,QAAQ,GAAG,MAAM,SAAS,eAC1B,QAAQ,GAAG,MAAM,SAAS,MAC1B;AAGA,oBAAM,UAAU,oBAAI,IAAI;AAAA,gBACtB,CAAC,GAAG,MAAM,SAAS,WAAW,WAAW,YAAY;AAAA,gBACrD,CAAC,GAAG,MAAM,SAAS,aAAa,WAAW,cAAc;AAAA,gBACzD,CAAC,GAAG,MAAM,SAAS,MAAM,WAAW,OAAO;AAAA,cAC7C,CAAC;AACD,qBAAO,CAAC,QACN,gBAAgB,KAAK,QAAQ,IAAI,GAAG,CAAe;AAAA,YACvD;AACA,mBAAO,sBAAsB,GAAG;AAAA,UAClC;AAAA,QACF;AAAA,MACF,CAAC;AACD,aAAO;AAAA,QACL;AAAA,QACA,cAAc,YAAY;AAAA,MAC5B;AAAA,IACF,SAAS,GAAQ;AACf,cAAQ,IAAI,iBAAiB,EAAE,OAAO;AACtC,cAAQ;AAAA,QACN,oBACE,UAAU,MACV,cACA,KAAK,UAAU,UAAU,MAAM,MAAM,CAAC;AAAA,MAC1C;AACA,YAAM;AAAA,IACR;AAAA,EACF;AACF;","names":[]}