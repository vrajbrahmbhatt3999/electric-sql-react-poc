class ElectricDatabase {
  // Do not use this constructor directly.
  // Create a Database instance using the static `init` method instead.
  constructor(name, invoke) {
    this.name = name;
    this.invoke = invoke;
  }
  tauriExec(statement) {
    return this.invoke("tauri_exec_command", {
      sql: statement.sql,
      values: statement.args ?? []
    });
  }
  async exec(statement) {
    const { result, rows_modified: rowsModified } = await this.tauriExec(
      statement
    );
    const rows = JSON.parse(result, (_key, val) => {
      if (val[0] === "\0") {
        return val.charCodeAt(1) * 2 ** 32 + val.charCodeAt(2) * 2 ** 16 + val.charCodeAt(3) * 1;
      }
      if (val === "NULL") {
        return null;
      }
      return val;
    });
    return {
      rows,
      rowsModified
    };
  }
  async stop() {
    await this.invoke("tauri_stop_postgres");
  }
  static async init(dbName, invoke) {
    await invoke("tauri_init_command", { name: dbName });
    return new ElectricDatabase(dbName, invoke);
  }
}
export {
  ElectricDatabase
};
//# sourceMappingURL=database.js.map