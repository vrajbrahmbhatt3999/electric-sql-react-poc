{"version":3,"sources":["../../../src/drivers/tauri-postgres/database.ts"],"sourcesContent":["import { Row, Statement } from '../../util'\n\nexport type QueryResult = {\n  rows: Row[]\n  rowsModified: number\n}\n\ntype TauriQueryResult = {\n  result: string\n  rows_modified: number\n}\n\ntype TauriInvokeFn = (cmd: string, params?: object) => Promise<any>\n\nexport interface Database {\n  name: string\n  exec(statement: Statement): Promise<QueryResult>\n  stop(): Promise<void>\n}\n\nexport class ElectricDatabase implements Database {\n  // Do not use this constructor directly.\n  // Create a Database instance using the static `init` method instead.\n  private constructor(public name: string, private invoke: TauriInvokeFn) {}\n\n  private tauriExec(statement: Statement): Promise<TauriQueryResult> {\n    return this.invoke('tauri_exec_command', {\n      sql: statement.sql,\n      values: statement.args ?? [],\n    })\n  }\n\n  async exec(statement: Statement): Promise<QueryResult> {\n    const { result, rows_modified: rowsModified } = await this.tauriExec(\n      statement\n    )\n    const rows = JSON.parse(result, (_key: any, val: string) => {\n      // The values are strings because they were serialized\n      // in order to send them from the Rust backend to here\n      if (val[0] === '\\u0000') {\n        // transforms an integer from its string rerpesentation as four code points into an actual int\n        return (\n          val.charCodeAt(1) * 2 ** 32 +\n          val.charCodeAt(2) * 2 ** 16 +\n          val.charCodeAt(3) * 1\n        )\n      }\n      if (val === 'NULL') {\n        return null\n      }\n      return val\n    })\n    return {\n      rows,\n      rowsModified,\n    }\n  }\n\n  async stop(): Promise<void> {\n    await this.invoke('tauri_stop_postgres')\n  }\n\n  static async init(dbName: string, invoke: TauriInvokeFn) {\n    await invoke('tauri_init_command', { name: dbName })\n    return new ElectricDatabase(dbName, invoke)\n  }\n}\n"],"mappings":"AAoBO,MAAM,iBAAqC;AAAA;AAAA;AAAA,EAGxC,YAAmB,MAAsB,QAAuB;AAA7C;AAAsB;AAAA,EAAwB;AAAA,EAEjE,UAAU,WAAiD;AACjE,WAAO,KAAK,OAAO,sBAAsB;AAAA,MACvC,KAAK,UAAU;AAAA,MACf,QAAQ,UAAU,QAAQ,CAAC;AAAA,IAC7B,CAAC;AAAA,EACH;AAAA,EAEA,MAAM,KAAK,WAA4C;AACrD,UAAM,EAAE,QAAQ,eAAe,aAAa,IAAI,MAAM,KAAK;AAAA,MACzD;AAAA,IACF;AACA,UAAM,OAAO,KAAK,MAAM,QAAQ,CAAC,MAAW,QAAgB;AAG1D,UAAI,IAAI,CAAC,MAAM,MAAU;AAEvB,eACE,IAAI,WAAW,CAAC,IAAI,KAAK,KACzB,IAAI,WAAW,CAAC,IAAI,KAAK,KACzB,IAAI,WAAW,CAAC,IAAI;AAAA,MAExB;AACA,UAAI,QAAQ,QAAQ;AAClB,eAAO;AAAA,MACT;AACA,aAAO;AAAA,IACT,CAAC;AACD,WAAO;AAAA,MACL;AAAA,MACA;AAAA,IACF;AAAA,EACF;AAAA,EAEA,MAAM,OAAsB;AAC1B,UAAM,KAAK,OAAO,qBAAqB;AAAA,EACzC;AAAA,EAEA,aAAa,KAAK,QAAgB,QAAuB;AACvD,UAAM,OAAO,sBAAsB,EAAE,MAAM,OAAO,CAAC;AACnD,WAAO,IAAI,iBAAiB,QAAQ,MAAM;AAAA,EAC5C;AACF;","names":[]}