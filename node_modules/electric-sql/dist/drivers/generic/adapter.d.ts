import { DatabaseAdapter as DatabaseAdapterInterface, RunResult, TableNameImpl, Transaction as Tx, UncoordinatedDatabaseAdapter } from '../../electric/adapter.js';
import { Row, Statement } from '../../util/index.js';
import { Mutex } from 'async-mutex';
/**
 * A generic database adapter.
 * Uses a mutex to ensure that transactions are not interleaved.
 * Concrete adapters extending this class must implement the
 * `_run`, `_query`, and `runInTransaction` methods.
 */
declare abstract class DatabaseAdapter extends TableNameImpl implements DatabaseAdapterInterface {
    protected txMutex: Mutex;
    abstract readonly defaultNamespace: 'main' | 'public';
    constructor();
    /**
     * Runs a single SQL statement against the DB.
     * @param stmt The SQL statement to execute
     * @returns The number of rows modified by this statement.
     */
    abstract _run(stmt: Statement): Promise<RunResult>;
    /**
     * Runs a single SQL query against the DB.
     * @param stmt The SQL statement to execute
     * @returns The rows read by the query.
     */
    abstract _query(stmt: Statement): Promise<Row[]>;
    /**
     * @param statements A list of SQL statements to execute against the DB.
     */
    abstract _runInTransaction(...statements: Statement[]): Promise<RunResult>;
    _transaction<T>(f: (_tx: Tx, setResult: (res: T) => void) => void): Promise<T>;
    transaction<T>(f: (_tx: Tx, setResult: (res: T) => void) => void): Promise<T>;
    run(stmt: Statement): Promise<RunResult>;
    query(stmt: Statement): Promise<Row[]>;
    runInTransaction(...statements: Statement[]): Promise<RunResult>;
    _runExclusively<T>(f: (adapter: UncoordinatedDatabaseAdapter) => Promise<T> | T): Promise<T>;
    runExclusively<T>(f: (adapter: UncoordinatedDatabaseAdapter) => Promise<T> | T): Promise<T>;
    get isLocked(): boolean;
}
/**
 * A generic database adapter that uses batch execution of SQL queries.
 * Extend this database adapter if your driver supports batch execution of SQL queries.
 */
export declare abstract class BatchDatabaseAdapter extends DatabaseAdapter implements DatabaseAdapterInterface {
    abstract readonly defaultNamespace: 'main' | 'public';
    /**
     * @param statements SQL statements to execute against the DB in a single batch.
     */
    abstract execBatch(statements: Statement[]): Promise<RunResult>;
    _runInTransaction(...statements: Statement[]): Promise<RunResult>;
}
/**
 * A generic database adapter that uses serial execution of SQL queries.
 * Extend this database adapter if your driver does not support batch execution of SQL queries.
 */
export declare abstract class SerialDatabaseAdapter extends DatabaseAdapter implements DatabaseAdapterInterface {
    abstract readonly defaultNamespace: 'main' | 'public';
    _runInTransaction(...statements: Statement[]): Promise<RunResult>;
}
export {};
