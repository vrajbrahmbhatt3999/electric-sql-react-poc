{"version":3,"sources":["../../../src/drivers/better-sqlite3/mock.ts"],"sourcesContent":["import { BindParams, DbName, Row, SqlValue } from '../../util/types'\nimport { Database, Statement, Transaction } from './database'\nimport type { Statement as OriginalStatement } from 'better-sqlite3'\n\ntype MockStatement<T extends BindParams = []> = Pick<\n  Statement<T>,\n  'source' | 'readonly' | 'database' | 'run' | 'get' | 'all' | 'iterate'\n>\n\nexport class MockDatabase implements Database {\n  name: DbName\n\n  inTransaction = false\n  memory = false\n\n  constructor(name: DbName) {\n    this.name = name\n  }\n\n  exec(_sql: string): this {\n    return this\n  }\n\n  prepare<T extends unknown[] | {}, R>(_sql: string) {\n    const mockStatement: MockStatement = {\n      database: this as any,\n      readonly: false,\n      source: _sql,\n      run: () => ({ changes: 0, lastInsertRowid: 1234 }),\n      get: () => ({ foo: 'bar' }),\n      all: (...params: SqlValue[] | [Row]) => {\n        if (\n          typeof params[0] == 'object' &&\n          params[0] &&\n          'shouldError' in params[0]\n        ) {\n          throw new Error('Mock query error')\n        }\n\n        return [{ foo: 'bar' }, { foo: 'baz' }]\n      },\n      iterate: () => [{ foo: 'bar' }, { foo: 'baz' }][Symbol.iterator](),\n    }\n\n    // Valid only for mocking since we don't expect to need to mock full interface\n    return mockStatement as unknown as OriginalStatement<T, R>\n  }\n\n  transaction<T extends (...args: any[]) => any>(fn: T): Transaction<T> {\n    const self = this\n\n    const baseFn = (...args: unknown[]): ReturnType<T> => {\n      self.inTransaction = true\n\n      const retval = fn(...args)\n\n      self.inTransaction = false\n\n      return retval\n    }\n\n    const txFn = baseFn as unknown as Transaction<T>\n    txFn.default = baseFn\n    txFn.deferred = baseFn\n    txFn.immediate = baseFn\n    txFn.exclusive = baseFn\n\n    return txFn\n  }\n}\n"],"mappings":"AASO,MAAM,aAAiC;AAAA,EAC5C;AAAA,EAEA,gBAAgB;AAAA,EAChB,SAAS;AAAA,EAET,YAAY,MAAc;AACxB,SAAK,OAAO;AAAA,EACd;AAAA,EAEA,KAAK,MAAoB;AACvB,WAAO;AAAA,EACT;AAAA,EAEA,QAAqC,MAAc;AACjD,UAAM,gBAA+B;AAAA,MACnC,UAAU;AAAA,MACV,UAAU;AAAA,MACV,QAAQ;AAAA,MACR,KAAK,OAAO,EAAE,SAAS,GAAG,iBAAiB,KAAK;AAAA,MAChD,KAAK,OAAO,EAAE,KAAK,MAAM;AAAA,MACzB,KAAK,IAAI,WAA+B;AACtC,YACE,OAAO,OAAO,CAAC,KAAK,YACpB,OAAO,CAAC,KACR,iBAAiB,OAAO,CAAC,GACzB;AACA,gBAAM,IAAI,MAAM,kBAAkB;AAAA,QACpC;AAEA,eAAO,CAAC,EAAE,KAAK,MAAM,GAAG,EAAE,KAAK,MAAM,CAAC;AAAA,MACxC;AAAA,MACA,SAAS,MAAM,CAAC,EAAE,KAAK,MAAM,GAAG,EAAE,KAAK,MAAM,CAAC,EAAE,OAAO,QAAQ,EAAE;AAAA,IACnE;AAGA,WAAO;AAAA,EACT;AAAA,EAEA,YAA+C,IAAuB;AACpE,UAAM,OAAO;AAEb,UAAM,SAAS,IAAI,SAAmC;AACpD,WAAK,gBAAgB;AAErB,YAAM,SAAS,GAAG,GAAG,IAAI;AAEzB,WAAK,gBAAgB;AAErB,aAAO;AAAA,IACT;AAEA,UAAM,OAAO;AACb,SAAK,UAAU;AACf,SAAK,WAAW;AAChB,SAAK,YAAY;AACjB,SAAK,YAAY;AAEjB,WAAO;AAAA,EACT;AACF;","names":[]}