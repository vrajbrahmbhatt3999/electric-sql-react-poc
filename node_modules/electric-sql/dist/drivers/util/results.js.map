{"version":3,"sources":["../../../src/drivers/util/results.ts"],"sourcesContent":["import { Row, SqlValue } from '../../util/types'\n\nexport interface Results {\n  rows: {\n    item(i: number): Row\n    length: number\n    raw?(): Row[]\n  }\n  rowsAffected: number\n  insertId?: number\n}\n\nexport interface QueryExecResult {\n  columns: string[]\n  values: SqlValue[][]\n}\n\nexport const rowsFromResults = (results: Results): Row[] => {\n  if (results.rows.raw) {\n    return results.rows.raw()\n  }\n\n  const rows = []\n  for (let i = 0; i < results.rows.length; i++) {\n    rows.push(results.rows.item(i))\n  }\n\n  return rows\n}\n\nexport const resultToRows = (res: QueryExecResult): Row[] => {\n  const cols = res.columns\n  return res.values.map((values: SqlValue[]) => {\n    const row: Row = {}\n\n    values.forEach((val: SqlValue, i: number) => {\n      const col = cols[i]\n      row[col] = val\n    })\n\n    return row\n  })\n}\n\nexport const mockResults = (rows: Row[]): Results => {\n  return {\n    rows: {\n      item: (i: number) => rows[i],\n      length: rows.length,\n      raw: () => rows,\n    },\n    rowsAffected: 0,\n  }\n}\n"],"mappings":"AAiBO,MAAM,kBAAkB,CAAC,YAA4B;AAC1D,MAAI,QAAQ,KAAK,KAAK;AACpB,WAAO,QAAQ,KAAK,IAAI;AAAA,EAC1B;AAEA,QAAM,OAAO,CAAC;AACd,WAAS,IAAI,GAAG,IAAI,QAAQ,KAAK,QAAQ,KAAK;AAC5C,SAAK,KAAK,QAAQ,KAAK,KAAK,CAAC,CAAC;AAAA,EAChC;AAEA,SAAO;AACT;AAEO,MAAM,eAAe,CAAC,QAAgC;AAC3D,QAAM,OAAO,IAAI;AACjB,SAAO,IAAI,OAAO,IAAI,CAAC,WAAuB;AAC5C,UAAM,MAAW,CAAC;AAElB,WAAO,QAAQ,CAAC,KAAe,MAAc;AAC3C,YAAM,MAAM,KAAK,CAAC;AAClB,UAAI,GAAG,IAAI;AAAA,IACb,CAAC;AAED,WAAO;AAAA,EACT,CAAC;AACH;AAEO,MAAM,cAAc,CAAC,SAAyB;AACnD,SAAO;AAAA,IACL,MAAM;AAAA,MACJ,MAAM,CAAC,MAAc,KAAK,CAAC;AAAA,MAC3B,QAAQ,KAAK;AAAA,MACb,KAAK,MAAM;AAAA,IACb;AAAA,IACA,cAAc;AAAA,EAChB;AACF;","names":[]}