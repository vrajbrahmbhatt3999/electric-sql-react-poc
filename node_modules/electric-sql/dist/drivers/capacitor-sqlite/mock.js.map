{"version":3,"sources":["../../../src/drivers/capacitor-sqlite/mock.ts"],"sourcesContent":["import { DBSQLiteValues, capSQLiteChanges } from '@capacitor-community/sqlite'\nimport { DbName } from '../../util/types'\nimport { Database } from './database'\n\nexport class MockDatabase implements Database {\n  constructor(public dbname: DbName, public fail?: Error) {}\n\n  executeSet(): Promise<capSQLiteChanges> {\n    return this.resolveIfNotFail({ changes: { changes: 0 } })\n  }\n\n  run(): Promise<capSQLiteChanges> {\n    return this.resolveIfNotFail({\n      changes: {\n        changes: 0,\n      },\n    })\n  }\n\n  execute(): Promise<capSQLiteChanges> {\n    return this.run()\n  }\n\n  query(): Promise<DBSQLiteValues> {\n    return this.resolveIfNotFail({\n      values: [\n        { textColumn: 'text1', numberColumn: 1 },\n        { textColumn: 'text2', numberColumn: 2 },\n      ],\n    })\n  }\n\n  private resolveIfNotFail<T>(value: T): Promise<T> {\n    if (typeof this.fail !== 'undefined') return Promise.reject(this.fail)\n    else return Promise.resolve(value)\n  }\n}\n"],"mappings":"AAIO,MAAM,aAAiC;AAAA,EAC5C,YAAmB,QAAuB,MAAc;AAArC;AAAuB;AAAA,EAAe;AAAA,EAEzD,aAAwC;AACtC,WAAO,KAAK,iBAAiB,EAAE,SAAS,EAAE,SAAS,EAAE,EAAE,CAAC;AAAA,EAC1D;AAAA,EAEA,MAAiC;AAC/B,WAAO,KAAK,iBAAiB;AAAA,MAC3B,SAAS;AAAA,QACP,SAAS;AAAA,MACX;AAAA,IACF,CAAC;AAAA,EACH;AAAA,EAEA,UAAqC;AACnC,WAAO,KAAK,IAAI;AAAA,EAClB;AAAA,EAEA,QAAiC;AAC/B,WAAO,KAAK,iBAAiB;AAAA,MAC3B,QAAQ;AAAA,QACN,EAAE,YAAY,SAAS,cAAc,EAAE;AAAA,QACvC,EAAE,YAAY,SAAS,cAAc,EAAE;AAAA,MACzC;AAAA,IACF,CAAC;AAAA,EACH;AAAA,EAEQ,iBAAoB,OAAsB;AAChD,QAAI,OAAO,KAAK,SAAS;AAAa,aAAO,QAAQ,OAAO,KAAK,IAAI;AAAA;AAChE,aAAO,QAAQ,QAAQ,KAAK;AAAA,EACnC;AACF;","names":[]}