import { BatchDatabaseAdapter as GenericDatabaseAdapter } from '../generic/index.js';
class DatabaseAdapter extends GenericDatabaseAdapter {
  db;
  defaultNamespace = "main";
  constructor(db) {
    super();
    this.db = db;
  }
  async _query(statement) {
    const wrapInTransaction = false;
    const result = await this.db.query(
      statement.sql,
      statement.args,
      wrapInTransaction
    );
    return result.values ?? [];
  }
  async _run(statement) {
    const wrapInTransaction = false;
    const result = await (statement.args && statement.args.length > 0 ? this.db.run(statement.sql, statement.args, wrapInTransaction) : this.db.execute(statement.sql, wrapInTransaction));
    const rowsAffected = result.changes?.changes ?? 0;
    return { rowsAffected };
  }
  async execBatch(statements) {
    const set = statements.map(({ sql, args }) => ({
      statement: sql,
      values: args ?? []
    }));
    const wrapInTransaction = true;
    const result = await this.db.executeSet(set, wrapInTransaction);
    const rowsAffected = result.changes?.changes ?? 0;
    return { rowsAffected };
  }
}
export {
  DatabaseAdapter
};
//# sourceMappingURL=adapter.js.map