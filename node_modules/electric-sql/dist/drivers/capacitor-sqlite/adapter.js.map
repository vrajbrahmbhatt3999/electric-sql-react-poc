{"version":3,"sources":["../../../src/drivers/capacitor-sqlite/adapter.ts"],"sourcesContent":["import { Database } from './database'\nimport { Row, SqlValue } from '../../util/types'\nimport { Statement } from '../../util'\nimport { BatchDatabaseAdapter as GenericDatabaseAdapter } from '../generic'\nimport { capSQLiteSet } from '@capacitor-community/sqlite'\nimport { RunResult } from '../../electric/adapter'\n\nexport class DatabaseAdapter extends GenericDatabaseAdapter {\n  readonly db: Database\n  readonly defaultNamespace = 'main'\n\n  constructor(db: Database) {\n    super()\n    this.db = db\n  }\n\n  async _query(statement: Statement): Promise<Row[]> {\n    const wrapInTransaction = false\n    const result = await this.db.query(\n      statement.sql,\n      statement.args,\n      wrapInTransaction\n    )\n\n    return result.values ?? []\n  }\n\n  async _run(statement: Statement): Promise<RunResult> {\n    const wrapInTransaction = false\n\n    // if no bind values are provided, use `execute` API which\n    // has less overhead and native side pre-processing\n    const result = await (statement.args && statement.args.length > 0\n      ? this.db.run(statement.sql, statement.args, wrapInTransaction)\n      : this.db.execute(statement.sql, wrapInTransaction))\n\n    const rowsAffected = result.changes?.changes ?? 0\n    return { rowsAffected: rowsAffected }\n  }\n\n  async execBatch(statements: Statement[]): Promise<RunResult> {\n    const set: capSQLiteSet[] = statements.map(({ sql, args }) => ({\n      statement: sql,\n      values: (args ?? []) as SqlValue[],\n    }))\n\n    const wrapInTransaction = true\n    const result = await this.db.executeSet(set, wrapInTransaction)\n\n    const rowsAffected = result.changes?.changes ?? 0\n    return { rowsAffected: rowsAffected }\n  }\n}\n"],"mappings":"AAGA,SAAS,wBAAwB,8BAA8B;AAIxD,MAAM,wBAAwB,uBAAuB;AAAA,EACjD;AAAA,EACA,mBAAmB;AAAA,EAE5B,YAAY,IAAc;AACxB,UAAM;AACN,SAAK,KAAK;AAAA,EACZ;AAAA,EAEA,MAAM,OAAO,WAAsC;AACjD,UAAM,oBAAoB;AAC1B,UAAM,SAAS,MAAM,KAAK,GAAG;AAAA,MAC3B,UAAU;AAAA,MACV,UAAU;AAAA,MACV;AAAA,IACF;AAEA,WAAO,OAAO,UAAU,CAAC;AAAA,EAC3B;AAAA,EAEA,MAAM,KAAK,WAA0C;AACnD,UAAM,oBAAoB;AAI1B,UAAM,SAAS,OAAO,UAAU,QAAQ,UAAU,KAAK,SAAS,IAC5D,KAAK,GAAG,IAAI,UAAU,KAAK,UAAU,MAAM,iBAAiB,IAC5D,KAAK,GAAG,QAAQ,UAAU,KAAK,iBAAiB;AAEpD,UAAM,eAAe,OAAO,SAAS,WAAW;AAChD,WAAO,EAAE,aAA2B;AAAA,EACtC;AAAA,EAEA,MAAM,UAAU,YAA6C;AAC3D,UAAM,MAAsB,WAAW,IAAI,CAAC,EAAE,KAAK,KAAK,OAAO;AAAA,MAC7D,WAAW;AAAA,MACX,QAAS,QAAQ,CAAC;AAAA,IACpB,EAAE;AAEF,UAAM,oBAAoB;AAC1B,UAAM,SAAS,MAAM,KAAK,GAAG,WAAW,KAAK,iBAAiB;AAE9D,UAAM,eAAe,OAAO,SAAS,WAAW;AAChD,WAAO,EAAE,aAA2B;AAAA,EACtC;AACF;","names":[]}