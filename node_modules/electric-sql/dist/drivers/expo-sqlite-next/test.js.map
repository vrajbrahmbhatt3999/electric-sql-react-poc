{"version":3,"sources":["../../../src/drivers/expo-sqlite-next/test.ts"],"sourcesContent":["// Safe entrypoint for tests that avoids importing the React Native\n// specific dependencies.\nimport { DbName } from '../../util/types'\n\nimport { ElectrifyOptions, electrify } from '../../electric/index'\n\nimport { MockMigrator } from '../../migrators/mock'\nimport { Notifier } from '../../notifiers/index'\nimport { MockNotifier } from '../../notifiers/mock'\nimport { MockRegistry } from '../../satellite/mock'\n\nimport { DatabaseAdapter } from './adapter'\nimport { Database } from './database'\nimport { MockDatabase } from './mock'\nimport { MockSocket } from '../../sockets/mock'\nimport { ElectricConfig } from '../../config'\nimport { ElectricClient } from '../../client/model/client'\nimport { DbSchema } from '../../client/model'\n\ntype RetVal<\n  S extends DbSchema<any>,\n  N extends Notifier,\n  D extends Database = Database\n> = Promise<[D, N, ElectricClient<S>]>\n\nexport async function initTestable<\n  S extends DbSchema<any>,\n  N extends Notifier = MockNotifier\n>(name: DbName, dbDescription: S): RetVal<S, N, MockDatabase>\nexport async function initTestable<\n  S extends DbSchema<any>,\n  N extends Notifier = MockNotifier\n>(\n  name: DbName,\n  dbDescription: S,\n  webSql: false,\n  config?: ElectricConfig,\n  opts?: ElectrifyOptions\n): RetVal<S, N, MockDatabase>\nexport async function initTestable<\n  S extends DbSchema<any>,\n  N extends Notifier = MockNotifier\n>(\n  name: DbName,\n  dbDescription: S,\n  webSql: true,\n  config?: ElectricConfig,\n  opts?: ElectrifyOptions\n): RetVal<S, N, MockDatabase>\nexport async function initTestable<\n  S extends DbSchema<any>,\n  N extends Notifier = MockNotifier\n>(\n  dbName: DbName,\n  dbDescription: S,\n  _useWebSQLDatabase = false,\n  config: ElectricConfig = {},\n  opts?: ElectrifyOptions\n): RetVal<S, N> {\n  const db = new MockDatabase(dbName)\n\n  const adapter = opts?.adapter || new DatabaseAdapter(db)\n  const migrator = opts?.migrator || new MockMigrator()\n  const notifier = (opts?.notifier as N) || new MockNotifier(dbName)\n  const socketFactory = opts?.socketFactory || MockSocket\n  const registry = opts?.registry || new MockRegistry()\n\n  const dal = await electrify(\n    dbName,\n    dbDescription,\n    adapter,\n    socketFactory,\n    config,\n    {\n      notifier: notifier,\n      migrator: migrator,\n      registry: registry,\n    }\n  )\n  return [db, notifier, dal]\n}\n"],"mappings":"AAIA,SAA2B,iBAAiB;AAE5C,SAAS,oBAAoB;AAE7B,SAAS,oBAAoB;AAC7B,SAAS,oBAAoB;AAE7B,SAAS,uBAAuB;AAEhC,SAAS,oBAAoB;AAC7B,SAAS,kBAAkB;AAmC3B,eAAsB,aAIpB,QACA,eACA,qBAAqB,OACrB,SAAyB,CAAC,GAC1B,MACc;AACd,QAAM,KAAK,IAAI,aAAa,MAAM;AAElC,QAAM,UAAU,MAAM,WAAW,IAAI,gBAAgB,EAAE;AACvD,QAAM,WAAW,MAAM,YAAY,IAAI,aAAa;AACpD,QAAM,WAAY,MAAM,YAAkB,IAAI,aAAa,MAAM;AACjE,QAAM,gBAAgB,MAAM,iBAAiB;AAC7C,QAAM,WAAW,MAAM,YAAY,IAAI,aAAa;AAEpD,QAAM,MAAM,MAAM;AAAA,IAChB;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,MACE;AAAA,MACA;AAAA,MACA;AAAA,IACF;AAAA,EACF;AACA,SAAO,CAAC,IAAI,UAAU,GAAG;AAC3B;","names":[]}