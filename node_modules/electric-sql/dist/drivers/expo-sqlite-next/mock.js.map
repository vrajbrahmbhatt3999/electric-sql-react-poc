{"version":3,"sources":["../../../src/drivers/expo-sqlite-next/mock.ts"],"sourcesContent":["import { Database } from './database'\nimport {\n  SQLiteBindParams,\n  SQLiteVariadicBindParams,\n  SQLiteRunResult,\n} from 'expo-sqlite/next'\n\nexport class MockDatabase implements Database {\n  constructor(public databaseName: string, public fail?: Error) {}\n\n  getAllAsync<T>(source: string, params: SQLiteBindParams): Promise<T[]>\n  getAllAsync<T>(\n    source: string,\n    ...params: SQLiteVariadicBindParams\n  ): Promise<T[]>\n  getAllAsync<T>(_source: string, _params?: unknown): Promise<T[]> {\n    return this.resolveIfNotFail([{ i: 0 } as T])\n  }\n\n  runAsync(source: string, params: SQLiteBindParams): Promise<SQLiteRunResult>\n  runAsync(\n    source: string,\n    ...params: SQLiteVariadicBindParams\n  ): Promise<SQLiteRunResult>\n  runAsync(_source: string, _params?: unknown): Promise<SQLiteRunResult> {\n    return this.resolveIfNotFail({\n      lastInsertRowId: 0,\n      changes: 0,\n    })\n  }\n\n  private resolveIfNotFail<T>(value: T): Promise<T> {\n    if (typeof this.fail !== 'undefined') return Promise.reject(this.fail)\n    else return Promise.resolve(value)\n  }\n}\n"],"mappings":"AAOO,MAAM,aAAiC;AAAA,EAC5C,YAAmB,cAA6B,MAAc;AAA3C;AAA6B;AAAA,EAAe;AAAA,EAO/D,YAAe,SAAiB,SAAiC;AAC/D,WAAO,KAAK,iBAAiB,CAAC,EAAE,GAAG,EAAE,CAAM,CAAC;AAAA,EAC9C;AAAA,EAOA,SAAS,SAAiB,SAA6C;AACrE,WAAO,KAAK,iBAAiB;AAAA,MAC3B,iBAAiB;AAAA,MACjB,SAAS;AAAA,IACX,CAAC;AAAA,EACH;AAAA,EAEQ,iBAAoB,OAAsB;AAChD,QAAI,OAAO,KAAK,SAAS;AAAa,aAAO,QAAQ,OAAO,KAAK,IAAI;AAAA;AAChE,aAAO,QAAQ,QAAQ,KAAK;AAAA,EACnC;AACF;","names":[]}