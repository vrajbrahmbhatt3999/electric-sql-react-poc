import { QualifiedTablename } from '../util/tablename.js';
import { ForeignKeyChecks } from '../config/index.js';
const _electric_oplog = "_electric_oplog";
const _electric_meta = "_electric_meta";
const _electric_migrations = "_electric_migrations";
const _electric_trigger_settings = "_electric_trigger_settings";
const _electric_shadow = "_electric_shadow";
const _electric_subscriptions = "_electric_subscriptions";
const satelliteDefaults = (namespace) => {
  return {
    metaTable: new QualifiedTablename(namespace, _electric_meta),
    migrationsTable: new QualifiedTablename(namespace, _electric_migrations),
    oplogTable: new QualifiedTablename(namespace, _electric_oplog),
    triggersTable: new QualifiedTablename(
      namespace,
      _electric_trigger_settings
    ),
    shadowTable: new QualifiedTablename(namespace, _electric_shadow),
    subscriptionsTable: new QualifiedTablename(
      namespace,
      _electric_subscriptions
    ),
    pollingInterval: 2e3,
    minSnapshotWindow: 40,
    clearOnBehindWindow: true,
    connectionBackOffOptions: {
      delayFirstAttempt: false,
      startingDelay: 1e3,
      jitter: "full",
      maxDelay: 1e4,
      numOfAttempts: 50,
      timeMultiple: 2
    },
    fkChecks: ForeignKeyChecks.disabled,
    debug: false
  };
};
const satelliteClientDefaults = {
  pushPeriod: 500
};
const validateConfig = (config) => {
  const errors = [];
  if (!config) {
    errors.push(`config not defined: ${config}`);
    return errors;
  }
  const { replication } = config;
  if (replication) {
    const { host, port } = replication;
    if (!host) {
      errors.push(`Please provide config.replication.host`);
    }
    if (!port) {
      errors.push(`Please provide config.replication.port`);
    }
    if (port && typeof port !== "number") {
      errors.push(`Please provide correct type for config.replication.port`);
    }
  }
  return errors;
};
export {
  _electric_meta,
  _electric_migrations,
  _electric_oplog,
  _electric_shadow,
  _electric_subscriptions,
  _electric_trigger_settings,
  satelliteClientDefaults,
  satelliteDefaults,
  validateConfig
};
//# sourceMappingURL=config.js.map