{"version":3,"sources":["../../../src/satellite/shapes/cache.ts"],"sourcesContent":["import EventEmitter from 'events'\nimport {\n  SatShapeDataBegin,\n  SatSubsDataBegin,\n  SatSubsDataError,\n  SatSubsReq,\n  SatSubsResp,\n  SatTransOp,\n} from '../../_generated/protocol/satellite'\nimport {\n  Relation,\n  SatelliteError,\n  SatelliteErrorCode,\n  subsDataErrorToSatelliteError,\n} from '../../util'\nimport type { TypeDecoder } from '../../util/encoders'\nimport { deserializeRow } from '../client'\nimport {\n  InitialDataChange,\n  SUBSCRIPTION_DELIVERED,\n  SUBSCRIPTION_ERROR,\n  SubscriptionData,\n} from './types'\nimport { DbSchema } from '../../client/model/schema'\n\ntype SubscriptionId = string\ntype RequestId = string\n\ntype SubscriptionDataInternal = {\n  subscriptionId: SubscriptionId\n  lsn: SatSubsDataBegin['lsn']\n  transaction: SatTransOp[]\n  shapeReqToUuid: Record<string, string>\n}\n\nexport class SubscriptionsDataCache extends EventEmitter {\n  requestedSubscriptions: Record<SubscriptionId, Set<RequestId>>\n  remainingShapes: Set<RequestId>\n  currentShapeRequestId?: RequestId\n  inDelivery?: SubscriptionDataInternal\n  dbDescription: DbSchema<any>\n\n  constructor(dbDescription: DbSchema<any>, private decoder: TypeDecoder) {\n    super()\n\n    this.requestedSubscriptions = {}\n    this.remainingShapes = new Set()\n    this.dbDescription = dbDescription\n  }\n\n  isDelivering(): boolean {\n    return this.inDelivery !== undefined\n  }\n\n  subscriptionRequest(subsRequest: SatSubsReq) {\n    const { subscriptionId, shapeRequests } = subsRequest\n    const requestedShapes = new Set(\n      shapeRequests.map((shape) => shape.requestId)\n    )\n    this.requestedSubscriptions[subscriptionId] = requestedShapes\n  }\n\n  subscriptionResponse({ subscriptionId }: SatSubsResp) {\n    if (!this.requestedSubscriptions[subscriptionId]) {\n      this.internalError(\n        SatelliteErrorCode.UNEXPECTED_SUBSCRIPTION_STATE,\n        `Received subscribe response for unknown subscription ${subscriptionId}`,\n        subscriptionId\n      )\n    }\n  }\n\n  subscriptionDataBegin({ subscriptionId, lsn }: SatSubsDataBegin) {\n    if (!this.requestedSubscriptions[subscriptionId]) {\n      this.internalError(\n        SatelliteErrorCode.UNEXPECTED_SUBSCRIPTION_STATE,\n        `Received SatSubsDataBegin but for unknown subscription ${subscriptionId}`,\n        subscriptionId\n      )\n    }\n\n    if (this.inDelivery) {\n      this.internalError(\n        SatelliteErrorCode.UNEXPECTED_SUBSCRIPTION_STATE,\n        `received SatSubsDataStart for subscription ${subscriptionId} but a subscription (${this.inDelivery.subscriptionId}) is already being delivered`,\n        subscriptionId\n      )\n    }\n\n    this.remainingShapes = this.requestedSubscriptions[subscriptionId]\n    this.inDelivery = {\n      subscriptionId,\n      lsn,\n      transaction: [],\n      shapeReqToUuid: {},\n    }\n  }\n\n  subscriptionDataEnd(\n    relations: Map<number, Relation>\n  ): SubscriptionDataInternal {\n    if (!this.inDelivery) {\n      this.internalError(\n        SatelliteErrorCode.UNEXPECTED_SUBSCRIPTION_STATE,\n        `Received SatSubDataEnd but no subscription is being delivered`\n      )\n    }\n\n    if (this.remainingShapes.size > 0) {\n      this.internalError(\n        SatelliteErrorCode.UNEXPECTED_SUBSCRIPTION_STATE,\n        `Received SatSubDataEnd but not all shapes have been delivered`\n      )\n    }\n\n    const delivered = this.inDelivery\n    const subscriptionData: SubscriptionData = {\n      subscriptionId: delivered.subscriptionId,\n      lsn: delivered.lsn,\n      data: delivered.transaction.map((t) =>\n        this.processShapeDataOperations(t, relations)\n      ),\n      shapeReqToUuid: delivered.shapeReqToUuid,\n    }\n\n    this.reset(subscriptionData.subscriptionId)\n    this.emit(SUBSCRIPTION_DELIVERED, subscriptionData)\n    return delivered\n  }\n\n  shapeDataBegin(shape: SatShapeDataBegin) {\n    if (!this.inDelivery) {\n      this.internalError(\n        SatelliteErrorCode.UNEXPECTED_SUBSCRIPTION_STATE,\n        `Received SatShapeDataBegin but no subscription is being delivered`\n      )\n    }\n\n    if (this.remainingShapes.size === 0) {\n      this.internalError(\n        SatelliteErrorCode.UNEXPECTED_SUBSCRIPTION_STATE,\n        `Received SatShapeDataBegin but all shapes have been delivered for this subscription`\n      )\n    }\n\n    if (this.currentShapeRequestId) {\n      this.internalError(\n        SatelliteErrorCode.UNEXPECTED_SUBSCRIPTION_STATE,\n        `Received SatShapeDataBegin for shape with uuid ${shape.uuid} but a shape is already being delivered`\n      )\n    }\n\n    if (this.inDelivery.shapeReqToUuid[shape.requestId]) {\n      this.internalError(\n        SatelliteErrorCode.UNEXPECTED_SUBSCRIPTION_STATE,\n        `Received SatShapeDataBegin for shape with uuid ${shape.uuid} but shape has already been delivered`\n      )\n    }\n\n    this.inDelivery.shapeReqToUuid[shape.requestId] = shape.uuid\n    this.currentShapeRequestId = shape.requestId\n  }\n\n  shapeDataEnd() {\n    if (!this.inDelivery) {\n      this.internalError(\n        SatelliteErrorCode.UNEXPECTED_SUBSCRIPTION_STATE,\n        `Received SatShapeDataEnd but no subscription is being delivered`\n      )\n    }\n\n    if (!this.currentShapeRequestId) {\n      this.internalError(\n        SatelliteErrorCode.UNEXPECTED_SUBSCRIPTION_STATE,\n        `Received SatShapeDataEnd but no shape is being delivered`\n      )\n    }\n\n    this.remainingShapes.delete(this.currentShapeRequestId)\n    this.currentShapeRequestId = undefined\n  }\n\n  transaction(ops: SatTransOp[]) {\n    if (\n      this.remainingShapes.size === 0 ||\n      !this.inDelivery ||\n      !this.currentShapeRequestId\n    ) {\n      this.internalError(\n        SatelliteErrorCode.UNEXPECTED_SUBSCRIPTION_STATE,\n        `Received SatOpLog but no shape is being delivered`\n      )\n    }\n    for (const op of ops) {\n      if (op.begin || op.commit || op.update || op.delete) {\n        this.internalError(\n          SatelliteErrorCode.UNEXPECTED_MESSAGE_TYPE,\n          `Received begin, commit, update or delete message, but these messages are not valid in subscriptions`\n        )\n      }\n\n      this.inDelivery.transaction.push(op)\n    }\n  }\n\n  internalError(\n    code: SatelliteErrorCode,\n    msg: string,\n    subId: SubscriptionId | undefined = this.inDelivery?.subscriptionId\n  ): never {\n    this.reset(subId)\n    const error = new SatelliteError(code, msg)\n    this.emit(SUBSCRIPTION_ERROR, error)\n\n    throw error\n  }\n\n  // It is safe to reset the cache state without throwing.\n  // However, if message is unexpected, we emit the error\n  subscriptionError(subId: SubscriptionId): void {\n    if (!this.requestedSubscriptions[subId]) {\n      this.internalError(\n        SatelliteErrorCode.SUBSCRIPTION_NOT_FOUND,\n        `received subscription error for unknown subscription ${subId}`,\n        subId\n      )\n    }\n\n    this.reset(subId)\n  }\n\n  subscriptionDataError(subId: SubscriptionId, msg: SatSubsDataError): never {\n    let error = subsDataErrorToSatelliteError(msg)\n    if (!this.inDelivery) {\n      error = new SatelliteError(\n        SatelliteErrorCode.UNEXPECTED_SUBSCRIPTION_STATE,\n        `received subscription data error, but no subscription is being delivered: ${error.message}`\n      )\n    }\n\n    this.reset(subId)\n\n    this.emit(SUBSCRIPTION_ERROR, error, msg.subscriptionId)\n    throw error\n  }\n\n  reset(subscriptionId?: string) {\n    if (subscriptionId) delete this.requestedSubscriptions[subscriptionId]\n    if (subscriptionId === this.inDelivery?.subscriptionId) {\n      // Only reset the delivery information\n      // if the reset is meant for the subscription\n      // that is currently being delivered.\n      // This ensures we do not reset delivery information\n      // if there is an error for another subscription\n      // that is not the one being delivered.\n      this.remainingShapes = new Set()\n      this.currentShapeRequestId = undefined\n      this.inDelivery = undefined\n    }\n  }\n\n  private processShapeDataOperations(\n    op: SatTransOp,\n    relations: Map<number, Relation>\n  ): InitialDataChange {\n    if (!op.insert) {\n      this.internalError(\n        SatelliteErrorCode.UNEXPECTED_MESSAGE_TYPE,\n        'invalid shape data operation'\n      )\n    }\n\n    const { relationId, rowData, tags } = op.insert\n\n    const relation = relations.get(relationId)\n    if (!relation) {\n      this.internalError(\n        SatelliteErrorCode.PROTOCOL_VIOLATION,\n        `missing relation ${relationId} for incoming operation`\n      )\n    }\n\n    const record = deserializeRow(\n      rowData,\n      relation,\n      this.dbDescription,\n      this.decoder\n    )\n\n    if (!record) {\n      this.internalError(\n        SatelliteErrorCode.PROTOCOL_VIOLATION,\n        'INSERT operations has no data'\n      )\n    }\n\n    return {\n      relation,\n      record,\n      tags,\n    }\n  }\n}\n"],"mappings":"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","names":[]}