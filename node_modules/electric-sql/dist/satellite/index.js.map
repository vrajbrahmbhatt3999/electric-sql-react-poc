{"version":3,"sources":["../../src/satellite/index.ts"],"sourcesContent":["import Long from 'long'\nimport { AuthConfig, AuthState } from '../auth/index'\nimport { InternalElectricConfig } from '../config/index'\nimport { DatabaseAdapter } from '../electric/adapter'\nimport { Migrator } from '../migrators/index'\nimport { Notifier } from '../notifiers/index'\nimport { SocketFactory } from '../sockets'\nimport {\n  AuthResponse,\n  ConnectivityState,\n  DbName,\n  LSN,\n  DataTransaction,\n  StartReplicationResponse,\n  StopReplicationResponse,\n  ErrorCallback,\n  TransactionCallback,\n  RelationCallback,\n  OutboundStartedCallback,\n  SatelliteError,\n  ReplicationStatus,\n  AdditionalDataCallback,\n  DbRecord,\n  ReplicatedRowTransformer,\n  GoneBatchCallback,\n} from '../util/types'\nimport {\n  ShapeRequest,\n  SubscribeResponse,\n  SubscriptionDeliveredCallback,\n  SubscriptionErrorCallback,\n  UnsubscribeResponse,\n} from './shapes/types'\nimport { DbSchema } from '../client/model/schema'\nimport { QualifiedTablename } from '../util'\nimport { IShapeManager } from '../client/model/shapes'\n\nexport { MockRegistry } from './mock'\nexport { SatelliteProcess } from './process'\nexport { GlobalRegistry, globalRegistry } from './registry'\nexport type { ShapeSubscription } from './process'\nexport type { Shape, Rel } from './shapes/types'\n\n// `Registry` that starts one Satellite process per database.\nexport interface Registry {\n  satellites: {\n    [key: DbName]: Satellite\n  }\n\n  ensureStarted(\n    dbName: DbName,\n    dbDescription: DbSchema<any>,\n    adapter: DatabaseAdapter,\n    migrator: Migrator,\n    notifier: Notifier,\n    socketFactory: SocketFactory,\n    config: InternalElectricConfig\n  ): Promise<Satellite>\n  ensureAlreadyStarted(dbName: DbName): Promise<Satellite>\n  stop(dbName: DbName): Promise<void>\n  stopAll(): Promise<void>\n}\n\n// `Satellite` is the main process handling ElectricSQL replication,\n// processing the opslog and notifying when there are data changes.\nexport interface Satellite extends IShapeManager {\n  dbName: DbName\n\n  adapter: DatabaseAdapter\n  migrator: Migrator\n  notifier: Notifier\n\n  connectivityState?: ConnectivityState\n\n  start(authConfig: AuthConfig): Promise<void>\n  stop(shutdown?: boolean): Promise<void>\n  setToken(token?: string): void\n  hasToken(): boolean\n  connectWithBackoff(): Promise<void>\n  disconnect(error?: SatelliteError): void\n  clientDisconnect(): void\n  authenticate(token: string): Promise<void>\n\n  setReplicationTransform(\n    tableName: QualifiedTablename,\n    transform: ReplicatedRowTransformer<DbRecord>\n  ): void\n  clearReplicationTransform(tableName: QualifiedTablename): void\n}\n\nexport interface Client {\n  connect(): Promise<void>\n  disconnect(): void\n  shutdown(): Promise<void>\n  authenticate(authState: AuthState): Promise<AuthResponse>\n  isConnected(): boolean\n  getOutboundReplicationStatus(): ReplicationStatus\n  startReplication(\n    lsn?: LSN,\n    schemaVersion?: string,\n    subscriptionIds?: string[],\n    observedTransactionData?: Long[]\n  ): Promise<StartReplicationResponse>\n  stopReplication(): Promise<StopReplicationResponse>\n  subscribeToRelations(callback: RelationCallback): void\n  unsubscribeToRelations(callback: RelationCallback): void\n  subscribeToTransactions(callback: TransactionCallback): void\n  unsubscribeToTransactions(callback: TransactionCallback): void\n  subscribeToAdditionalData(callback: AdditionalDataCallback): void\n  unsubscribeToAdditionalData(callback: AdditionalDataCallback): void\n  subscribeToGoneBatch(callback: GoneBatchCallback): void\n  unsubscribeToGoneBatch(callback: GoneBatchCallback): void\n  enqueueTransaction(transaction: DataTransaction): void\n  getLastSentLsn(): LSN\n  subscribeToOutboundStarted(callback: OutboundStartedCallback): void\n  unsubscribeToOutboundStarted(callback: OutboundStartedCallback): void\n  subscribeToError(callback: ErrorCallback): void\n  unsubscribeToError(callback: ErrorCallback): void\n\n  subscribe(subId: string, shapes: ShapeRequest[]): Promise<SubscribeResponse>\n  unsubscribe(subIds: string[]): Promise<UnsubscribeResponse>\n\n  subscribeToSubscriptionEvents(\n    successCallback: SubscriptionDeliveredCallback,\n    errorCallback: SubscriptionErrorCallback\n  ): void\n  unsubscribeToSubscriptionEvents(\n    successCallback: SubscriptionDeliveredCallback,\n    errorCallback: SubscriptionErrorCallback\n  ): void\n\n  setReplicationTransform(\n    tableName: QualifiedTablename,\n    transformer: ReplicatedRowTransformer<DbRecord>\n  ): void\n  clearReplicationTransform(tableName: QualifiedTablename): void\n}\n"],"mappings":"AAqCA,SAAS,oBAAoB;AAC7B,SAAS,wBAAwB;AACjC,SAAS,gBAAgB,sBAAsB;","names":[]}