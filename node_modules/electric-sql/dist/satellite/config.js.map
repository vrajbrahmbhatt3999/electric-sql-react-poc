{"version":3,"sources":["../../src/satellite/config.ts"],"sourcesContent":["import { IBackOffOptions } from 'exponential-backoff'\nimport { QualifiedTablename } from '../util/tablename'\nimport { ForeignKeyChecks } from '../config'\n\nexport type ConnectionBackoffOptions = Omit<IBackOffOptions, 'retry'>\nexport interface SatelliteOpts {\n  /** The database table where Satellite keeps its processing metadata. */\n  metaTable: QualifiedTablename\n  /** The database table where the bundle migrator keeps its metadata. */\n  migrationsTable: QualifiedTablename\n  /** The database table where change operations are written to by the triggers */\n  /** automatically added to all tables in the user defined DDL schema. */\n  oplogTable: QualifiedTablename\n  /** The database table that controls active opLog triggers. */\n  triggersTable: QualifiedTablename\n  /** The database table that contains dependency tracking information */\n  shadowTable: QualifiedTablename\n  /** The database table that holds information about established subscriptions */\n  subscriptionsTable: QualifiedTablename\n  /** Polls the database for changes every `pollingInterval` milliseconds. */\n  pollingInterval: number\n  /** Throttle snapshotting to once per `minSnapshotWindow` milliseconds. */\n  minSnapshotWindow: number\n  /** On reconnect, clear client's state if cannot catch up with Electric buffered WAL */\n  clearOnBehindWindow: boolean\n  /** Backoff options for connecting with Electric*/\n  connectionBackOffOptions: ConnectionBackoffOptions\n  /**\n   * Whether to enable or disable FK checks when applying incoming (i.e. remote) transactions to the local SQLite database.\n   * When set to `inherit` the FK pragma is left untouched.\n   * This option defaults to `disable` which disables FK checks on incoming transactions.\n   * This option only affects FK checks on SQLite databases and should not be modified when using Postgres.\n   */\n  fkChecks: ForeignKeyChecks\n  /** With debug mode enabled, Satellite can show additional logs. */\n  debug: boolean\n}\n\nexport interface SatelliteOverrides {\n  metaTable?: QualifiedTablename\n  migrationsTable?: QualifiedTablename\n  oplogTable?: QualifiedTablename\n  pollingInterval?: number\n  minSnapshotWindow?: number\n}\n\nexport const _electric_oplog = '_electric_oplog'\nexport const _electric_meta = '_electric_meta'\nexport const _electric_migrations = '_electric_migrations'\nexport const _electric_trigger_settings = '_electric_trigger_settings'\nexport const _electric_shadow = '_electric_shadow'\nexport const _electric_subscriptions = '_electric_subscriptions'\n\nexport const satelliteDefaults: (namespace: string) => SatelliteOpts = (\n  namespace: string\n) => {\n  return {\n    metaTable: new QualifiedTablename(namespace, _electric_meta),\n    migrationsTable: new QualifiedTablename(namespace, _electric_migrations),\n    oplogTable: new QualifiedTablename(namespace, _electric_oplog),\n    triggersTable: new QualifiedTablename(\n      namespace,\n      _electric_trigger_settings\n    ),\n    shadowTable: new QualifiedTablename(namespace, _electric_shadow),\n    subscriptionsTable: new QualifiedTablename(\n      namespace,\n      _electric_subscriptions\n    ),\n    pollingInterval: 2000,\n    minSnapshotWindow: 40,\n    clearOnBehindWindow: true,\n    connectionBackOffOptions: {\n      delayFirstAttempt: false,\n      startingDelay: 1000,\n      jitter: 'full',\n      maxDelay: 10000,\n      numOfAttempts: 50,\n      timeMultiple: 2,\n    },\n    fkChecks: ForeignKeyChecks.disabled,\n    debug: false,\n  }\n}\n\nexport const satelliteClientDefaults = {\n  pushPeriod: 500,\n}\n\nexport interface SatelliteClientOpts {\n  host: string\n  port: number\n  ssl: boolean\n  timeout: number\n  pushPeriod?: number\n  dialect: 'SQLite' | 'Postgres'\n}\n\nexport const validateConfig = (config: any) => {\n  const errors = []\n  if (!config) {\n    errors.push(`config not defined: ${config}`)\n    return errors\n  }\n\n  const { replication } = config\n\n  if (replication) {\n    const { host, port } = replication\n\n    if (!host) {\n      errors.push(`Please provide config.replication.host`)\n    }\n    if (!port) {\n      errors.push(`Please provide config.replication.port`)\n    }\n    if (port && typeof port !== 'number') {\n      errors.push(`Please provide correct type for config.replication.port`)\n    }\n  }\n\n  return errors\n}\n"],"mappings":"AACA,SAAS,0BAA0B;AACnC,SAAS,wBAAwB;AA4C1B,MAAM,kBAAkB;AACxB,MAAM,iBAAiB;AACvB,MAAM,uBAAuB;AAC7B,MAAM,6BAA6B;AACnC,MAAM,mBAAmB;AACzB,MAAM,0BAA0B;AAEhC,MAAM,oBAA0D,CACrE,cACG;AACH,SAAO;AAAA,IACL,WAAW,IAAI,mBAAmB,WAAW,cAAc;AAAA,IAC3D,iBAAiB,IAAI,mBAAmB,WAAW,oBAAoB;AAAA,IACvE,YAAY,IAAI,mBAAmB,WAAW,eAAe;AAAA,IAC7D,eAAe,IAAI;AAAA,MACjB;AAAA,MACA;AAAA,IACF;AAAA,IACA,aAAa,IAAI,mBAAmB,WAAW,gBAAgB;AAAA,IAC/D,oBAAoB,IAAI;AAAA,MACtB;AAAA,MACA;AAAA,IACF;AAAA,IACA,iBAAiB;AAAA,IACjB,mBAAmB;AAAA,IACnB,qBAAqB;AAAA,IACrB,0BAA0B;AAAA,MACxB,mBAAmB;AAAA,MACnB,eAAe;AAAA,MACf,QAAQ;AAAA,MACR,UAAU;AAAA,MACV,eAAe;AAAA,MACf,cAAc;AAAA,IAChB;AAAA,IACA,UAAU,iBAAiB;AAAA,IAC3B,OAAO;AAAA,EACT;AACF;AAEO,MAAM,0BAA0B;AAAA,EACrC,YAAY;AACd;AAWO,MAAM,iBAAiB,CAAC,WAAgB;AAC7C,QAAM,SAAS,CAAC;AAChB,MAAI,CAAC,QAAQ;AACX,WAAO,KAAK,uBAAuB,MAAM,EAAE;AAC3C,WAAO;AAAA,EACT;AAEA,QAAM,EAAE,YAAY,IAAI;AAExB,MAAI,aAAa;AACf,UAAM,EAAE,MAAM,KAAK,IAAI;AAEvB,QAAI,CAAC,MAAM;AACT,aAAO,KAAK,wCAAwC;AAAA,IACtD;AACA,QAAI,CAAC,MAAM;AACT,aAAO,KAAK,wCAAwC;AAAA,IACtD;AACA,QAAI,QAAQ,OAAO,SAAS,UAAU;AACpC,aAAO,KAAK,yDAAyD;AAAA,IACvE;AAAA,EACF;AAEA,SAAO;AACT;","names":[]}