import EventEmitter from "events";
import { AUTH_EXPIRED_CLOSE_EVENT } from './index.js';
import { SatelliteError, SatelliteErrorCode } from '../util/index.js';
class GenericWebSocket extends EventEmitter {
  openListener = () => this.emit("open");
  messageListener = (ev) => {
    const buffer = new Uint8Array(ev.data);
    this.emit("message", buffer);
  };
  errorListener = () => this.emit(
    "error",
    new SatelliteError(SatelliteErrorCode.SOCKET_ERROR, "socket error")
  );
  closeListener = (ev) => this.emit("close", ev);
  constructor() {
    super();
  }
  open(opts) {
    if (this.socket) {
      throw new SatelliteError(
        SatelliteErrorCode.INTERNAL,
        "trying to open a socket before closing existing socket"
      );
    }
    this.socket = this.makeSocket(opts);
    this.socket.addEventListener("open", this.openListener.bind(this));
    this.socket.addEventListener("message", this.messageListener.bind(this));
    this.socket.addEventListener("error", this.errorListener.bind(this));
    this.socket.addEventListener("close", this.closeListener.bind(this));
    return this;
  }
  write(data) {
    this.socket?.send(data);
    return this;
  }
  closeAndRemoveListeners() {
    this.removeAllListeners();
    this.socket?.removeEventListener("open", this.openListener);
    this.socket?.removeEventListener("message", this.messageListener);
    this.socket?.removeEventListener("error", this.errorListener);
    this.socket?.removeEventListener("close", this.closeListener);
    this.socket?.close();
    return this;
  }
  onMessage(cb) {
    this.on("message", cb);
  }
  onError(cb) {
    this.on("error", cb);
  }
  onClose(cb) {
    const callback = (ev) => {
      const reason = ev.reason === AUTH_EXPIRED_CLOSE_EVENT ? SatelliteErrorCode.AUTH_EXPIRED : SatelliteErrorCode.SOCKET_ERROR;
      cb(reason);
    };
    this.on("close", callback);
  }
  onceConnect(cb) {
    this.once("open", cb);
  }
  onceError(cb) {
    this.once("error", cb);
  }
  removeErrorListener(cb) {
    this.removeListener("error", cb);
  }
}
export {
  GenericWebSocket
};
//# sourceMappingURL=genericSocket.js.map