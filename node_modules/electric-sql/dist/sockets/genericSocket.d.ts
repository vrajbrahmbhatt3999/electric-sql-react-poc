/// <reference types="node" />
/// <reference types="node" />
import EventEmitter from 'events';
import { ConnectionOptions, Data, Socket } from './index.js';
import { SatelliteError, SocketCloseReason } from '../util/index.js';
type WriteType<SupportBuffer extends boolean> = SupportBuffer extends false ? Data : Data | Buffer;
interface MessageEvent<T = any> {
    data: T;
}
interface CloseEvent {
    code: number;
    reason: string;
}
export interface IWebSocket<SupportBuffer extends boolean> {
    send(data: WriteType<SupportBuffer>): void;
    addEventListener(event: 'open', cb: () => void): void;
    addEventListener(event: 'message', cb: (ev: MessageEvent) => void): void;
    addEventListener(event: 'error', cb: (ev: any) => void): void;
    addEventListener(event: 'close', cb: (ev: CloseEvent) => void): void;
    removeEventListener(event: 'open' | 'message' | 'error' | 'close', cb: (...args: any[]) => void): void;
    close(): void;
}
export declare abstract class GenericWebSocket<SupportBuffer extends boolean = false> extends EventEmitter implements Socket {
    protected abstract socket?: IWebSocket<SupportBuffer>;
    protected abstract makeSocket(opts: ConnectionOptions): IWebSocket<SupportBuffer>;
    private openListener;
    protected messageListener: (ev: MessageEvent) => void;
    private errorListener;
    private closeListener;
    constructor();
    open(opts: ConnectionOptions): this;
    write(data: WriteType<SupportBuffer>): this;
    closeAndRemoveListeners(): this;
    onMessage(cb: (data: Data) => void): void;
    onError(cb: (error: SatelliteError) => void): void;
    onClose(cb: (reason: SocketCloseReason) => void): void;
    onceConnect(cb: () => void): void;
    onceError(cb: (error: SatelliteError) => void): void;
    removeErrorListener(cb: (error: SatelliteError) => void): void;
}
export {};
