{"version":3,"sources":["../../src/sockets/genericSocket.ts"],"sourcesContent":["import EventEmitter from 'events'\nimport { AUTH_EXPIRED_CLOSE_EVENT, ConnectionOptions, Data, Socket } from '.'\nimport { SatelliteError, SatelliteErrorCode, SocketCloseReason } from '../util'\n\ntype WriteType<SupportBuffer extends boolean> = SupportBuffer extends false\n  ? Data\n  : Data | Buffer\n\ninterface MessageEvent<T = any> {\n  data: T\n}\n\ninterface CloseEvent {\n  code: number\n  reason: string\n}\n\nexport interface IWebSocket<SupportBuffer extends boolean> {\n  send(data: WriteType<SupportBuffer>): void\n\n  addEventListener(event: 'open', cb: () => void): void\n  addEventListener(event: 'message', cb: (ev: MessageEvent) => void): void\n  addEventListener(event: 'error', cb: (ev: any) => void): void\n  addEventListener(event: 'close', cb: (ev: CloseEvent) => void): void\n\n  removeEventListener(\n    event: 'open' | 'message' | 'error' | 'close',\n    cb: (...args: any[]) => void\n  ): void\n\n  close(): void\n}\n\nexport abstract class GenericWebSocket<SupportBuffer extends boolean = false>\n  extends EventEmitter\n  implements Socket\n{\n  protected abstract socket?: IWebSocket<SupportBuffer>\n  protected abstract makeSocket(\n    opts: ConnectionOptions\n  ): IWebSocket<SupportBuffer>\n\n  private openListener = () => this.emit('open')\n  protected messageListener = (ev: MessageEvent) => {\n    const buffer = new Uint8Array(ev.data)\n    this.emit('message', buffer)\n  }\n  private errorListener = () =>\n    this.emit(\n      'error',\n      new SatelliteError(SatelliteErrorCode.SOCKET_ERROR, 'socket error')\n    )\n  private closeListener = (ev: CloseEvent) => this.emit('close', ev)\n\n  constructor() {\n    super()\n  }\n\n  open(opts: ConnectionOptions): this {\n    if (this.socket) {\n      throw new SatelliteError(\n        SatelliteErrorCode.INTERNAL,\n        'trying to open a socket before closing existing socket'\n      )\n    }\n\n    this.socket = this.makeSocket(opts)\n\n    this.socket.addEventListener('open', this.openListener.bind(this))\n    this.socket.addEventListener('message', this.messageListener.bind(this))\n    this.socket.addEventListener('error', this.errorListener.bind(this))\n    this.socket.addEventListener('close', this.closeListener.bind(this))\n\n    return this\n  }\n\n  write(data: WriteType<SupportBuffer>): this {\n    this.socket?.send(data)\n    return this\n  }\n\n  closeAndRemoveListeners(): this {\n    this.removeAllListeners()\n    this.socket?.removeEventListener('open', this.openListener)\n    this.socket?.removeEventListener('message', this.messageListener)\n    this.socket?.removeEventListener('error', this.errorListener)\n    this.socket?.removeEventListener('close', this.closeListener)\n    this.socket?.close()\n    return this\n  }\n\n  onMessage(cb: (data: Data) => void): void {\n    this.on('message', cb)\n  }\n\n  onError(cb: (error: SatelliteError) => void): void {\n    this.on('error', cb)\n  }\n\n  onClose(cb: (reason: SocketCloseReason) => void): void {\n    const callback = (ev: CloseEvent) => {\n      const reason =\n        ev.reason === AUTH_EXPIRED_CLOSE_EVENT\n          ? SatelliteErrorCode.AUTH_EXPIRED\n          : SatelliteErrorCode.SOCKET_ERROR\n      cb(reason)\n    }\n    this.on('close', callback)\n  }\n\n  onceConnect(cb: () => void): void {\n    this.once('open', cb)\n  }\n\n  onceError(cb: (error: SatelliteError) => void): void {\n    this.once('error', cb)\n  }\n\n  removeErrorListener(cb: (error: SatelliteError) => void): void {\n    this.removeListener('error', cb)\n  }\n}\n"],"mappings":"AAAA,OAAO,kBAAkB;AACzB,SAAS,gCAAiE;AAC1E,SAAS,gBAAgB,0BAA6C;AA+B/D,MAAe,yBACZ,aAEV;AAAA,EAMU,eAAe,MAAM,KAAK,KAAK,MAAM;AAAA,EACnC,kBAAkB,CAAC,OAAqB;AAChD,UAAM,SAAS,IAAI,WAAW,GAAG,IAAI;AACrC,SAAK,KAAK,WAAW,MAAM;AAAA,EAC7B;AAAA,EACQ,gBAAgB,MACtB,KAAK;AAAA,IACH;AAAA,IACA,IAAI,eAAe,mBAAmB,cAAc,cAAc;AAAA,EACpE;AAAA,EACM,gBAAgB,CAAC,OAAmB,KAAK,KAAK,SAAS,EAAE;AAAA,EAEjE,cAAc;AACZ,UAAM;AAAA,EACR;AAAA,EAEA,KAAK,MAA+B;AAClC,QAAI,KAAK,QAAQ;AACf,YAAM,IAAI;AAAA,QACR,mBAAmB;AAAA,QACnB;AAAA,MACF;AAAA,IACF;AAEA,SAAK,SAAS,KAAK,WAAW,IAAI;AAElC,SAAK,OAAO,iBAAiB,QAAQ,KAAK,aAAa,KAAK,IAAI,CAAC;AACjE,SAAK,OAAO,iBAAiB,WAAW,KAAK,gBAAgB,KAAK,IAAI,CAAC;AACvE,SAAK,OAAO,iBAAiB,SAAS,KAAK,cAAc,KAAK,IAAI,CAAC;AACnE,SAAK,OAAO,iBAAiB,SAAS,KAAK,cAAc,KAAK,IAAI,CAAC;AAEnE,WAAO;AAAA,EACT;AAAA,EAEA,MAAM,MAAsC;AAC1C,SAAK,QAAQ,KAAK,IAAI;AACtB,WAAO;AAAA,EACT;AAAA,EAEA,0BAAgC;AAC9B,SAAK,mBAAmB;AACxB,SAAK,QAAQ,oBAAoB,QAAQ,KAAK,YAAY;AAC1D,SAAK,QAAQ,oBAAoB,WAAW,KAAK,eAAe;AAChE,SAAK,QAAQ,oBAAoB,SAAS,KAAK,aAAa;AAC5D,SAAK,QAAQ,oBAAoB,SAAS,KAAK,aAAa;AAC5D,SAAK,QAAQ,MAAM;AACnB,WAAO;AAAA,EACT;AAAA,EAEA,UAAU,IAAgC;AACxC,SAAK,GAAG,WAAW,EAAE;AAAA,EACvB;AAAA,EAEA,QAAQ,IAA2C;AACjD,SAAK,GAAG,SAAS,EAAE;AAAA,EACrB;AAAA,EAEA,QAAQ,IAA+C;AACrD,UAAM,WAAW,CAAC,OAAmB;AACnC,YAAM,SACJ,GAAG,WAAW,2BACV,mBAAmB,eACnB,mBAAmB;AACzB,SAAG,MAAM;AAAA,IACX;AACA,SAAK,GAAG,SAAS,QAAQ;AAAA,EAC3B;AAAA,EAEA,YAAY,IAAsB;AAChC,SAAK,KAAK,QAAQ,EAAE;AAAA,EACtB;AAAA,EAEA,UAAU,IAA2C;AACnD,SAAK,KAAK,SAAS,EAAE;AAAA,EACvB;AAAA,EAEA,oBAAoB,IAA2C;AAC7D,SAAK,eAAe,SAAS,EAAE;AAAA,EACjC;AACF;","names":[]}