{"version":3,"sources":["../../src/auth/decode.ts"],"sourcesContent":["import { base64 } from '../util/encoders'\n\nexport interface JwtPayload {\n  iss?: string\n  sub?: string\n  // user_id for backwards compatibility\n  user_id?: string\n  aud?: string[] | string\n  exp?: number\n  nbf?: number\n  iat?: number\n  jti?: string\n}\n\nexport class InvalidTokenError extends Error {}\n\n/**\n * Decodes a JWT token into a JWT payload.\n * Adapted from: https://github.com/auth0/jwt-decode\n *\n * @param token the JWT token to decode\n * @returns the decoded payload\n */\nexport function jwtDecode(token: string): JwtPayload {\n  const pos = 1\n  const part = token.split('.')[pos]\n\n  if (typeof part !== 'string') {\n    throw new InvalidTokenError(\n      `Invalid token specified: missing part #${pos + 1}`\n    )\n  }\n\n  let decodeSuccess = false\n  try {\n    const decoded = base64.decode(part)\n    decodeSuccess = true\n    return JSON.parse(decoded) as JwtPayload\n  } catch (e) {\n    const problem = decodeSuccess ? 'invalid json' : 'invalid base64'\n    throw new InvalidTokenError(\n      `Invalid token specified: ${problem} for part #${pos + 1} (${\n        (e as Error).message\n      })`\n    )\n  }\n}\n"],"mappings":"AAAA,SAAS,cAAc;AAchB,MAAM,0BAA0B,MAAM;AAAC;AASvC,SAAS,UAAU,OAA2B;AACnD,QAAM,MAAM;AACZ,QAAM,OAAO,MAAM,MAAM,GAAG,EAAE,GAAG;AAEjC,MAAI,OAAO,SAAS,UAAU;AAC5B,UAAM,IAAI;AAAA,MACR,0CAA0C,MAAM,CAAC;AAAA,IACnD;AAAA,EACF;AAEA,MAAI,gBAAgB;AACpB,MAAI;AACF,UAAM,UAAU,OAAO,OAAO,IAAI;AAClC,oBAAgB;AAChB,WAAO,KAAK,MAAM,OAAO;AAAA,EAC3B,SAAS,GAAG;AACV,UAAM,UAAU,gBAAgB,iBAAiB;AACjD,UAAM,IAAI;AAAA,MACR,4BAA4B,OAAO,cAAc,MAAM,CAAC,KACrD,EAAY,OACf;AAAA,IACF;AAAA,EACF;AACF;","names":[]}