import { QualifiedTablename, SqlValue, Statement } from '../../util/index.js';
import { QueryBuilder } from './builder.js';
import { ForeignKey } from '../triggers.js';
declare class SqliteBuilder extends QueryBuilder {
    readonly dialect = "SQLite";
    readonly AUTOINCREMENT_PK = "INTEGER PRIMARY KEY AUTOINCREMENT";
    readonly BLOB = "BLOB";
    readonly deferOrDisableFKsForTx = "PRAGMA defer_foreign_keys = ON;";
    readonly getVersion = "SELECT sqlite_version() AS version";
    readonly maxSqlParameters = 65535;
    readonly paramSign = "?";
    readonly defaultNamespace = "main";
    readonly metaTables: string[];
    pgOnly(_query: string): string;
    pgOnlyQuery(_query: string): never[];
    sqliteOnly(query: string): string;
    sqliteOnlyQuery(query: string): string[];
    tableExists(table: QualifiedTablename): Statement;
    countTablesIn(tableNames: string[]): Statement;
    toHex(column: string): string;
    hexValue(hexString: string): string;
    getTableInfo(table: QualifiedTablename): Statement;
    createIndex(indexName: string, onTable: QualifiedTablename, columns: string[]): string;
    getLocalTableNames(notIn?: string[]): Statement;
    insertOrIgnore(table: QualifiedTablename, columns: string[], values: SqlValue[]): Statement;
    insertOrReplace(table: QualifiedTablename, columns: string[], values: Array<SqlValue>, _conflictCols: string[], _updateCols: string[]): Statement;
    insertOrReplaceWith(table: QualifiedTablename, columns: string[], values: Array<SqlValue>, conflictCols: string[], updateCols: string[], updateVals: SqlValue[]): Statement;
    batchedInsertOrReplace(table: QualifiedTablename, columns: string[], records: Array<Record<string, SqlValue>>, _conflictCols: string[], _updateCols: string[], maxSqlParameters: number): Statement[];
    dropTriggerIfExists(triggerName: string, _tablename: QualifiedTablename): string;
    createNoFkUpdateTrigger(table: QualifiedTablename, pk: string[]): string[];
    createJsonObject(rows: string): string;
    removeSpaceAndNullValuesFromJson(json: string): string;
    createPKJsonObject(rows: string): string;
    setTriggerSetting(table: QualifiedTablename, value: 0 | 1): string;
    createOplogTrigger(opType: 'INSERT' | 'UPDATE' | 'DELETE', table: QualifiedTablename, newPKs: string, newRows: string, oldRows: string): string[];
    createFkCompensationTrigger(opType: 'INSERT' | 'UPDATE', table: QualifiedTablename, childKey: string, fkTable: QualifiedTablename, joinedFkPKs: string, foreignKey: ForeignKey): string[];
    setTagsForShadowRows(oplog: QualifiedTablename, shadow: QualifiedTablename): string;
    removeDeletedShadowRows(oplog: QualifiedTablename, shadow: QualifiedTablename): string;
    makePositionalParam(_i: number): string;
}
declare const _default: SqliteBuilder;
export default _default;
