{"version":3,"sources":["../../src/migrators/schema.ts"],"sourcesContent":["import { satelliteDefaults } from '../satellite/config'\nimport { QueryBuilder } from './query-builder'\n\nexport const buildInitialMigration = (builder: QueryBuilder) => {\n  const { metaTable, migrationsTable, oplogTable, triggersTable, shadowTable } =\n    satelliteDefaults(builder.defaultNamespace)\n  const data = {\n    migrations: [\n      {\n        statements: [\n          //`-- The ops log table\\n`,\n          `CREATE TABLE IF NOT EXISTS ${oplogTable} (\\n  \"rowid\" ${builder.AUTOINCREMENT_PK},\\n  \"namespace\" TEXT NOT NULL,\\n  \"tablename\" TEXT NOT NULL,\\n  \"optype\" TEXT NOT NULL,\\n  \"primaryKey\" TEXT NOT NULL,\\n  \"newRow\" TEXT,\\n  \"oldRow\" TEXT,\\n  \"timestamp\" TEXT,  \"clearTags\" TEXT DEFAULT '[]' NOT NULL\\n);`,\n          // Add an index for the oplog\n          builder.createIndex('_electric_table_pk_reference', oplogTable, [\n            'namespace',\n            'tablename',\n            'primaryKey',\n          ]),\n          builder.createIndex('_electric_timestamp', oplogTable, ['timestamp']),\n          //`-- Somewhere to keep our metadata\\n`,\n          `CREATE TABLE IF NOT EXISTS ${metaTable} (\\n  \"key\" TEXT PRIMARY KEY,\\n  \"value\" ${builder.BLOB}\\n);`,\n          //`-- Somewhere to track migrations\\n`,\n          `CREATE TABLE IF NOT EXISTS ${migrationsTable} (\\n  \"id\" ${builder.AUTOINCREMENT_PK},\\n  \"version\" TEXT NOT NULL UNIQUE,\\n  \"applied_at\" TEXT NOT NULL\\n);`,\n          //`-- Initialisation of the metadata table\\n`,\n          `INSERT INTO ${metaTable} (key, value) VALUES ('compensations', 1), ('lsn', ''), ('clientId', ''), ('subscriptions', ''), ('seenAdditionalData', '');`,\n          //`-- These are toggles for turning the triggers on and off\\n`,\n          `DROP TABLE IF EXISTS ${triggersTable};`,\n          `CREATE TABLE ${triggersTable} (\"namespace\" TEXT, \"tablename\" TEXT, \"flag\" INTEGER, PRIMARY KEY (\"namespace\", \"tablename\"));`,\n          //`-- Somewhere to keep dependency tracking information\\n`,\n          `CREATE TABLE ${shadowTable} (\\n ${builder.pgOnly(\n            '\"rowid\" SERIAL,'\n          )} \"namespace\" TEXT NOT NULL,\\n  \"tablename\" TEXT NOT NULL,\\n  \"primaryKey\" TEXT NOT NULL,\\n  \"tags\" TEXT NOT NULL,\\n  PRIMARY KEY (\"namespace\", \"tablename\", \"primaryKey\"));`,\n        ],\n        version: '0',\n      },\n    ],\n  }\n  return data\n}\n"],"mappings":"AAAA,SAAS,yBAAyB;AAG3B,MAAM,wBAAwB,CAAC,YAA0B;AAC9D,QAAM,EAAE,WAAW,iBAAiB,YAAY,eAAe,YAAY,IACzE,kBAAkB,QAAQ,gBAAgB;AAC5C,QAAM,OAAO;AAAA,IACX,YAAY;AAAA,MACV;AAAA,QACE,YAAY;AAAA;AAAA,UAEV,8BAA8B,UAAU;AAAA,YAAiB,QAAQ,gBAAgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAEjF,QAAQ,YAAY,gCAAgC,YAAY;AAAA,YAC9D;AAAA,YACA;AAAA,YACA;AAAA,UACF,CAAC;AAAA,UACD,QAAQ,YAAY,uBAAuB,YAAY,CAAC,WAAW,CAAC;AAAA;AAAA,UAEpE,8BAA8B,SAAS;AAAA;AAAA,YAA4C,QAAQ,IAAI;AAAA;AAAA;AAAA,UAE/F,8BAA8B,eAAe;AAAA,SAAc,QAAQ,gBAAgB;AAAA;AAAA;AAAA;AAAA;AAAA,UAEnF,eAAe,SAAS;AAAA;AAAA,UAExB,wBAAwB,aAAa;AAAA,UACrC,gBAAgB,aAAa;AAAA;AAAA,UAE7B,gBAAgB,WAAW;AAAA,GAAQ,QAAQ;AAAA,YACzC;AAAA,UACF,CAAC;AAAA;AAAA;AAAA;AAAA;AAAA,QACH;AAAA,QACA,SAAS;AAAA,MACX;AAAA,IACF;AAAA,EACF;AACA,SAAO;AACT;","names":[]}