{"version":3,"sources":["../../src/migrators/builder.ts"],"sourcesContent":["import * as z from 'zod'\nimport { SatOpMigrate } from '../_generated/protocol/satellite'\nimport { base64 } from '../util/encoders'\nimport { getProtocolVersion } from '../util'\nimport { Migration } from './index'\nimport { generateTriggersForTable } from '../satellite/process'\nimport { sqliteBuilder, pgBuilder, QueryBuilder } from './query-builder'\n\nexport { sqliteBuilder, pgBuilder, QueryBuilder }\n\nconst metaDataSchema = z\n  .object({\n    format: z.string(),\n    ops: z.string().array(),\n    protocol_version: z.string(),\n    version: z.string(),\n  })\n  .strict()\n\nconst format = 'SatOpMigrate'\ntype Format = typeof format\n\nconst protocolVersion = getProtocolVersion()\n\nexport interface MetaData {\n  format: Format\n  ops: SatOpMigrate[]\n  protocolVersion: typeof protocolVersion\n  version: string\n}\n\n/**\n * Parses the metadata JSON object that accompanies a migration.\n * The main purpose of this function is to\n * decode the array of base64-encoded operations.\n */\nexport function parseMetadata(data: object): MetaData {\n  try {\n    const parsed = metaDataSchema.parse(data)\n    if (parsed.format !== format)\n      throw new Error('Unsupported migration format: ' + parsed.format)\n\n    if (parsed.protocol_version !== protocolVersion)\n      throw new Error(\n        'Protocol version mismatch for migration. Expected: ' +\n          protocolVersion +\n          '. Got: ' +\n          parsed.protocol_version\n      )\n\n    // Now decode the `SatOpMigrate` operations inside the `ops` array\n    const decoded: MetaData = {\n      format: parsed.format as Format,\n      ops: parsed.ops.map(decode),\n      protocolVersion: parsed.protocol_version as typeof protocolVersion,\n      version: parsed.version,\n    }\n\n    return decoded\n  } catch (e: unknown) {\n    if (e instanceof z.ZodError) {\n      throw new Error('Failed to parse migration data, due to:\\n' + e.message)\n    } else {\n      throw e\n    }\n  }\n}\n\n/**\n * Takes a migration's meta data and returns a migration.\n * The returned migration contains all DDL statements\n * as well as the necessary triggers.\n * @param migration The migration's meta data.\n * @returns The corresponding migration.\n */\nexport function makeMigration(\n  migration: MetaData,\n  builder: QueryBuilder\n): Migration {\n  const statements = migration.ops\n    .map((op) => op.stmts.map((stmt) => stmt.sql))\n    .flat()\n  const tables = migration.ops\n    // if the operation did not change any table\n    // then ignore it as we don't have to build triggers for it\n    .filter((op) => op.table !== undefined)\n    .map((op) => op.table!)\n    // remove duplicate tables\n    .filter((tbl, idx, arr) => {\n      return arr.findIndex((t) => t?.name === tbl?.name) === idx\n    })\n\n  const triggers = tables\n    .map((tbl) => generateTriggersForTable(tbl, builder))\n    .flat()\n    .map((stmt) => stmt.sql)\n\n  return {\n    statements: [...statements, ...triggers],\n    version: migration.version,\n  }\n}\n\n/**\n * Decodes a base64-encoded `SatOpMigrate` message.\n * @param data String containing the base64-encoded `SatOpMigrate` message.\n */\nfunction decode(data: string): SatOpMigrate {\n  const bytes = base64.toBytes(data)\n  const dataOrError = SatOpMigrate.decode(bytes)\n  if (dataOrError instanceof Error) throw dataOrError\n  return dataOrError\n}\n"],"mappings":"AAAA,YAAY,OAAO;AACnB,SAAS,oBAAoB;AAC7B,SAAS,cAAc;AACvB,SAAS,0BAA0B;AAEnC,SAAS,gCAAgC;AACzC,SAAS,eAAe,WAAW,oBAAoB;AAIvD,MAAM,iBAAiB,EACpB,OAAO;AAAA,EACN,QAAQ,EAAE,OAAO;AAAA,EACjB,KAAK,EAAE,OAAO,EAAE,MAAM;AAAA,EACtB,kBAAkB,EAAE,OAAO;AAAA,EAC3B,SAAS,EAAE,OAAO;AACpB,CAAC,EACA,OAAO;AAEV,MAAM,SAAS;AAGf,MAAM,kBAAkB,mBAAmB;AAcpC,SAAS,cAAc,MAAwB;AACpD,MAAI;AACF,UAAM,SAAS,eAAe,MAAM,IAAI;AACxC,QAAI,OAAO,WAAW;AACpB,YAAM,IAAI,MAAM,mCAAmC,OAAO,MAAM;AAElE,QAAI,OAAO,qBAAqB;AAC9B,YAAM,IAAI;AAAA,QACR,wDACE,kBACA,YACA,OAAO;AAAA,MACX;AAGF,UAAM,UAAoB;AAAA,MACxB,QAAQ,OAAO;AAAA,MACf,KAAK,OAAO,IAAI,IAAI,MAAM;AAAA,MAC1B,iBAAiB,OAAO;AAAA,MACxB,SAAS,OAAO;AAAA,IAClB;AAEA,WAAO;AAAA,EACT,SAAS,GAAY;AACnB,QAAI,aAAa,EAAE,UAAU;AAC3B,YAAM,IAAI,MAAM,8CAA8C,EAAE,OAAO;AAAA,IACzE,OAAO;AACL,YAAM;AAAA,IACR;AAAA,EACF;AACF;AASO,SAAS,cACd,WACA,SACW;AACX,QAAM,aAAa,UAAU,IAC1B,IAAI,CAAC,OAAO,GAAG,MAAM,IAAI,CAAC,SAAS,KAAK,GAAG,CAAC,EAC5C,KAAK;AACR,QAAM,SAAS,UAAU,IAGtB,OAAO,CAAC,OAAO,GAAG,UAAU,MAAS,EACrC,IAAI,CAAC,OAAO,GAAG,KAAM,EAErB,OAAO,CAAC,KAAK,KAAK,QAAQ;AACzB,WAAO,IAAI,UAAU,CAAC,MAAM,GAAG,SAAS,KAAK,IAAI,MAAM;AAAA,EACzD,CAAC;AAEH,QAAM,WAAW,OACd,IAAI,CAAC,QAAQ,yBAAyB,KAAK,OAAO,CAAC,EACnD,KAAK,EACL,IAAI,CAAC,SAAS,KAAK,GAAG;AAEzB,SAAO;AAAA,IACL,YAAY,CAAC,GAAG,YAAY,GAAG,QAAQ;AAAA,IACvC,SAAS,UAAU;AAAA,EACrB;AACF;AAMA,SAAS,OAAO,MAA4B;AAC1C,QAAM,QAAQ,OAAO,QAAQ,IAAI;AACjC,QAAM,cAAc,aAAa,OAAO,KAAK;AAC7C,MAAI,uBAAuB;AAAO,UAAM;AACxC,SAAO;AACT;","names":[]}