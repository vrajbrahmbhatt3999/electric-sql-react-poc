export declare const base64: {
    readonly fromBytes: (bytes: Uint8Array) => string;
    readonly toBytes: (string: string) => Uint8Array;
    readonly encode: (string: string) => string;
    readonly decode: (string: string) => string;
};
export declare const textEncoder: {
    readonly encode: (string: string) => Uint8Array;
};
export declare const textDecoder: {
    readonly decode: (bytes: Uint8Array) => string;
};
export declare const trueByte: number;
export declare const falseByte: number;
export declare function numberToBytes(i: number): Uint8Array;
export declare function bytesToNumber(bytes: Uint8Array): number;
export declare function bytesToString(bytes: Uint8Array): string;
/**
 * Converts a PG string of type `timetz` to its equivalent SQLite string.
 * e.g. '18:28:35.42108+00' -> '18:28:35.42108'
 * @param bytes Data for this `timetz` column.
 * @returns The SQLite string.
 */
export declare function bytesToTimetzString(bytes: Uint8Array): string;
/**
 * Converts an arbitrary blob (or bytestring) into a hex encoded string, which
 * is also the `bytea` PG string.
 * @param bytes - the blob to encode
 * @returns the blob as a hex encoded string
 */
export declare function blobToHexString(bytes: Uint8Array): string;
/**
 * Converts a hex encoded string into a `Uint8Array` blob.
 * @param bytes - the blob to encode
 * @returns the blob as a hex encoded string
 */
export declare function hexStringToBlob(hexString: string): Uint8Array;
/**
 * Converts a SQLite string representing a `timetz` value to a PG string.
 * e.g. '18:28:35.42108' -> '18:28:35.42108+00'
 * @param str The SQLite string representing a `timetz` value.
 * @returns The PG string.
 */
export declare function stringToTimetzString(str: string): string;
