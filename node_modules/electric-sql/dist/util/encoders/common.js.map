{"version":3,"sources":["../../../src/util/encoders/common.ts"],"sourcesContent":["import BASE64 from 'base-64'\nimport { TextEncoderLite, TextDecoderLite } from 'text-encoder-lite'\n\nexport const base64 = {\n  fromBytes: (bytes: Uint8Array) =>\n    BASE64.encode(\n      String.fromCharCode.apply(null, new Uint8Array(bytes) as any)\n    ),\n  toBytes: (string: string) =>\n    Uint8Array.from(BASE64.decode(string), (c) => c.charCodeAt(0)),\n  encode: (string: string) => base64.fromBytes(textEncoder.encode(string)),\n  decode: (string: string) => textDecoder.decode(base64.toBytes(string)),\n} as const\n\n// Initialize TextEncoder and TextDecoder late to prevent polyfill\n// race conditions, and reuse instance for performance\nlet textEncoderInstance: (TextEncoder | TextEncoderLite) | null = null\nlet textDecoderInstance: (TextDecoder | TextDecoderLite) | null = null\n\nexport const textEncoder = {\n  encode: (string: string): Uint8Array => {\n    textEncoderInstance ??= globalThis.TextEncoder\n      ? new TextEncoder()\n      : new TextEncoderLite()\n    return textEncoderInstance.encode(string)\n  },\n} as const\n\nexport const textDecoder = {\n  decode: (bytes: Uint8Array): string => {\n    textDecoderInstance ??= globalThis.TextDecoder\n      ? new TextDecoder()\n      : new TextDecoderLite()\n    return textDecoderInstance.decode(bytes)\n  },\n} as const\n\nexport const trueByte = 't'.charCodeAt(0)\nexport const falseByte = 'f'.charCodeAt(0)\n\nexport function numberToBytes(i: number) {\n  return Uint8Array.of(\n    (i & 0xff000000) >> 24,\n    (i & 0x00ff0000) >> 16,\n    (i & 0x0000ff00) >> 8,\n    (i & 0x000000ff) >> 0\n  )\n}\n\nexport function bytesToNumber(bytes: Uint8Array) {\n  let n = 0\n  for (const byte of bytes.values()) {\n    n = (n << 8) | byte\n  }\n  return n\n}\n\nexport function bytesToString(bytes: Uint8Array) {\n  return textDecoder.decode(bytes)\n}\n\n/**\n * Converts a PG string of type `timetz` to its equivalent SQLite string.\n * e.g. '18:28:35.42108+00' -> '18:28:35.42108'\n * @param bytes Data for this `timetz` column.\n * @returns The SQLite string.\n */\nexport function bytesToTimetzString(bytes: Uint8Array) {\n  const str = bytesToString(bytes)\n  return str.replace('+00', '')\n}\n\n/**\n * Converts an arbitrary blob (or bytestring) into a hex encoded string, which\n * is also the `bytea` PG string.\n * @param bytes - the blob to encode\n * @returns the blob as a hex encoded string\n */\nexport function blobToHexString(bytes: Uint8Array) {\n  let hexString = ''\n  for (const byte of bytes.values()) {\n    hexString += byte.toString(16).padStart(2, '0')\n  }\n  return hexString\n}\n\n/**\n * Converts a hex encoded string into a `Uint8Array` blob.\n * @param bytes - the blob to encode\n * @returns the blob as a hex encoded string\n */\nexport function hexStringToBlob(hexString: string) {\n  const byteArray = new Uint8Array(hexString.length / 2)\n  for (let i = 0; i < hexString.length; i += 2) {\n    const byte = parseInt(hexString.substring(i, i + 2), 16)\n    byteArray[i / 2] = byte\n  }\n  return byteArray\n}\n\n/**\n * Converts a SQLite string representing a `timetz` value to a PG string.\n * e.g. '18:28:35.42108' -> '18:28:35.42108+00'\n * @param str The SQLite string representing a `timetz` value.\n * @returns The PG string.\n */\nexport function stringToTimetzString(str: string) {\n  return `${str}+00`\n}\n"],"mappings":"AAAA,OAAO,YAAY;AACnB,SAAS,iBAAiB,uBAAuB;AAE1C,MAAM,SAAS;AAAA,EACpB,WAAW,CAAC,UACV,OAAO;AAAA,IACL,OAAO,aAAa,MAAM,MAAM,IAAI,WAAW,KAAK,CAAQ;AAAA,EAC9D;AAAA,EACF,SAAS,CAAC,WACR,WAAW,KAAK,OAAO,OAAO,MAAM,GAAG,CAAC,MAAM,EAAE,WAAW,CAAC,CAAC;AAAA,EAC/D,QAAQ,CAAC,WAAmB,OAAO,UAAU,YAAY,OAAO,MAAM,CAAC;AAAA,EACvE,QAAQ,CAAC,WAAmB,YAAY,OAAO,OAAO,QAAQ,MAAM,CAAC;AACvE;AAIA,IAAI,sBAA8D;AAClE,IAAI,sBAA8D;AAE3D,MAAM,cAAc;AAAA,EACzB,QAAQ,CAAC,WAA+B;AACtC,4BAAwB,WAAW,cAC/B,IAAI,YAAY,IAChB,IAAI,gBAAgB;AACxB,WAAO,oBAAoB,OAAO,MAAM;AAAA,EAC1C;AACF;AAEO,MAAM,cAAc;AAAA,EACzB,QAAQ,CAAC,UAA8B;AACrC,4BAAwB,WAAW,cAC/B,IAAI,YAAY,IAChB,IAAI,gBAAgB;AACxB,WAAO,oBAAoB,OAAO,KAAK;AAAA,EACzC;AACF;AAEO,MAAM,WAAW,IAAI,WAAW,CAAC;AACjC,MAAM,YAAY,IAAI,WAAW,CAAC;AAElC,SAAS,cAAc,GAAW;AACvC,SAAO,WAAW;AAAA,KACf,IAAI,eAAe;AAAA,KACnB,IAAI,aAAe;AAAA,KACnB,IAAI,UAAe;AAAA,KACnB,IAAI,QAAe;AAAA,EACtB;AACF;AAEO,SAAS,cAAc,OAAmB;AAC/C,MAAI,IAAI;AACR,aAAW,QAAQ,MAAM,OAAO,GAAG;AACjC,QAAK,KAAK,IAAK;AAAA,EACjB;AACA,SAAO;AACT;AAEO,SAAS,cAAc,OAAmB;AAC/C,SAAO,YAAY,OAAO,KAAK;AACjC;AAQO,SAAS,oBAAoB,OAAmB;AACrD,QAAM,MAAM,cAAc,KAAK;AAC/B,SAAO,IAAI,QAAQ,OAAO,EAAE;AAC9B;AAQO,SAAS,gBAAgB,OAAmB;AACjD,MAAI,YAAY;AAChB,aAAW,QAAQ,MAAM,OAAO,GAAG;AACjC,iBAAa,KAAK,SAAS,EAAE,EAAE,SAAS,GAAG,GAAG;AAAA,EAChD;AACA,SAAO;AACT;AAOO,SAAS,gBAAgB,WAAmB;AACjD,QAAM,YAAY,IAAI,WAAW,UAAU,SAAS,CAAC;AACrD,WAAS,IAAI,GAAG,IAAI,UAAU,QAAQ,KAAK,GAAG;AAC5C,UAAM,OAAO,SAAS,UAAU,UAAU,GAAG,IAAI,CAAC,GAAG,EAAE;AACvD,cAAU,IAAI,CAAC,IAAI;AAAA,EACrB;AACA,SAAO;AACT;AAQO,SAAS,qBAAqB,KAAa;AAChD,SAAO,GAAG,GAAG;AACf;","names":[]}