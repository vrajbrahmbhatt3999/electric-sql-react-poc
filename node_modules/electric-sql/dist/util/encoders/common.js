import BASE64 from "base-64";
import { TextEncoderLite, TextDecoderLite } from "text-encoder-lite";
const base64 = {
  fromBytes: (bytes) => BASE64.encode(
    String.fromCharCode.apply(null, new Uint8Array(bytes))
  ),
  toBytes: (string) => Uint8Array.from(BASE64.decode(string), (c) => c.charCodeAt(0)),
  encode: (string) => base64.fromBytes(textEncoder.encode(string)),
  decode: (string) => textDecoder.decode(base64.toBytes(string))
};
let textEncoderInstance = null;
let textDecoderInstance = null;
const textEncoder = {
  encode: (string) => {
    textEncoderInstance ??= globalThis.TextEncoder ? new TextEncoder() : new TextEncoderLite();
    return textEncoderInstance.encode(string);
  }
};
const textDecoder = {
  decode: (bytes) => {
    textDecoderInstance ??= globalThis.TextDecoder ? new TextDecoder() : new TextDecoderLite();
    return textDecoderInstance.decode(bytes);
  }
};
const trueByte = "t".charCodeAt(0);
const falseByte = "f".charCodeAt(0);
function numberToBytes(i) {
  return Uint8Array.of(
    (i & 4278190080) >> 24,
    (i & 16711680) >> 16,
    (i & 65280) >> 8,
    (i & 255) >> 0
  );
}
function bytesToNumber(bytes) {
  let n = 0;
  for (const byte of bytes.values()) {
    n = n << 8 | byte;
  }
  return n;
}
function bytesToString(bytes) {
  return textDecoder.decode(bytes);
}
function bytesToTimetzString(bytes) {
  const str = bytesToString(bytes);
  return str.replace("+00", "");
}
function blobToHexString(bytes) {
  let hexString = "";
  for (const byte of bytes.values()) {
    hexString += byte.toString(16).padStart(2, "0");
  }
  return hexString;
}
function hexStringToBlob(hexString) {
  const byteArray = new Uint8Array(hexString.length / 2);
  for (let i = 0; i < hexString.length; i += 2) {
    const byte = parseInt(hexString.substring(i, i + 2), 16);
    byteArray[i / 2] = byte;
  }
  return byteArray;
}
function stringToTimetzString(str) {
  return `${str}+00`;
}
export {
  base64,
  blobToHexString,
  bytesToNumber,
  bytesToString,
  bytesToTimetzString,
  falseByte,
  hexStringToBlob,
  numberToBytes,
  stringToTimetzString,
  textDecoder,
  textEncoder,
  trueByte
};
//# sourceMappingURL=common.js.map