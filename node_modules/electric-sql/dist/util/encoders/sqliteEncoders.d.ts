import { bytesToString, bytesToTimetzString } from './common.js';
export declare const sqliteTypeEncoder: {
    bool: typeof boolToBytes;
    text: (string: string) => Uint8Array;
    json: (string: string) => Uint8Array;
    timetz: (string: string) => Uint8Array;
    bytea: (bytes: Uint8Array) => Uint8Array;
};
export declare const sqliteTypeDecoder: {
    bool: typeof bytesToBool;
    text: typeof bytesToString;
    json: typeof bytesToString;
    timetz: typeof bytesToTimetzString;
    float: typeof bytesToFloat;
    bytea: (bytes: Uint8Array) => Uint8Array;
};
export declare function boolToBytes(b: number): Uint8Array;
export declare function bytesToBool(bs: Uint8Array): number;
/**
 * Converts a PG string of type `float4` or `float8` to an equivalent SQLite number.
 * Since SQLite does not recognise `NaN` we turn it into the string `'NaN'` instead.
 * cf. https://github.com/WiseLibs/better-sqlite3/issues/1088
 * @param bytes Data for this `float4` or `float8` column.
 * @returns The SQLite value.
 */
declare function bytesToFloat(bytes: Uint8Array): number | "NaN";
export {};
