{"version":3,"sources":["../../../src/util/encoders/sqliteEncoders.ts"],"sourcesContent":["import {\n  trueByte,\n  falseByte,\n  textEncoder,\n  stringToTimetzString,\n  bytesToString,\n  bytesToTimetzString,\n} from './common'\n\nexport const sqliteTypeEncoder = {\n  bool: boolToBytes,\n  text: (string: string) => textEncoder.encode(string),\n  json: (string: string) => textEncoder.encode(string),\n  timetz: (string: string) =>\n    sqliteTypeEncoder.text(stringToTimetzString(string)),\n  bytea: (bytes: Uint8Array) => bytes,\n}\n\nexport const sqliteTypeDecoder = {\n  bool: bytesToBool,\n  text: bytesToString,\n  json: bytesToString,\n  timetz: bytesToTimetzString,\n  float: bytesToFloat,\n  // ensure it is in Uint8Array format and not Buffer etc\n  bytea: (bytes: Uint8Array) => new Uint8Array(bytes),\n}\n\nexport function boolToBytes(b: number) {\n  if (b !== 0 && b !== 1) {\n    throw new Error(`Invalid boolean value: ${b}`)\n  }\n  return new Uint8Array([b === 1 ? trueByte : falseByte])\n}\n\nexport function bytesToBool(bs: Uint8Array): number {\n  if (bs.length === 1 && (bs[0] === trueByte || bs[0] === falseByte)) {\n    return bs[0] === trueByte ? 1 : 0\n  }\n\n  throw new Error(`Invalid binary-encoded boolean value: ${bs}`)\n}\n\n/**\n * Converts a PG string of type `float4` or `float8` to an equivalent SQLite number.\n * Since SQLite does not recognise `NaN` we turn it into the string `'NaN'` instead.\n * cf. https://github.com/WiseLibs/better-sqlite3/issues/1088\n * @param bytes Data for this `float4` or `float8` column.\n * @returns The SQLite value.\n */\nfunction bytesToFloat(bytes: Uint8Array) {\n  const text = sqliteTypeDecoder.text(bytes)\n  if (text === 'NaN') {\n    return 'NaN'\n  } else {\n    return Number(text)\n  }\n}\n"],"mappings":"AAAA;AAAA,EACE;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,OACK;AAEA,MAAM,oBAAoB;AAAA,EAC/B,MAAM;AAAA,EACN,MAAM,CAAC,WAAmB,YAAY,OAAO,MAAM;AAAA,EACnD,MAAM,CAAC,WAAmB,YAAY,OAAO,MAAM;AAAA,EACnD,QAAQ,CAAC,WACP,kBAAkB,KAAK,qBAAqB,MAAM,CAAC;AAAA,EACrD,OAAO,CAAC,UAAsB;AAChC;AAEO,MAAM,oBAAoB;AAAA,EAC/B,MAAM;AAAA,EACN,MAAM;AAAA,EACN,MAAM;AAAA,EACN,QAAQ;AAAA,EACR,OAAO;AAAA;AAAA,EAEP,OAAO,CAAC,UAAsB,IAAI,WAAW,KAAK;AACpD;AAEO,SAAS,YAAY,GAAW;AACrC,MAAI,MAAM,KAAK,MAAM,GAAG;AACtB,UAAM,IAAI,MAAM,0BAA0B,CAAC,EAAE;AAAA,EAC/C;AACA,SAAO,IAAI,WAAW,CAAC,MAAM,IAAI,WAAW,SAAS,CAAC;AACxD;AAEO,SAAS,YAAY,IAAwB;AAClD,MAAI,GAAG,WAAW,MAAM,GAAG,CAAC,MAAM,YAAY,GAAG,CAAC,MAAM,YAAY;AAClE,WAAO,GAAG,CAAC,MAAM,WAAW,IAAI;AAAA,EAClC;AAEA,QAAM,IAAI,MAAM,yCAAyC,EAAE,EAAE;AAC/D;AASA,SAAS,aAAa,OAAmB;AACvC,QAAM,OAAO,kBAAkB,KAAK,KAAK;AACzC,MAAI,SAAS,OAAO;AAClB,WAAO;AAAA,EACT,OAAO;AACL,WAAO,OAAO,IAAI;AAAA,EACpB;AACF;","names":[]}