import { sqliteTypeEncoder, sqliteTypeDecoder } from './sqliteEncoders.js';
import { textEncoder } from './common.js';
import { trueByte, falseByte } from './common.js';
const pgTypeEncoder = {
  ...sqliteTypeEncoder,
  bool: boolToBytes,
  json: (x) => {
    return textEncoder.encode(JSON.stringify(x));
  }
};
const pgTypeDecoder = {
  ...sqliteTypeDecoder,
  bool: bytesToBool
};
function boolToBytes(b) {
  if (typeof b !== "boolean") {
    throw new Error(`Invalid boolean value: ${b}`);
  }
  return new Uint8Array([b ? trueByte : falseByte]);
}
function bytesToBool(bs) {
  if (bs.length === 1 && (bs[0] === trueByte || bs[0] === falseByte)) {
    return bs[0] === trueByte;
  }
  throw new Error(`Invalid binary-encoded boolean value: ${bs}`);
}
export {
  pgTypeDecoder,
  pgTypeEncoder
};
//# sourceMappingURL=pgEncoders.js.map