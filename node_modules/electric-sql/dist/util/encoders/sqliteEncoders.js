import {
  trueByte,
  falseByte,
  textEncoder,
  stringToTimetzString,
  bytesToString,
  bytesToTimetzString
} from './common.js';
const sqliteTypeEncoder = {
  bool: boolToBytes,
  text: (string) => textEncoder.encode(string),
  json: (string) => textEncoder.encode(string),
  timetz: (string) => sqliteTypeEncoder.text(stringToTimetzString(string)),
  bytea: (bytes) => bytes
};
const sqliteTypeDecoder = {
  bool: bytesToBool,
  text: bytesToString,
  json: bytesToString,
  timetz: bytesToTimetzString,
  float: bytesToFloat,
  // ensure it is in Uint8Array format and not Buffer etc
  bytea: (bytes) => new Uint8Array(bytes)
};
function boolToBytes(b) {
  if (b !== 0 && b !== 1) {
    throw new Error(`Invalid boolean value: ${b}`);
  }
  return new Uint8Array([b === 1 ? trueByte : falseByte]);
}
function bytesToBool(bs) {
  if (bs.length === 1 && (bs[0] === trueByte || bs[0] === falseByte)) {
    return bs[0] === trueByte ? 1 : 0;
  }
  throw new Error(`Invalid binary-encoded boolean value: ${bs}`);
}
function bytesToFloat(bytes) {
  const text = sqliteTypeDecoder.text(bytes);
  if (text === "NaN") {
    return "NaN";
  } else {
    return Number(text);
  }
}
export {
  boolToBytes,
  bytesToBool,
  sqliteTypeDecoder,
  sqliteTypeEncoder
};
//# sourceMappingURL=sqliteEncoders.js.map