{"version":3,"sources":["../../src/util/tablename.ts"],"sourcesContent":["import { DbNamespace, Tablename } from './types'\n\nexport class QualifiedTablename {\n  namespace: DbNamespace\n  tablename: Tablename\n\n  constructor(namespace: DbNamespace, tablename: Tablename) {\n    this.namespace = namespace\n    this.tablename = tablename\n  }\n\n  isEqual({ namespace, tablename }: QualifiedTablename): boolean {\n    return namespace === this.namespace && tablename === this.tablename\n  }\n\n  toString(): string {\n    // Escapes double quotes because names can contain double quotes\n    // e.g. CREATE TABLE \"f\"\"oo\" (...) creates a table named f\"oo\n    return `\"${escDoubleQ(this.namespace)}\".\"${escDoubleQ(this.tablename)}\"`\n  }\n\n  static parse(fullyQualifiedName: string): QualifiedTablename {\n    try {\n      // allow only paired double quotes within the quotes\n      // identifiers can't be empty\n      const [_, namespace, tablename] =\n        /^\"((?:[^\"]|\"\")+)\"\\.\"((?:[^\"]|\"\")+)\"$/.exec(fullyQualifiedName)!\n      return new QualifiedTablename(\n        unescDoubleQ(namespace),\n        unescDoubleQ(tablename)\n      )\n    } catch (_e) {\n      throw new Error(\n        'Could not parse string into a qualified table name: ' +\n          fullyQualifiedName\n      )\n    }\n  }\n}\n\nexport const hasIntersection = (\n  tablenames: QualifiedTablename[],\n  candidates: QualifiedTablename[]\n): boolean => {\n  const tLen = tablenames.length\n  const cLen = candidates.length\n\n  for (let i = 0; i < tLen; ++i) {\n    const tablename = tablenames[i]\n\n    for (let j = 0; j < cLen; ++j) {\n      const candidate = candidates[j]\n\n      if (tablename.isEqual(candidate)) {\n        return true\n      }\n    }\n  }\n\n  return false\n}\n\nexport function escDoubleQ(str: string): string {\n  return str.replaceAll('\"', '\"\"')\n}\n\nfunction unescDoubleQ(str: string): string {\n  return str.replaceAll('\"\"', '\"')\n}\n"],"mappings":"AAEO,MAAM,mBAAmB;AAAA,EAC9B;AAAA,EACA;AAAA,EAEA,YAAY,WAAwB,WAAsB;AACxD,SAAK,YAAY;AACjB,SAAK,YAAY;AAAA,EACnB;AAAA,EAEA,QAAQ,EAAE,WAAW,UAAU,GAAgC;AAC7D,WAAO,cAAc,KAAK,aAAa,cAAc,KAAK;AAAA,EAC5D;AAAA,EAEA,WAAmB;AAGjB,WAAO,IAAI,WAAW,KAAK,SAAS,CAAC,MAAM,WAAW,KAAK,SAAS,CAAC;AAAA,EACvE;AAAA,EAEA,OAAO,MAAM,oBAAgD;AAC3D,QAAI;AAGF,YAAM,CAAC,GAAG,WAAW,SAAS,IAC5B,uCAAuC,KAAK,kBAAkB;AAChE,aAAO,IAAI;AAAA,QACT,aAAa,SAAS;AAAA,QACtB,aAAa,SAAS;AAAA,MACxB;AAAA,IACF,SAAS,IAAI;AACX,YAAM,IAAI;AAAA,QACR,yDACE;AAAA,MACJ;AAAA,IACF;AAAA,EACF;AACF;AAEO,MAAM,kBAAkB,CAC7B,YACA,eACY;AACZ,QAAM,OAAO,WAAW;AACxB,QAAM,OAAO,WAAW;AAExB,WAAS,IAAI,GAAG,IAAI,MAAM,EAAE,GAAG;AAC7B,UAAM,YAAY,WAAW,CAAC;AAE9B,aAAS,IAAI,GAAG,IAAI,MAAM,EAAE,GAAG;AAC7B,YAAM,YAAY,WAAW,CAAC;AAE9B,UAAI,UAAU,QAAQ,SAAS,GAAG;AAChC,eAAO;AAAA,MACT;AAAA,IACF;AAAA,EACF;AAEA,SAAO;AACT;AAEO,SAAS,WAAW,KAAqB;AAC9C,SAAO,IAAI,WAAW,KAAK,IAAI;AACjC;AAEA,SAAS,aAAa,KAAqB;AACzC,SAAO,IAAI,WAAW,MAAM,GAAG;AACjC;","names":[]}