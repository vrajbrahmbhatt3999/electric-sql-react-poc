import { hasIntersection } from './index.js';
function createQueryResultSubscribeFunction(notifier, liveQuery, relevantTablenames) {
  return (handler) => {
    let cancelled = false;
    const update = async () => {
      try {
        const res = await liveQuery();
        if (cancelled)
          return;
        relevantTablenames ??= res.tablenames;
        handler({ results: res.result, updatedAt: /* @__PURE__ */ new Date() });
      } catch (err) {
        if (cancelled)
          return;
        handler({ error: err, updatedAt: /* @__PURE__ */ new Date() });
      }
    };
    update();
    const unsubscribe = notifier.subscribeToDataChanges((notification) => {
      const changedTablenames = notifier.alias(notification);
      if (relevantTablenames && hasIntersection(relevantTablenames, changedTablenames))
        update();
    });
    return () => {
      cancelled = true;
      unsubscribe();
    };
  };
}
function createConnectivityStateSubscribeFunction(notifier) {
  return (handler) => {
    let cancelled = false;
    const update = ({
      connectivityState
    }) => {
      if (cancelled)
        return;
      handler(connectivityState);
    };
    const unsubscribe = notifier.subscribeToConnectivityStateChanges(update);
    return () => {
      cancelled = true;
      unsubscribe();
    };
  };
}
export {
  createConnectivityStateSubscribeFunction,
  createQueryResultSubscribeFunction
};
//# sourceMappingURL=subscribe.js.map