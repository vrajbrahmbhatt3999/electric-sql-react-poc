import { QualifiedTablename } from './tablename.js';
const dangerousKeywords = [
  "add",
  "alter",
  "commit",
  "create",
  "delete",
  "drop",
  "exec",
  "insert",
  "select into",
  "set",
  "truncate",
  "update"
];
const dangerousKeywordsExp = new RegExp(
  dangerousKeywords.map((keyword) => `\\b${keyword}\\b`).join("|"),
  "imu"
);
const isPotentiallyDangerous = (stmt) => {
  return dangerousKeywordsExp.test(stmt);
};
const parseTableNames = (sqlQuery, defaultNamespace = "main") => {
  const tableNameExp = /(?:FROM|JOIN)\s+([a-zA-Z_][a-zA-Z0-9_$.]*)/gi;
  const tableMatches = [];
  let match;
  while ((match = tableNameExp.exec(sqlQuery)) !== null) {
    tableMatches.push(match[1]);
  }
  const results = [];
  Array.from(tableMatches).map((tn) => _ensureQualified(tn, defaultNamespace)).sort().forEach((value) => {
    const [namespace, tablename] = value.split(".");
    results.push(new QualifiedTablename(namespace, tablename));
  });
  return results;
};
const _ensureQualified = (candidate, defaultNamespace = "main") => {
  if (candidate.includes(".")) {
    return candidate;
  }
  return `${defaultNamespace}.${candidate}`;
};
export {
  isPotentiallyDangerous,
  parseTableNames
};
//# sourceMappingURL=parser.js.map