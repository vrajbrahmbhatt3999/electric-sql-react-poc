{"version":3,"sources":["../../src/util/interpolate.ts"],"sourcesContent":["/**\n * Replace all `?` parameter placeholders in SQL with provided args.\n */\nexport function interpolateSqlArgs({\n  sql,\n  args,\n}: {\n  sql: string\n  args?: string[]\n}): string {\n  if (args === undefined) return sql\n\n  let matchPos = 0\n  const argsLength = args.length\n  /* We're looking for any `?` in the provided sql statement that aren't preceded by a word character\n     This is how `builder.ts#makeFilter` builds SQL statements, but we need to interpolate them before\n     sending to the server. SQL here shouldn't contain any user strings, only placeholders, so it's safe.\n      \n     This could be achieved with a negative lookbehind, i.e. /(?<!\\w)\\?/g, but it has limited support\n     across browsers so an alternative, less elegant approach is used where we include preceding\n     characters in the match.\n     See https://caniuse.com/js-regexp-lookbehind\n  */\n  return sql.replaceAll(/(?:^|[^\\w])\\?/g, (match) => {\n    const toReplace = matchPos < argsLength ? args[matchPos++] : '?'\n\n    // include preceding character if matched\n    return match.length > 1 ? match[0] + toReplace : toReplace\n  })\n}\n"],"mappings":"AAGO,SAAS,mBAAmB;AAAA,EACjC;AAAA,EACA;AACF,GAGW;AACT,MAAI,SAAS;AAAW,WAAO;AAE/B,MAAI,WAAW;AACf,QAAM,aAAa,KAAK;AAUxB,SAAO,IAAI,WAAW,kBAAkB,CAAC,UAAU;AACjD,UAAM,YAAY,WAAW,aAAa,KAAK,UAAU,IAAI;AAG7D,WAAO,MAAM,SAAS,IAAI,MAAM,CAAC,IAAI,YAAY;AAAA,EACnD,CAAC;AACH;","names":[]}