{"version":3,"sources":["../../src/util/transactions.ts"],"sourcesContent":["import { Statement } from '.'\nimport { ForeignKeyChecks } from '../config'\nimport { DatabaseAdapter, RunResult } from '../electric'\n\n/**\n * Runs the provided statements in a transaction and sets the `foreign_keys` pragma based on the `fkChecks` flag.\n * FK checks are enabled if `fkChecks` is `ForeignKeyChecks.enabled`.\n * FK checks are disabled if `fkChecks` is `ForeignKeyChecks.disabled`.\n * FK checks are left untouched if `fkChecks` is `ForeignKeyChecks.inherit`.\n * `fkChecks` should only be set to `ForeignKeyChecks.disabled` when using SQLite as we already disable FK checks for incoming TXs when using Postgres,\n * so the executed SQL code to disable FKs is for SQLite dialect only.\n */\nexport async function runInTransaction(\n  adapter: DatabaseAdapter,\n  fkChecks: ForeignKeyChecks,\n  ...stmts: Statement[]\n): Promise<RunResult> {\n  if (fkChecks === ForeignKeyChecks.inherit) {\n    // don't touch the FK pragma\n    return adapter.runInTransaction(...stmts)\n  }\n\n  const desiredPragma = fkChecks === ForeignKeyChecks.disabled ? 0 : 1\n\n  return adapter.runExclusively(async (uncoordinatedAdapter) => {\n    const [{ foreign_keys: originalPragma }] = await uncoordinatedAdapter.query(\n      {\n        sql: 'PRAGMA foreign_keys;',\n      }\n    )\n\n    if (originalPragma !== desiredPragma) {\n      // set the pragma to the desired value\n      await uncoordinatedAdapter.run({\n        sql: `PRAGMA foreign_keys = ${desiredPragma};`,\n      })\n    }\n\n    try {\n      // apply the statements in a TX\n      const res = await uncoordinatedAdapter.runInTransaction(...stmts)\n      return res\n    } finally {\n      // Need to restore the pragma also if TX throwed\n      if (originalPragma !== desiredPragma) {\n        // restore the pragma to its original value\n        await uncoordinatedAdapter.run({\n          sql: `PRAGMA foreign_keys = ${originalPragma};`,\n        })\n      }\n    }\n  })\n}\n"],"mappings":"AACA,SAAS,wBAAwB;AAWjC,eAAsB,iBACpB,SACA,aACG,OACiB;AACpB,MAAI,aAAa,iBAAiB,SAAS;AAEzC,WAAO,QAAQ,iBAAiB,GAAG,KAAK;AAAA,EAC1C;AAEA,QAAM,gBAAgB,aAAa,iBAAiB,WAAW,IAAI;AAEnE,SAAO,QAAQ,eAAe,OAAO,yBAAyB;AAC5D,UAAM,CAAC,EAAE,cAAc,eAAe,CAAC,IAAI,MAAM,qBAAqB;AAAA,MACpE;AAAA,QACE,KAAK;AAAA,MACP;AAAA,IACF;AAEA,QAAI,mBAAmB,eAAe;AAEpC,YAAM,qBAAqB,IAAI;AAAA,QAC7B,KAAK,yBAAyB,aAAa;AAAA,MAC7C,CAAC;AAAA,IACH;AAEA,QAAI;AAEF,YAAM,MAAM,MAAM,qBAAqB,iBAAiB,GAAG,KAAK;AAChE,aAAO;AAAA,IACT,UAAE;AAEA,UAAI,mBAAmB,eAAe;AAEpC,cAAM,qBAAqB,IAAI;AAAA,UAC7B,KAAK,yBAAyB,cAAc;AAAA,QAC9C,CAAC;AAAA,MACH;AAAA,IACF;AAAA,EACF,CAAC;AACH;","names":[]}