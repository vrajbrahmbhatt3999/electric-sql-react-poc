import { ConnectivityState, QualifiedTablename } from './index.js';
import { LiveResult, LiveResultUpdate } from '../client/model/model.js';
import { Notifier, UnsubscribeFunction } from '../notifiers/index.js';
export type LiveResultSubscribeFunction<T> = (handler: (resultUpdate: LiveResultUpdate<T>) => void) => UnsubscribeFunction;
export type ConnectivityStateSubscribeFuncition = (handler: (connectivityStateUpdate: ConnectivityState) => void) => UnsubscribeFunction;
/**
 * Generates a function that allows a client to subscribe to updates
 * to results generated by a given `liveQuery`. An update with the full
 * query result will occur anytime a table touched by the query is updated.
 *
 * @returns A function to unsubscribe from query result updates
 */
export declare function createQueryResultSubscribeFunction<T>(notifier: Notifier, liveQuery: () => Promise<LiveResult<T>>, relevantTablenames?: QualifiedTablename[]): LiveResultSubscribeFunction<T>;
export declare function createConnectivityStateSubscribeFunction(notifier: Notifier): ConnectivityStateSubscribeFuncition;
