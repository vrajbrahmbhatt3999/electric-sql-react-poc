{"version":3,"sources":["../../src/util/proto.ts"],"sourcesContent":["import * as Pb from '../_generated/protocol/satellite'\nimport * as _m0 from 'protobufjs/minimal'\nimport { SatelliteError, SatelliteErrorCode } from './types'\nimport { ShapeRequest } from '../satellite/shapes/types'\nimport { base64, sqliteTypeDecoder } from './encoders'\nimport { getMaskBit } from './bitmaskHelpers'\n\nexport type GetName<T extends SatPbMsg> =\n  T['$type'] extends `Electric.Satellite.${infer K}` ? K : never\ntype MappingTuples = {\n  [k in SatPbMsg as GetName<k>]: [number, SatPbMsgObj<k>]\n}\n\nexport type HandlerMapping = {\n  [k in SatPbMsg as GetName<k>]: (msg: k) => void\n}\n\nconst serverErrorToSatError: Record<\n  Pb.SatErrorResp_ErrorCode,\n  SatelliteErrorCode\n> = {\n  [Pb.SatErrorResp_ErrorCode.AUTH_FAILED]: SatelliteErrorCode.AUTH_FAILED,\n  [Pb.SatErrorResp_ErrorCode.AUTH_REQUIRED]: SatelliteErrorCode.AUTH_REQUIRED,\n  [Pb.SatErrorResp_ErrorCode.INVALID_REQUEST]:\n    SatelliteErrorCode.INVALID_REQUEST,\n  [Pb.SatErrorResp_ErrorCode.PROTO_VSN_MISMATCH]:\n    SatelliteErrorCode.PROTO_VSN_MISMATCH,\n  [Pb.SatErrorResp_ErrorCode.REPLICATION_FAILED]:\n    SatelliteErrorCode.REPLICATION_FAILED,\n  [Pb.SatErrorResp_ErrorCode.SCHEMA_VSN_MISMATCH]:\n    SatelliteErrorCode.UNKNOWN_SCHEMA_VSN,\n  [Pb.SatErrorResp_ErrorCode.INTERNAL]: SatelliteErrorCode.INTERNAL,\n  [Pb.SatErrorResp_ErrorCode.UNRECOGNIZED]: SatelliteErrorCode.UNRECOGNIZED,\n}\n\nconst startReplicationErrorToSatError: Record<\n  Pb.SatInStartReplicationResp_ReplicationError_Code,\n  SatelliteErrorCode\n> = {\n  [Pb.SatInStartReplicationResp_ReplicationError_Code.CODE_UNSPECIFIED]:\n    SatelliteErrorCode.INTERNAL,\n  [Pb.SatInStartReplicationResp_ReplicationError_Code.UNRECOGNIZED]:\n    SatelliteErrorCode.INTERNAL,\n  [Pb.SatInStartReplicationResp_ReplicationError_Code.BEHIND_WINDOW]:\n    SatelliteErrorCode.BEHIND_WINDOW,\n  [Pb.SatInStartReplicationResp_ReplicationError_Code.INVALID_POSITION]:\n    SatelliteErrorCode.INVALID_POSITION,\n  [Pb.SatInStartReplicationResp_ReplicationError_Code.SUBSCRIPTION_NOT_FOUND]:\n    SatelliteErrorCode.SUBSCRIPTION_NOT_FOUND,\n  [Pb.SatInStartReplicationResp_ReplicationError_Code.MALFORMED_LSN]:\n    SatelliteErrorCode.MALFORMED_LSN,\n  [Pb.SatInStartReplicationResp_ReplicationError_Code.UNKNOWN_SCHEMA_VSN]:\n    SatelliteErrorCode.UNKNOWN_SCHEMA_VSN,\n}\n\nconst subsErrorToSatError: Record<\n  Pb.SatSubsResp_SatSubsError_Code,\n  SatelliteErrorCode\n> = {\n  [Pb.SatSubsResp_SatSubsError_Code.CODE_UNSPECIFIED]:\n    SatelliteErrorCode.INTERNAL,\n  [Pb.SatSubsResp_SatSubsError_Code.UNRECOGNIZED]: SatelliteErrorCode.INTERNAL,\n  [Pb.SatSubsResp_SatSubsError_Code.SHAPE_REQUEST_ERROR]:\n    SatelliteErrorCode.SHAPE_REQUEST_ERROR,\n  [Pb.SatSubsResp_SatSubsError_Code.SUBSCRIPTION_ID_ALREADY_EXISTS]:\n    SatelliteErrorCode.SUBSCRIPTION_ID_ALREADY_EXISTS,\n}\n\nconst subsErrorShapeReqErrorToSatError: Record<\n  Pb.SatSubsResp_SatSubsError_ShapeReqError_Code,\n  SatelliteErrorCode\n> = {\n  [Pb.SatSubsResp_SatSubsError_ShapeReqError_Code.CODE_UNSPECIFIED]:\n    SatelliteErrorCode.INTERNAL,\n  [Pb.SatSubsResp_SatSubsError_ShapeReqError_Code.UNRECOGNIZED]:\n    SatelliteErrorCode.INTERNAL,\n  [Pb.SatSubsResp_SatSubsError_ShapeReqError_Code.TABLE_NOT_FOUND]:\n    SatelliteErrorCode.TABLE_NOT_FOUND,\n  [Pb.SatSubsResp_SatSubsError_ShapeReqError_Code\n    .REFERENTIAL_INTEGRITY_VIOLATION]:\n    SatelliteErrorCode.REFERENTIAL_INTEGRITY_VIOLATION,\n  [Pb.SatSubsResp_SatSubsError_ShapeReqError_Code.EMPTY_SHAPE_DEFINITION]:\n    SatelliteErrorCode.EMPTY_SHAPE_DEFINITION,\n  [Pb.SatSubsResp_SatSubsError_ShapeReqError_Code\n    .DUPLICATE_TABLE_IN_SHAPE_DEFINITION]:\n    SatelliteErrorCode.DUPLICATE_TABLE_IN_SHAPE_DEFINITION,\n  [Pb.SatSubsResp_SatSubsError_ShapeReqError_Code.INVALID_WHERE_CLAUSE]:\n    SatelliteErrorCode.INVALID_WHERE_CLAUSE_IN_SHAPE_DEFINITION,\n  [Pb.SatSubsResp_SatSubsError_ShapeReqError_Code.INVALID_INCLUDE_TREE]:\n    SatelliteErrorCode.INVALID_INCLUDE_TREE_IN_SHAPE_DEFINITION,\n}\n\nconst subsDataErrorToSatError: Record<\n  Pb.SatSubsDataError_Code,\n  SatelliteErrorCode\n> = {\n  [Pb.SatSubsDataError_Code.CODE_UNSPECIFIED]: SatelliteErrorCode.INTERNAL,\n  [Pb.SatSubsDataError_Code.UNRECOGNIZED]: SatelliteErrorCode.INTERNAL,\n  [Pb.SatSubsDataError_Code.SHAPE_DELIVERY_ERROR]:\n    SatelliteErrorCode.SHAPE_DELIVERY_ERROR,\n}\n\nconst subsDataErrorShapeReqToSatError: Record<\n  Pb.SatSubsDataError_ShapeReqError_Code,\n  SatelliteErrorCode\n> = {\n  [Pb.SatSubsDataError_ShapeReqError_Code.CODE_UNSPECIFIED]:\n    SatelliteErrorCode.INTERNAL,\n  [Pb.SatSubsDataError_ShapeReqError_Code.UNRECOGNIZED]:\n    SatelliteErrorCode.INTERNAL,\n  [Pb.SatSubsDataError_ShapeReqError_Code.SHAPE_SIZE_LIMIT_EXCEEDED]:\n    SatelliteErrorCode.SHAPE_SIZE_LIMIT_EXCEEDED,\n}\n\n// NOTE: This mapping should be kept in sync with Electric message mapping.\n// Take into account that this mapping is dependent on the protobuf\n// protocol version.\nconst msgtypetuples: MappingTuples = {\n  SatErrorResp: [0, Pb.SatErrorResp],\n  SatOpLog: [9, Pb.SatOpLog],\n  SatRelation: [10, Pb.SatRelation],\n  SatSubsDataError: [14, Pb.SatSubsDataError],\n  SatSubsDataBegin: [15, Pb.SatSubsDataBegin],\n  SatSubsDataEnd: [16, Pb.SatSubsDataEnd],\n  SatShapeDataBegin: [17, Pb.SatShapeDataBegin],\n  SatShapeDataEnd: [18, Pb.SatShapeDataEnd],\n  SatRpcRequest: [21, Pb.SatRpcRequest],\n  SatRpcResponse: [22, Pb.SatRpcResponse],\n  SatOpLogAck: [23, Pb.SatOpLogAck],\n  SatUnsubsDataBegin: [24, Pb.SatUnsubsDataBegin],\n  SatUnsubsDataEnd: [25, Pb.SatUnsubsDataEnd],\n}\n\nconst msgtypemapping = Object.fromEntries(\n  Object.entries(msgtypetuples).map((e) => [getFullTypeName(e[0]), e[1]])\n)\n\nconst codemapping = Object.fromEntries(\n  Object.entries(msgtypetuples).map((e) => [e[1][0], getFullTypeName(e[0])])\n)\n\ntype ResponseOrError<T> = PromiseLike<Awaited<T> | Pb.SatErrorResp>\n\nexport type RpcResponder = {\n  [k in keyof Pb.ClientRoot]: (\n    ...args: Parameters<Pb.ClientRoot[k]>\n  ) => ResponseOrError<ReturnType<Pb.ClientRoot[k]>>\n}\n\nexport type ClientRpcResponse = Awaited<\n  ReturnType<Pb.ClientRoot[keyof Pb.ClientRoot]>\n>\ntype RpcResponseEncoders = {\n  [K in ClientRpcResponse as K['$type']]: SatPbMsgObj<K>\n}\nconst rpcResponseEncoders: RpcResponseEncoders = {\n  'Electric.Satellite.SatInStartReplicationResp': Pb.SatInStartReplicationResp,\n  'Electric.Satellite.SatInStopReplicationResp': Pb.SatInStopReplicationResp,\n}\n\nexport function encodeRpcResponse<T extends ClientRpcResponse>(\n  resp: T\n): Uint8Array {\n  const encoder = rpcResponseEncoders[resp.$type] as SatPbMsgObj<T>\n  return encoder.encode(resp).finish()\n}\n\n/**\n * Satellite Protobuf messages that appear at the top level of the protocol\n */\nexport type SatPbMsg =\n  | Pb.SatRpcRequest\n  | Pb.SatRpcResponse\n  | Pb.SatErrorResp\n  | Pb.SatOpLog\n  | Pb.SatRelation\n  | Pb.SatSubsDataError\n  | Pb.SatSubsDataBegin\n  | Pb.SatSubsDataEnd\n  | Pb.SatShapeDataBegin\n  | Pb.SatShapeDataEnd\n  | Pb.SatOpLogAck\n  | Pb.SatUnsubsDataBegin\n  | Pb.SatUnsubsDataEnd\n\nexport type SatPbMsgObj<\n  Msg extends { $type: string },\n  Part = Pb.DeepPartial<Msg>\n> = {\n  $type: Msg['$type']\n  encode(message: Msg, writer?: _m0.Writer): _m0.Writer\n  decode(input: _m0.Reader | Uint8Array, length?: number): Msg\n  fromPartial<I extends Pb.Exact<Part, I>>(object: I): Msg\n}\n\nexport function getMsgType(msg: SatPbMsg): number {\n  const mapping = msgtypemapping[msg.$type]\n  if (mapping) {\n    return mapping[0]\n  }\n  return 0\n}\n\nexport function getTypeFromCode(code: number): string {\n  return codemapping[code] ?? ''\n}\n\nexport function getTypeFromString(string_type: string): number | undefined {\n  return msgtypemapping[string_type]?.[0]\n}\n\nexport function getObjFromString<K extends SatPbMsg['$type']>(\n  string_type: K\n): SatPbMsgObj<Extract<SatPbMsg, { $type: K }>>\nexport function getObjFromString(\n  string_type: string\n): MappingTuples[keyof MappingTuples][1] | undefined\nexport function getObjFromString(string_type: string): any {\n  return msgtypemapping[string_type]?.[1]\n}\n\nexport function getBufWithMsgTag(msg_type: SatPbMsg) {\n  const msgtype = getMsgType(msg_type)\n\n  const buf = new Uint8Array(1)\n  buf.set([msgtype], 0)\n  return buf\n}\n\nexport function getShortName<T extends SatPbMsg>(msg: T): GetName<T> {\n  return msg.$type.replace('Electric.Satellite.', '') as GetName<T>\n}\n\nexport function getProtocolVersion(): string {\n  return Pb.protobufPackage\n}\n\nexport function getFullTypeName(message: string): string {\n  return getProtocolVersion() + '.' + message\n}\n\nexport function serverErrorToSatelliteError(\n  error: Pb.SatErrorResp\n): SatelliteError {\n  return new SatelliteError(\n    serverErrorToSatError[error.errorType],\n    'server error'\n  )\n}\n\nexport function startReplicationErrorToSatelliteError(\n  error: Pb.SatInStartReplicationResp_ReplicationError\n): SatelliteError {\n  return new SatelliteError(\n    startReplicationErrorToSatError[error.code],\n    error.message\n  )\n}\n\nexport function subsErrorToSatelliteError({\n  shapeRequestError,\n  code,\n  message,\n}: Pb.SatSubsResp_SatSubsError): SatelliteError {\n  if (shapeRequestError.length > 0) {\n    const shapeErrorMsgs = shapeRequestError\n      .map(subsShapeReqErrorToSatelliteError)\n      .map((e) => e.message)\n      .join('; ')\n    const composed = `subscription error message: ${message}; shape error messages: ${shapeErrorMsgs}`\n    return new SatelliteError(subsErrorToSatError[code], composed)\n  }\n  return new SatelliteError(subsErrorToSatError[code], message)\n}\n\nexport function subsShapeReqErrorToSatelliteError(\n  error: Pb.SatSubsResp_SatSubsError_ShapeReqError\n): SatelliteError {\n  return new SatelliteError(\n    subsErrorShapeReqErrorToSatError[error.code],\n    error.message\n  )\n}\n\nexport function subsDataErrorToSatelliteError({\n  shapeRequestError,\n  code,\n  message,\n}: Pb.SatSubsDataError): SatelliteError {\n  if (shapeRequestError.length > 0) {\n    const shapeErrorMsgs = shapeRequestError\n      .map(subsDataShapeErrorToSatelliteError)\n      .map((e) => e.message)\n      .join('; ')\n    const composed = `subscription data error message: ${message}; shape error messages: ${shapeErrorMsgs}`\n    return new SatelliteError(subsDataErrorToSatError[code], composed)\n  }\n  return new SatelliteError(subsDataErrorToSatError[code], message)\n}\n\nexport function subsDataShapeErrorToSatelliteError(\n  error: Pb.SatSubsDataError_ShapeReqError\n): SatelliteError {\n  return new SatelliteError(\n    subsDataErrorShapeReqToSatError[error.code],\n    error.message\n  )\n}\n\nexport function shapeRequestToSatShapeReq(\n  shapeRequests: ShapeRequest[]\n): Pb.SatShapeReq[] {\n  const shapeReqs: Pb.SatShapeReq[] = []\n  for (const sr of shapeRequests) {\n    const requestId = sr.requestId\n    const req = Pb.SatShapeReq.fromPartial({\n      requestId,\n      shapeDefinition: {\n        selects: [sr.definition],\n      },\n    })\n    shapeReqs.push(req)\n  }\n  return shapeReqs\n}\n\ntype MessageOfInterest =\n  | SatPbMsg\n  | Awaited<ReturnType<Pb.Root[keyof Pb.Root]>>\n  | Parameters<Pb.Root[keyof Pb.Root]>[0]\n\nexport function msgToString(message: MessageOfInterest): string {\n  switch (message.$type) {\n    case 'Electric.Satellite.SatAuthReq':\n      return `#SatAuthReq{id: ${message.id}, token: ${message.token}}`\n    case 'Electric.Satellite.SatAuthResp':\n      return `#SatAuthResp{id: ${message.id}}`\n    case 'Electric.Satellite.SatErrorResp':\n      return `#SatErrorResp{type: ${\n        Pb.SatErrorResp_ErrorCode[message.errorType]\n      }}`\n    case 'Electric.Satellite.SatInStartReplicationReq': {\n      const schemaVersion = message.schemaVersion\n        ? ` schema: ${message.schemaVersion},`\n        : ''\n      return `#SatInStartReplicationReq{lsn: ${base64.fromBytes(\n        message.lsn\n      )},${schemaVersion} subscriptions: [${message.subscriptionIds}]}`\n    }\n    case 'Electric.Satellite.SatInStartReplicationResp':\n      return `#SatInStartReplicationResp{${\n        message.err\n          ? '`' + startReplicationErrorToSatelliteError(message.err) + '`'\n          : ''\n      }}`\n    case 'Electric.Satellite.SatInStopReplicationReq':\n      return `#SatInStopReplicationReq{}`\n    case 'Electric.Satellite.SatInStopReplicationResp':\n      return `#SatInStopReplicationResp{}`\n    case 'Electric.Satellite.SatRelation': {\n      const cols = message.columns\n        .map((x) => `${x.name}: ${x.type}${x.primaryKey ? ' PK' : ''}`)\n        .join(', ')\n      return `#SatRelation{for: ${message.schemaName}.${message.tableName}, as: ${message.relationId}, cols: [${cols}]}`\n    }\n    case 'Electric.Satellite.SatSubsDataBegin':\n      return `#SatSubsDataBegin{id: ${\n        message.subscriptionId\n      }, lsn: ${base64.fromBytes(message.lsn)}}`\n    case 'Electric.Satellite.SatSubsDataEnd':\n      return `#SatSubsDataEnd{}`\n    case 'Electric.Satellite.SatShapeDataBegin':\n      return `#SatShapeDataBegin{id: ${message.requestId}}`\n    case 'Electric.Satellite.SatShapeDataEnd':\n      return `#SatShapeDataEnd{}`\n    case 'Electric.Satellite.SatSubsDataError': {\n      const shapeErrors = message.shapeRequestError.map(\n        (x) =>\n          `${x.requestId}: ${Pb.SatSubsDataError_ShapeReqError_Code[x.code]} (${\n            x.message\n          })`\n      )\n      const code = Pb.SatSubsDataError_Code[message.code]\n      return `#SatSubsDataError{id: ${message.subscriptionId}, code: ${code}, msg: \"${message.message}\", errors: [${shapeErrors}]}`\n    }\n    case 'Electric.Satellite.SatSubsReq':\n      return `#SatSubsReq{id: ${\n        message.subscriptionId\n      }, shapes: ${JSON.stringify(message.shapeRequests)}}`\n    case 'Electric.Satellite.SatSubsResp': {\n      if (message.err) {\n        const shapeErrors = message.err.shapeRequestError.map(\n          (x) =>\n            `${x.requestId}: ${\n              Pb.SatSubsResp_SatSubsError_ShapeReqError_Code[x.code]\n            } (${x.message})`\n        )\n        return `#SatSubsResp{id: ${message.subscriptionId}, err: ${\n          Pb.SatSubsResp_SatSubsError_Code[message.err.code]\n        } (${message.err.message}), shapes: [${shapeErrors}]}`\n      } else {\n        return `#SatSubsResp{id: ${message.subscriptionId}}`\n      }\n    }\n    case 'Electric.Satellite.SatUnsubsReq':\n      return `#SatUnsubsReq{ids: ${message.subscriptionIds}}`\n    case 'Electric.Satellite.SatUnsubsResp':\n      return `#SatUnsubsResp{}`\n    case 'Electric.Satellite.SatOpLog':\n      return `#SatOpLog{ops: [${message.ops.map(opToString).join(', ')}]}`\n    case 'Electric.Satellite.SatRpcRequest':\n      return `#SatRpcRequest{method: ${message.method}, requestId: ${message.requestId}}`\n    case 'Electric.Satellite.SatRpcResponse':\n      return `#SatRpcResponse{method: ${message.method}, requestId: ${\n        message.requestId\n      }${message.error ? ', error: ' + msgToString(message.error) : ''}}`\n    case 'Electric.Satellite.SatOpLogAck':\n      return `#SatOpLogAck{lsn: ${base64.fromBytes(message.lsn)}, txid: ${\n        message.transactionId\n      }}`\n    case 'Electric.Satellite.SatUnsubsDataBegin':\n      return `#SatUnsubsDataBegin{lsn: ${base64.fromBytes(message.lsn)}, ${\n        message.subscriptionIds\n      }}`\n    case 'Electric.Satellite.SatUnsubsDataEnd':\n      return `#SatUnsubsDataEnd{}`\n  }\n}\n\nfunction opToString(op: Pb.SatTransOp): string {\n  if (op.begin)\n    return `#Begin{lsn: ${base64.fromBytes(\n      op.begin.lsn\n    )}, ts: ${op.begin.commitTimestamp.toString()}, isMigration: ${\n      op.begin.isMigration\n    }}`\n  if (op.commit) return `#Commit{lsn: ${base64.fromBytes(op.commit.lsn)}}`\n  if (op.insert)\n    return `#Insert{for: ${op.insert.relationId}, tags: [${\n      op.insert.tags\n    }], new: [${op.insert.rowData ? rowToString(op.insert.rowData) : ''}]}`\n  if (op.update)\n    return `#Update{for: ${op.update.relationId}, tags: [${\n      op.update.tags\n    }], new: [${\n      op.update.rowData ? rowToString(op.update.rowData) : ''\n    }], old: data: [${\n      op.update.oldRowData ? rowToString(op.update.oldRowData) : ''\n    }]}`\n  if (op.delete)\n    return `#Delete{for: ${op.delete.relationId}, tags: [${\n      op.delete.tags\n    }], old: [${\n      op.delete.oldRowData ? rowToString(op.delete.oldRowData) : ''\n    }]}`\n  if (op.gone)\n    return `#Gone{for: ${op.gone.relationId}, pk: ${rowToString(\n      op.gone.pkData!\n    )}}`\n  if (op.compensation)\n    return `#Compensation{for: ${op.compensation.relationId}, pk: ${rowToString(\n      op.compensation.pkData!\n    )}, tags: [${op.compensation.tags}]}`\n  if (op.migrate)\n    return `#Migrate{vsn: ${op.migrate.version}, for: ${\n      op.migrate.table?.name\n    }, stmts: [${op.migrate.stmts\n      .map((x) => x.sql.replaceAll('\\n', '\\\\n'))\n      .join('; ')}]}`\n  if (op.additionalBegin)\n    return `#AdditionalBegin{ref: ${op.additionalBegin.ref}}`\n  if (op.additionalCommit)\n    return `#AdditionalCommit{ref: ${op.additionalCommit.ref}}`\n  return ''\n}\n\nfunction rowToString(row: Pb.SatOpRow): string {\n  return row.values\n    .map((x, i) =>\n      getMaskBit(row.nullsBitmask, i) === 0\n        ? JSON.stringify(sqliteTypeDecoder.text(x))\n        : '∅'\n    )\n    .join(', ')\n}\n"],"mappings":"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","names":[]}