{"version":3,"sources":["../../src/util/random.ts"],"sourcesContent":["import { Uuid } from './types'\nimport Log from 'loglevel'\n\nexport const randomValue = (): string => {\n  return Math.random().toString(16).substring(2)\n}\n\n// only warn about unsafe RNG once to avoid flooding logs\nlet unsafeRandomWarned = false\n\nexport const genUUID = (): Uuid => {\n  // best case, `crypto.randomUUID` is available\n  if (globalThis.crypto?.randomUUID) {\n    return globalThis.crypto.randomUUID()\n  }\n\n  const bytes = new Uint8Array(16)\n\n  if (globalThis.crypto?.getRandomValues) {\n    // `crypto.getRandomValues` is available even in non-secure contexts\n    globalThis.crypto.getRandomValues(bytes)\n  } else {\n    // fallback to Math.random, if the Crypto API is completely missing\n    if (!unsafeRandomWarned) {\n      Log.debug(\n        'Crypto API is not available. ' +\n          'Falling back to Math.random for UUID generation ' +\n          'with weak uniqueness guarantees. ' +\n          'Provide polyfill or alternative for crypto.getRandomValues.'\n      )\n      unsafeRandomWarned = true\n    }\n    for (let i = 0; i < bytes.length; i++) {\n      bytes[i] = Math.floor(Math.random() * 256)\n    }\n  }\n\n  bytes[6] = (bytes[6] & 0x0f) | 0x40 // Set the 4 most significant bits to 0100\n  bytes[8] = (bytes[8] & 0x3f) | 0x80 // Set the 2 most significant bits to 10\n\n  const hexValues: string[] = []\n  bytes.forEach((byte) => {\n    hexValues.push(byte.toString(16).padStart(2, '0'))\n  })\n\n  return (hexValues.slice(0, 4).join('') +\n    '-' +\n    hexValues.slice(4, 6).join('') +\n    '-' +\n    hexValues.slice(6, 8).join('') +\n    '-' +\n    hexValues.slice(8, 10).join('') +\n    '-' +\n    hexValues.slice(10).join('')) as Uuid\n}\n"],"mappings":"AACA,OAAO,SAAS;AAET,MAAM,cAAc,MAAc;AACvC,SAAO,KAAK,OAAO,EAAE,SAAS,EAAE,EAAE,UAAU,CAAC;AAC/C;AAGA,IAAI,qBAAqB;AAElB,MAAM,UAAU,MAAY;AAEjC,MAAI,WAAW,QAAQ,YAAY;AACjC,WAAO,WAAW,OAAO,WAAW;AAAA,EACtC;AAEA,QAAM,QAAQ,IAAI,WAAW,EAAE;AAE/B,MAAI,WAAW,QAAQ,iBAAiB;AAEtC,eAAW,OAAO,gBAAgB,KAAK;AAAA,EACzC,OAAO;AAEL,QAAI,CAAC,oBAAoB;AACvB,UAAI;AAAA,QACF;AAAA,MAIF;AACA,2BAAqB;AAAA,IACvB;AACA,aAAS,IAAI,GAAG,IAAI,MAAM,QAAQ,KAAK;AACrC,YAAM,CAAC,IAAI,KAAK,MAAM,KAAK,OAAO,IAAI,GAAG;AAAA,IAC3C;AAAA,EACF;AAEA,QAAM,CAAC,IAAK,MAAM,CAAC,IAAI,KAAQ;AAC/B,QAAM,CAAC,IAAK,MAAM,CAAC,IAAI,KAAQ;AAE/B,QAAM,YAAsB,CAAC;AAC7B,QAAM,QAAQ,CAAC,SAAS;AACtB,cAAU,KAAK,KAAK,SAAS,EAAE,EAAE,SAAS,GAAG,GAAG,CAAC;AAAA,EACnD,CAAC;AAED,SAAQ,UAAU,MAAM,GAAG,CAAC,EAAE,KAAK,EAAE,IACnC,MACA,UAAU,MAAM,GAAG,CAAC,EAAE,KAAK,EAAE,IAC7B,MACA,UAAU,MAAM,GAAG,CAAC,EAAE,KAAK,EAAE,IAC7B,MACA,UAAU,MAAM,GAAG,EAAE,EAAE,KAAK,EAAE,IAC9B,MACA,UAAU,MAAM,EAAE,EAAE,KAAK,EAAE;AAC/B;","names":[]}