import * as Pb from '../_generated/protocol/satellite.js';
import * as _m0 from 'protobufjs/minimal';
import { SatelliteError } from './types.js';
import { ShapeRequest } from '../satellite/shapes/types.js';
export type GetName<T extends SatPbMsg> = T['$type'] extends `Electric.Satellite.${infer K}` ? K : never;
type MappingTuples = {
    [k in SatPbMsg as GetName<k>]: [number, SatPbMsgObj<k>];
};
export type HandlerMapping = {
    [k in SatPbMsg as GetName<k>]: (msg: k) => void;
};
type ResponseOrError<T> = PromiseLike<Awaited<T> | Pb.SatErrorResp>;
export type RpcResponder = {
    [k in keyof Pb.ClientRoot]: (...args: Parameters<Pb.ClientRoot[k]>) => ResponseOrError<ReturnType<Pb.ClientRoot[k]>>;
};
export type ClientRpcResponse = Awaited<ReturnType<Pb.ClientRoot[keyof Pb.ClientRoot]>>;
export declare function encodeRpcResponse<T extends ClientRpcResponse>(resp: T): Uint8Array;
/**
 * Satellite Protobuf messages that appear at the top level of the protocol
 */
export type SatPbMsg = Pb.SatRpcRequest | Pb.SatRpcResponse | Pb.SatErrorResp | Pb.SatOpLog | Pb.SatRelation | Pb.SatSubsDataError | Pb.SatSubsDataBegin | Pb.SatSubsDataEnd | Pb.SatShapeDataBegin | Pb.SatShapeDataEnd | Pb.SatOpLogAck | Pb.SatUnsubsDataBegin | Pb.SatUnsubsDataEnd;
export type SatPbMsgObj<Msg extends {
    $type: string;
}, Part = Pb.DeepPartial<Msg>> = {
    $type: Msg['$type'];
    encode(message: Msg, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Msg;
    fromPartial<I extends Pb.Exact<Part, I>>(object: I): Msg;
};
export declare function getMsgType(msg: SatPbMsg): number;
export declare function getTypeFromCode(code: number): string;
export declare function getTypeFromString(string_type: string): number | undefined;
export declare function getObjFromString<K extends SatPbMsg['$type']>(string_type: K): SatPbMsgObj<Extract<SatPbMsg, {
    $type: K;
}>>;
export declare function getObjFromString(string_type: string): MappingTuples[keyof MappingTuples][1] | undefined;
export declare function getBufWithMsgTag(msg_type: SatPbMsg): Uint8Array;
export declare function getShortName<T extends SatPbMsg>(msg: T): GetName<T>;
export declare function getProtocolVersion(): string;
export declare function getFullTypeName(message: string): string;
export declare function serverErrorToSatelliteError(error: Pb.SatErrorResp): SatelliteError;
export declare function startReplicationErrorToSatelliteError(error: Pb.SatInStartReplicationResp_ReplicationError): SatelliteError;
export declare function subsErrorToSatelliteError({ shapeRequestError, code, message, }: Pb.SatSubsResp_SatSubsError): SatelliteError;
export declare function subsShapeReqErrorToSatelliteError(error: Pb.SatSubsResp_SatSubsError_ShapeReqError): SatelliteError;
export declare function subsDataErrorToSatelliteError({ shapeRequestError, code, message, }: Pb.SatSubsDataError): SatelliteError;
export declare function subsDataShapeErrorToSatelliteError(error: Pb.SatSubsDataError_ShapeReqError): SatelliteError;
export declare function shapeRequestToSatShapeReq(shapeRequests: ShapeRequest[]): Pb.SatShapeReq[];
type MessageOfInterest = SatPbMsg | Awaited<ReturnType<Pb.Root[keyof Pb.Root]>> | Parameters<Pb.Root[keyof Pb.Root]>[0];
export declare function msgToString(message: MessageOfInterest): string;
export {};
