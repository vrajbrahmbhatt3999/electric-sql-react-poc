{
  "version": 3,
  "sources": ["../../@electric-sql/pglite-react/src/provider.tsx", "../../@electric-sql/pglite-react/src/hooks.ts"],
  "sourcesContent": ["import React, { createContext, useContext } from 'react'\nimport { PGliteWithLive } from '@electric-sql/pglite/live'\n\ninterface Props<T extends PGliteWithLive> {\n  children?: React.ReactNode\n  db?: T\n}\n\ntype PGliteProvider<T extends PGliteWithLive> = (\n  props: Props<T>,\n) => React.JSX.Element\ntype UsePGlite<T extends PGliteWithLive> = (db?: T) => T\n\ninterface PGliteProviderSet<T extends PGliteWithLive> {\n  PGliteProvider: PGliteProvider<T>\n  usePGlite: UsePGlite<T>\n}\n\n/**\n * Create a typed set of {@link PGliteProvider} and {@link usePGlite}.\n */\nfunction makePGliteProvider<T extends PGliteWithLive>(): PGliteProviderSet<T> {\n  const ctx = createContext<T | undefined>(undefined)\n  return {\n    usePGlite: ((db?: T) => {\n      const dbProvided = useContext(ctx)\n\n      // allow providing a db explicitly\n      if (db !== undefined) return db\n\n      if (!dbProvided)\n        throw new Error(\n          'No PGlite instance found, use PGliteProvider to provide one',\n        )\n\n      return dbProvided\n    }) as UsePGlite<T>,\n    PGliteProvider: ({ children, db }: Props<T>) => {\n      return <ctx.Provider value={db}>{children}</ctx.Provider>\n    },\n  }\n}\n\nconst { PGliteProvider, usePGlite } = makePGliteProvider<PGliteWithLive>()\n\nexport { makePGliteProvider, PGliteProvider, usePGlite }\n", "import type { LiveQuery, LiveQueryResults } from '@electric-sql/pglite/live'\nimport { query as buildQuery } from '@electric-sql/pglite/template'\nimport { useEffect, useRef, useState } from 'react'\nimport { usePGlite } from './provider'\n\nfunction paramsEqual(\n  a1: unknown[] | undefined | null,\n  a2: unknown[] | undefined | null,\n) {\n  if (!a1 && !a2) return true\n  if (a1?.length !== a2?.length) return false\n  for (let i = 0; i < a1!.length; i++) {\n    if (!Object.is(a1![i], a2![i])) {\n      return false\n    }\n  }\n  return true\n}\n\nfunction useLiveQueryImpl<T = { [key: string]: unknown }>(\n  query: string | LiveQuery<T> | Promise<LiveQuery<T>>,\n  params: unknown[] | undefined | null,\n  key?: string,\n): Omit<LiveQueryResults<T>, 'affectedRows'> | undefined {\n  const db = usePGlite()\n  const paramsRef = useRef(params)\n  const liveQueryRef = useRef<LiveQuery<T> | undefined>(undefined)\n  let liveQuery: LiveQuery<T> | undefined\n  let liveQueryChanged = false\n  if (!(typeof query === 'string') && !(query instanceof Promise)) {\n    liveQuery = query\n    liveQueryChanged = liveQueryRef.current !== liveQuery\n    liveQueryRef.current = liveQuery\n  }\n  const [results, setResults] = useState<LiveQueryResults<T> | undefined>(\n    liveQuery?.initialResults,\n  )\n\n  let currentParams = paramsRef.current\n  if (!paramsEqual(paramsRef.current, params)) {\n    paramsRef.current = params\n    currentParams = params\n  }\n\n  /* eslint-disable @eslint-react/hooks-extra/no-direct-set-state-in-use-effect */\n  useEffect(() => {\n    let cancelled = false\n    const cb = (results: LiveQueryResults<T>) => {\n      if (cancelled) return\n      setResults(results)\n    }\n    if (typeof query === 'string') {\n      const ret =\n        key !== undefined\n          ? db.live.incrementalQuery<T>(query, currentParams, key, cb)\n          : db.live.query<T>(query, currentParams, cb)\n\n      return () => {\n        cancelled = true\n        ret.then(({ unsubscribe }) => unsubscribe())\n      }\n    } else if (query instanceof Promise) {\n      query.then((liveQuery) => {\n        if (cancelled) return\n        liveQueryRef.current = liveQuery\n        setResults(liveQuery.initialResults)\n        liveQuery.subscribe(cb)\n      })\n      return () => {\n        cancelled = true\n        liveQueryRef.current?.unsubscribe(cb)\n      }\n    } else if (liveQuery) {\n      setResults(liveQuery.initialResults)\n      liveQuery.subscribe(cb)\n      return () => {\n        cancelled = true\n        liveQuery.unsubscribe(cb)\n      }\n    } else {\n      throw new Error('Should never happen')\n    }\n  }, [db, key, query, currentParams, liveQuery])\n  /* eslint-enable @eslint-react/hooks-extra/no-direct-set-state-in-use-effect */\n\n  if (liveQueryChanged && liveQuery) {\n    return liveQuery.initialResults\n  }\n\n  return (\n    results && {\n      rows: results.rows,\n      fields: results.fields,\n      totalCount: results.totalCount,\n      offset: results.offset,\n      limit: results.limit,\n    }\n  )\n}\n\nexport function useLiveQuery<T = { [key: string]: unknown }>(\n  query: string,\n  params?: unknown[] | null,\n): LiveQueryResults<T> | undefined\n\nexport function useLiveQuery<T = { [key: string]: unknown }>(\n  liveQuery: LiveQuery<T>,\n): LiveQueryResults<T>\n\nexport function useLiveQuery<T = { [key: string]: unknown }>(\n  liveQueryPromise: Promise<LiveQuery<T>>,\n): LiveQueryResults<T> | undefined\n\nexport function useLiveQuery<T = { [key: string]: unknown }>(\n  query: string | LiveQuery<T> | Promise<LiveQuery<T>>,\n  params?: unknown[] | null,\n): LiveQueryResults<T> | undefined {\n  return useLiveQueryImpl<T>(query, params)\n}\n\nuseLiveQuery.sql = function <T = { [key: string]: unknown }>(\n  strings: TemplateStringsArray,\n  ...values: any[]\n): LiveQueryResults<T> | undefined {\n  const { query, params } = buildQuery(strings, ...values)\n  // eslint-disable-next-line react-compiler/react-compiler\n  // eslint-disable-next-line react-hooks/rules-of-hooks\n  return useLiveQueryImpl<T>(query, params)\n}\n\nexport function useLiveIncrementalQuery<T = { [key: string]: unknown }>(\n  query: string,\n  params: unknown[] | undefined | null,\n  key: string,\n): LiveQueryResults<T> | undefined {\n  return useLiveQueryImpl<T>(query, params, key)\n}\n"],
  "mappings": "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",
  "names": ["import_react", "buildQuery", "makePGliteProvider", "ctx", "createContext", "db", "dbProvided", "useContext", "children", "jsx", "PGliteProvider", "usePGlite", "paramsEqual", "a1", "a2", "i", "useLiveQueryImpl", "query", "params", "key", "paramsRef", "useRef", "liveQueryRef", "liveQuery", "liveQueryChanged", "results", "setResults", "useState", "currentParams", "useEffect", "cancelled", "cb", "ret", "unsubscribe", "useLiveQuery", "strings", "values", "useLiveIncrementalQuery"]
}
